"use strict";function _classCallCheck(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function initializeApplication(){var e,t={lat:59.9138688,lng:10.752245399999993},n=new google.maps.InfoWindow,i={venues:"https://api.foursquare.com/v2/venues/",explore:"explore?",search:"search?",credentials:"client_id=Y0DEZ005CDT1Y2FBGGXV4KWYOEPLWAKFXTXC0UXLNAFHTFAY&client_secret=GEA32UVN3CUN0IHNCTSFU1SOABB0WT4HH2U2WYRR3ZLX4JX2",version:"&v=20130815"},r=function(e,t){var n="&ll="+e.lat+","+e.lng,r="&query=Popular with visitors",o=new XMLHttpRequest;o.open("GET",i.venues+i.explore+i.credentials+i.version+n+r,!0),o.onreadystatechange=function(){if(4==o.readyState&&200==o.status){var e=JSON.parse(o.responseText),n=e.response.groups[0].items;t(n)}},o.send("")},o=function(e,t){var n=new XMLHttpRequest;n.open("GET",i.venues+e+"?"+i.credentials+i.version,!0),n.onreadystatechange=function(){if(4==n.readyState&&200==n.status){var e=JSON.parse(n.responseText);t(e)}},n.send("")},s=function(e){e.photoUrls=e.photos.groups[0].items.map(function(e){return e.prefix+"original"+e.suffix})},a=function(t){e=new google.maps.LatLngBounds;var i=0;r(t,function(t){t.forEach(function(t){o(t.venue.id,function(t){var r=t.response.venue,o={lat:r.location.lat,lng:r.location.lng},a=new google.maps.Marker({map:u,title:r.name,position:o});a.addListener("click",function(){l(r,n)}),r.marker=a,r.index=i++,s(r),console.log(r),f.addVenue(r),e.extend(new google.maps.LatLng(o)),u.fitBounds(e)})})})},l=function(e,t){if(t.marker!=e.marker){var n='<div id="content" class="content"><h1 class="content__heading" data-bind="text: venueList()['+e.index+'].name"></h1><div class="image-slider" data-bind="foreach: venueList()['+e.index+'].photoUrls"><div class="image-slider__image-container"><img style="max-width:300px;max-height:200px" class="image-slider__image" data-bind="attr: {src: $data}" alt=""></div></div></div>';t.marker=e.marker,t.setContent(n),t.open(u,e.marker),ko.applyBindings(f,document.getElementById("content"))}},u=new google.maps.Map(document.getElementById("map"),{center:t,zoom:15,fullscreenControl:!0}),d=document.getElementById("pac-input"),c=new google.maps.places.SearchBox(d);u.addListener("bounds_changed",function(){c.setBounds(u.getBounds())}),c.addListener("places_changed",function(){var e=c.getPlaces();if(0!==e.length){var t=google.maps.geometry.spherical.computeDistanceBetween(e[0].geometry.location,u.getCenter()),n=JSON.stringify(e[0].geometry.location),i=JSON.parse(n);return t>6e3?(f.removeAllVenues(),void a(i)):void 0}});var p=function(){this.venueList=ko.observableArray(),this.addVenue=this.addVenue.bind(this),this.removeAllVenues=this.removeAllVenues.bind(this),this.callShowInfo=this.callShowInfo.bind(this)};p.prototype.addVenue=function(e){this.venueList.push(e)},p.prototype.removeAllVenues=function(){this.venueList().forEach(function(e){e.marker.setMap(null)}),this.venueList.removeAll()},p.prototype.callShowInfo=function(e){l(e,n),nav.hideSideNav()};var f=new p;ko.applyBindings(f),a(t)}var _createClass=function(){function e(e,t){for(var n=0;n<t.length;n++){var i=t[n];i.enumerable=i.enumerable||!1,i.configurable=!0,"value"in i&&(i.writable=!0),Object.defineProperty(e,i.key,i)}}return function(t,n,i){return n&&e(t.prototype,n),i&&e(t,i),t}}(),SideNav=function(){function e(){_classCallCheck(this,e),this.showButtonEl=document.querySelector(".js-menu-show"),this.hideButtonEl=document.querySelector(".js-menu-hide"),this.sideNavEl=document.querySelector(".js-side-nav"),this.sideNavContainerEl=document.querySelector(".js-side-nav-container"),this.showSideNav=this.showSideNav.bind(this),this.hideSideNav=this.hideSideNav.bind(this),this.blockClicks=this.blockClicks.bind(this),this.onTouchStart=this.onTouchStart.bind(this),this.onTouchMove=this.onTouchMove.bind(this),this.onTouchEnd=this.onTouchEnd.bind(this),this.onTransitionEnd=this.onTransitionEnd.bind(this),this.update=this.update.bind(this),this.startX=0,this.currentX=0,this.touchingSideNav=!1,this.addEventListeners()}return _createClass(e,[{key:"addEventListeners",value:function(){this.showButtonEl.addEventListener("click",this.showSideNav),this.hideButtonEl.addEventListener("click",this.hideSideNav),this.sideNavEl.addEventListener("click",this.hideSideNav),this.sideNavContainerEl.addEventListener("click",this.blockClicks),this.sideNavEl.addEventListener("touchstart",this.onTouchStart),this.sideNavEl.addEventListener("touchmove",this.onTouchMove),this.sideNavEl.addEventListener("touchend",this.onTouchEnd)}},{key:"onTouchStart",value:function(e){this.sideNavEl.classList.contains("side-nav--visible")&&(this.startX=e.touches[0].pageX,this.currentX=this.startX,this.touchingSideNav=!0,requestAnimationFrame(this.update))}},{key:"onTouchMove",value:function(e){if(this.touchingSideNav){this.currentX=e.touches[0].pageX;var t=Math.min(0,this.currentX-this.startX);t<0&&e.preventDefault()}}},{key:"onTouchEnd",value:function(e){if(this.touchingSideNav){this.touchingSideNav=!1;var t=Math.min(0,this.currentX-this.startX);this.sideNavContainerEl.style.transform="",t<0&&this.hideSideNav()}}},{key:"update",value:function(){if(this.touchingSideNav){var e=Math.min(0,this.currentX-this.startX);this.sideNavContainerEl.style.transform="translateX("+e+"px)",requestAnimationFrame(this.update)}}},{key:"blockClicks",value:function(e){e.stopPropagation()}},{key:"onTransitionEnd",value:function(e){this.sideNavEl.classList.remove("side-nav--animatable"),this.sideNavEl.removeEventListener("transitionend",this.onTransitionEnd)}},{key:"showSideNav",value:function(){this.sideNavEl.classList.add("side-nav--animatable"),this.sideNavEl.classList.add("side-nav--visible"),this.sideNavEl.addEventListener("transitionend",this.onTransitionEnd)}},{key:"hideSideNav",value:function(){this.sideNavEl.classList.add("side-nav--animatable"),this.sideNavEl.classList.remove("side-nav--visible"),this.sideNavEl.addEventListener("transitionend",this.onTransitionEnd)}}]),e}(),nav=new SideNav,_typeof="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e};!function(){var e=!0;!function(t){var n=this||(0,eval)("this"),i=n.document,r=n.navigator,o=n.jQuery,s=n.JSON;!function(e){"function"==typeof define&&define.amd?define(["exports","require"],e):e("object"===("undefined"==typeof exports?"undefined":_typeof(exports))&&"object"===("undefined"==typeof module?"undefined":_typeof(module))?module.exports||exports:n.ko={})}(function(a,l){function u(e,t){var n=null===e||("undefined"==typeof e?"undefined":_typeof(e))in y;return!!n&&e===t}function d(e,n){var i;return function(){i||(i=g.utils.setTimeout(function(){i=t,e()},n))}}function c(e,t){var n;return function(){clearTimeout(n),n=g.utils.setTimeout(e,t)}}function p(e){var t=this;return e&&g.utils.objectForEach(e,function(e,n){var i=g.extenders[e];"function"==typeof i&&(t=i(t,n)||t)}),t}function f(e,t){t&&t!==x?"beforeChange"===t?this._limitBeforeChange(e):this._origNotifySubscribers(e,t):this._limitChange(e)}function m(e,t){null!==t&&t.dispose&&t.dispose()}function v(e,t){var n=this.computedObservable,i=n[C];i.isDisposed||(this.disposalCount&&this.disposalCandidates[t]?(n.addDependencyTracking(t,e,this.disposalCandidates[t]),this.disposalCandidates[t]=null,--this.disposalCount):i.dependencyTracking[t]||n.addDependencyTracking(t,e,i.isSleeping?{_target:e}:n.subscribeToDependency(e)))}function h(e){g.bindingHandlers[e]={init:function(t,n,i,r,o){var s=function(){var t={};return t[e]=n(),t};return g.bindingHandlers.event.init.call(this,t,s,i,r,o)}}}function b(e,t,n,i){g.bindingHandlers[e]={init:function(e,r,o,s,a){var l,u;return g.computed(function(){var o=g.utils.unwrapObservable(r()),s=!n!=!o,d=!u,c=d||t||s!==l;c&&(d&&g.computedContext.getDependenciesCount()&&(u=g.utils.cloneNodes(g.virtualElements.childNodes(e),!0)),s?(d||g.virtualElements.setDomNodeChildren(e,g.utils.cloneNodes(u)),g.applyBindingsToDescendants(i?i(a,o):a,e)):g.virtualElements.emptyNode(e),l=s)},null,{disposeWhenNodeIsRemoved:e}),{controlsDescendantBindings:!0}}},g.expressionRewriting.bindingRewriteValidators[e]=!1,g.virtualElements.allowedBindings[e]=!0}var g="undefined"!=typeof a?a:{};g.exportSymbol=function(e,t){for(var n=e.split("."),i=g,r=0;r<n.length-1;r++)i=i[n[r]];i[n[n.length-1]]=t},g.exportProperty=function(e,t,n){e[t]=n},g.version="3.4.0",g.exportSymbol("version",g.version),g.options={deferUpdates:!1,useOnlyNativeEvents:!1},g.utils=function(){function a(e,t){for(var n in e)e.hasOwnProperty(n)&&t(n,e[n])}function l(e,t){if(t)for(var n in t)t.hasOwnProperty(n)&&(e[n]=t[n]);return e}function u(e,t){return e.__proto__=t,e}function d(e,t){if("input"!==g.utils.tagNameLower(e)||!e.type)return!1;if("click"!=t.toLowerCase())return!1;var n=e.type;return"checkbox"==n||"radio"==n}function c(e,t,n){var i;t&&("object"===_typeof(e.classList)?(i=e.classList[n?"add":"remove"],g.utils.arrayForEach(t.match(S),function(t){i.call(e.classList,t)})):"string"==typeof e.className.baseVal?p(e.className,"baseVal",t,n):p(e,"className",t,n))}function p(e,t,n,i){var r=e[t].match(S)||[];g.utils.arrayForEach(n.match(S),function(e){g.utils.addOrRemoveItem(r,e,i)}),e[t]=r.join(" ")}var f={__proto__:[]}instanceof Array,m=!e&&"function"==typeof Symbol,v={},h={},b=r&&/Firefox\/2/i.test(r.userAgent)?"KeyboardEvent":"UIEvents";v[b]=["keyup","keydown","keypress"],v.MouseEvents=["click","dblclick","mousedown","mouseup","mousemove","mouseover","mouseout","mouseenter","mouseleave"],a(v,function(e,t){if(t.length)for(var n=0,i=t.length;n<i;n++)h[t[n]]=e});var y={propertychange:!0},x=i&&function(){for(var e=3,n=i.createElement("div"),r=n.getElementsByTagName("i");n.innerHTML="<!--[if gt IE "+ ++e+"]><i></i><![endif]-->",r[0];);return e>4?e:t}(),E=6===x,w=7===x,S=/\S+/g;return{fieldsIncludedWithJsonPost:["authenticity_token",/^__RequestVerificationToken(_.*)?$/],arrayForEach:function(e,t){for(var n=0,i=e.length;n<i;n++)t(e[n],n)},arrayIndexOf:function(e,t){if("function"==typeof Array.prototype.indexOf)return Array.prototype.indexOf.call(e,t);for(var n=0,i=e.length;n<i;n++)if(e[n]===t)return n;return-1},arrayFirst:function(e,t,n){for(var i=0,r=e.length;i<r;i++)if(t.call(n,e[i],i))return e[i];return null},arrayRemoveItem:function(e,t){var n=g.utils.arrayIndexOf(e,t);n>0?e.splice(n,1):0===n&&e.shift()},arrayGetDistinctValues:function(e){e=e||[];for(var t=[],n=0,i=e.length;n<i;n++)g.utils.arrayIndexOf(t,e[n])<0&&t.push(e[n]);return t},arrayMap:function(e,t){e=e||[];for(var n=[],i=0,r=e.length;i<r;i++)n.push(t(e[i],i));return n},arrayFilter:function(e,t){e=e||[];for(var n=[],i=0,r=e.length;i<r;i++)t(e[i],i)&&n.push(e[i]);return n},arrayPushAll:function(e,t){if(t instanceof Array)e.push.apply(e,t);else for(var n=0,i=t.length;n<i;n++)e.push(t[n]);return e},addOrRemoveItem:function(e,t,n){var i=g.utils.arrayIndexOf(g.utils.peekObservable(e),t);i<0?n&&e.push(t):n||e.splice(i,1)},canSetPrototype:f,extend:l,setPrototypeOf:u,setPrototypeOfOrExtend:f?u:l,objectForEach:a,objectMap:function(e,t){if(!e)return e;var n={};for(var i in e)e.hasOwnProperty(i)&&(n[i]=t(e[i],i,e));return n},emptyDomNode:function(e){for(;e.firstChild;)g.removeNode(e.firstChild)},moveCleanedNodesToContainerElement:function(e){for(var t=g.utils.makeArray(e),n=t[0]&&t[0].ownerDocument||i,r=n.createElement("div"),o=0,s=t.length;o<s;o++)r.appendChild(g.cleanNode(t[o]));return r},cloneNodes:function(e,t){for(var n=0,i=e.length,r=[];n<i;n++){var o=e[n].cloneNode(!0);r.push(t?g.cleanNode(o):o)}return r},setDomNodeChildren:function(e,t){if(g.utils.emptyDomNode(e),t)for(var n=0,i=t.length;n<i;n++)e.appendChild(t[n])},replaceDomNodes:function(e,t){var n=e.nodeType?[e]:e;if(n.length>0){for(var i=n[0],r=i.parentNode,o=0,s=t.length;o<s;o++)r.insertBefore(t[o],i);for(var o=0,s=n.length;o<s;o++)g.removeNode(n[o])}},fixUpContinuousNodeArray:function(e,t){if(e.length){for(t=8===t.nodeType&&t.parentNode||t;e.length&&e[0].parentNode!==t;)e.splice(0,1);for(;e.length>1&&e[e.length-1].parentNode!==t;)e.length--;if(e.length>1){var n=e[0],i=e[e.length-1];for(e.length=0;n!==i;)e.push(n),n=n.nextSibling;e.push(i)}}return e},setOptionNodeSelectionState:function(e,t){x<7?e.setAttribute("selected",t):e.selected=t},stringTrim:function(e){return null===e||e===t?"":e.trim?e.trim():e.toString().replace(/^[\s\xa0]+|[\s\xa0]+$/g,"")},stringStartsWith:function(e,t){return e=e||"",!(t.length>e.length)&&e.substring(0,t.length)===t},domNodeIsContainedBy:function(e,t){if(e===t)return!0;if(11===e.nodeType)return!1;if(t.contains)return t.contains(3===e.nodeType?e.parentNode:e);if(t.compareDocumentPosition)return 16==(16&t.compareDocumentPosition(e));for(;e&&e!=t;)e=e.parentNode;return!!e},domNodeIsAttachedToDocument:function(e){return g.utils.domNodeIsContainedBy(e,e.ownerDocument.documentElement)},anyDomNodeIsAttachedToDocument:function(e){return!!g.utils.arrayFirst(e,g.utils.domNodeIsAttachedToDocument)},tagNameLower:function(e){return e&&e.tagName&&e.tagName.toLowerCase()},catchFunctionErrors:function(e){return g.onError?function(){try{return e.apply(this,arguments)}catch(e){throw g.onError&&g.onError(e),e}}:e},setTimeout:function(e){function t(t,n){return e.apply(this,arguments)}return t.toString=function(){return e.toString()},t}(function(e,t){return setTimeout(g.utils.catchFunctionErrors(e),t)}),deferError:function(e){setTimeout(function(){throw g.onError&&g.onError(e),e},0)},registerEventHandler:function(e,t,n){var i=g.utils.catchFunctionErrors(n),r=x&&y[t];if(g.options.useOnlyNativeEvents||r||!o)if(r||"function"!=typeof e.addEventListener){if("undefined"==typeof e.attachEvent)throw new Error("Browser doesn't support addEventListener or attachEvent");var s=function(t){i.call(e,t)},a="on"+t;e.attachEvent(a,s),g.utils.domNodeDisposal.addDisposeCallback(e,function(){e.detachEvent(a,s)})}else e.addEventListener(t,i,!1);else o(e).bind(t,i)},triggerEvent:function(e,t){if(!e||!e.nodeType)throw new Error("element must be a DOM node when calling triggerEvent");var r=d(e,t);if(g.options.useOnlyNativeEvents||!o||r)if("function"==typeof i.createEvent){if("function"!=typeof e.dispatchEvent)throw new Error("The supplied element doesn't support dispatchEvent");var s=h[t]||"HTMLEvents",a=i.createEvent(s);a.initEvent(t,!0,!0,n,0,0,0,0,0,!1,!1,!1,!1,0,e),e.dispatchEvent(a)}else if(r&&e.click)e.click();else{if("undefined"==typeof e.fireEvent)throw new Error("Browser doesn't support triggering events");e.fireEvent("on"+t)}else o(e).trigger(t)},unwrapObservable:function(e){return g.isObservable(e)?e():e},peekObservable:function(e){return g.isObservable(e)?e.peek():e},toggleDomNodeCssClass:c,setTextContent:function(e,n){var i=g.utils.unwrapObservable(n);null!==i&&i!==t||(i="");var r=g.virtualElements.firstChild(e);!r||3!=r.nodeType||g.virtualElements.nextSibling(r)?g.virtualElements.setDomNodeChildren(e,[e.ownerDocument.createTextNode(i)]):r.data=i,g.utils.forceRefresh(e)},setElementName:function(e,t){if(e.name=t,x<=7)try{e.mergeAttributes(i.createElement("<input name='"+e.name+"'/>"),!1)}catch(e){}},forceRefresh:function(e){if(x>=9){var t=1==e.nodeType?e:e.parentNode;t.style&&(t.style.zoom=t.style.zoom)}},ensureSelectElementIsRenderedCorrectly:function(e){if(x){var t=e.style.width;e.style.width=0,e.style.width=t}},range:function(e,t){e=g.utils.unwrapObservable(e),t=g.utils.unwrapObservable(t);for(var n=[],i=e;i<=t;i++)n.push(i);return n},makeArray:function(e){for(var t=[],n=0,i=e.length;n<i;n++)t.push(e[n]);return t},createSymbolOrString:function(e){return m?Symbol(e):e},isIe6:E,isIe7:w,ieVersion:x,getFormFields:function(e,t){for(var n=g.utils.makeArray(e.getElementsByTagName("input")).concat(g.utils.makeArray(e.getElementsByTagName("textarea"))),i="string"==typeof t?function(e){return e.name===t}:function(e){return t.test(e.name)},r=[],o=n.length-1;o>=0;o--)i(n[o])&&r.push(n[o]);return r},parseJson:function(e){return"string"==typeof e&&(e=g.utils.stringTrim(e))?s&&s.parse?s.parse(e):new Function("return "+e)():null},stringifyJson:function(e,t,n){if(!s||!s.stringify)throw new Error("Cannot find JSON.stringify(). Some browsers (e.g., IE < 8) don't support it natively, but you can overcome this by adding a script reference to json2.js, downloadable from http://www.json.org/json2.js");return s.stringify(g.utils.unwrapObservable(e),t,n)},postJson:function(e,t,n){n=n||{};var r=n.params||{},o=n.includeFields||this.fieldsIncludedWithJsonPost,s=e;if("object"==("undefined"==typeof e?"undefined":_typeof(e))&&"form"===g.utils.tagNameLower(e)){var l=e;s=l.action;for(var u=o.length-1;u>=0;u--)for(var d=g.utils.getFormFields(l,o[u]),c=d.length-1;c>=0;c--)r[d[c].name]=d[c].value}t=g.utils.unwrapObservable(t);var p=i.createElement("form");p.style.display="none",p.action=s,p.method="post";for(var f in t){var m=i.createElement("input");m.type="hidden",m.name=f,m.value=g.utils.stringifyJson(g.utils.unwrapObservable(t[f])),p.appendChild(m)}a(r,function(e,t){var n=i.createElement("input");n.type="hidden",n.name=e,n.value=t,p.appendChild(n)}),i.body.appendChild(p),n.submitter?n.submitter(p):p.submit(),setTimeout(function(){p.parentNode.removeChild(p)},0)}}}(),g.exportSymbol("utils",g.utils),g.exportSymbol("utils.arrayForEach",g.utils.arrayForEach),g.exportSymbol("utils.arrayFirst",g.utils.arrayFirst),g.exportSymbol("utils.arrayFilter",g.utils.arrayFilter),g.exportSymbol("utils.arrayGetDistinctValues",g.utils.arrayGetDistinctValues),g.exportSymbol("utils.arrayIndexOf",g.utils.arrayIndexOf),g.exportSymbol("utils.arrayMap",g.utils.arrayMap),g.exportSymbol("utils.arrayPushAll",g.utils.arrayPushAll),g.exportSymbol("utils.arrayRemoveItem",g.utils.arrayRemoveItem),g.exportSymbol("utils.extend",g.utils.extend),g.exportSymbol("utils.fieldsIncludedWithJsonPost",g.utils.fieldsIncludedWithJsonPost),g.exportSymbol("utils.getFormFields",g.utils.getFormFields),g.exportSymbol("utils.peekObservable",g.utils.peekObservable),g.exportSymbol("utils.postJson",g.utils.postJson),g.exportSymbol("utils.parseJson",g.utils.parseJson),g.exportSymbol("utils.registerEventHandler",g.utils.registerEventHandler),g.exportSymbol("utils.stringifyJson",g.utils.stringifyJson),g.exportSymbol("utils.range",g.utils.range),g.exportSymbol("utils.toggleDomNodeCssClass",g.utils.toggleDomNodeCssClass),g.exportSymbol("utils.triggerEvent",g.utils.triggerEvent),g.exportSymbol("utils.unwrapObservable",g.utils.unwrapObservable),g.exportSymbol("utils.objectForEach",g.utils.objectForEach),g.exportSymbol("utils.addOrRemoveItem",g.utils.addOrRemoveItem),g.exportSymbol("utils.setTextContent",g.utils.setTextContent),g.exportSymbol("unwrap",g.utils.unwrapObservable),Function.prototype.bind||(Function.prototype.bind=function(e){var t=this;if(1===arguments.length)return function(){return t.apply(e,arguments)};var n=Array.prototype.slice.call(arguments,1);return function(){var i=n.slice(0);return i.push.apply(i,arguments),t.apply(e,i)}}),g.utils.domData=new function(){function e(e,o){var s=e[i],a=s&&"null"!==s&&r[s];if(!a){if(!o)return t;s=e[i]="ko"+n++,r[s]={}}return r[s]}var n=0,i="__ko__"+(new Date).getTime(),r={};return{get:function(n,i){var r=e(n,!1);return r===t?t:r[i]},set:function(n,i,r){if(r!==t||e(n,!1)!==t){var o=e(n,!0);o[i]=r}},clear:function(e){var t=e[i];return!!t&&(delete r[t],e[i]=null,!0)},nextKey:function(){return n++ +i}}},g.exportSymbol("utils.domData",g.utils.domData),g.exportSymbol("utils.domData.clear",g.utils.domData.clear),g.utils.domNodeDisposal=new function(){function e(e,n){var i=g.utils.domData.get(e,s);return i===t&&n&&(i=[],g.utils.domData.set(e,s,i)),i}function n(e){g.utils.domData.set(e,s,t)}function i(t){var n=e(t,!1);if(n){n=n.slice(0);for(var i=0;i<n.length;i++)n[i](t)}g.utils.domData.clear(t),g.utils.domNodeDisposal.cleanExternalData(t),l[t.nodeType]&&r(t)}function r(e){for(var t,n=e.firstChild;t=n;)n=t.nextSibling,8===t.nodeType&&i(t)}var s=g.utils.domData.nextKey(),a={1:!0,8:!0,9:!0},l={1:!0,9:!0};return{addDisposeCallback:function(t,n){if("function"!=typeof n)throw new Error("Callback must be a function");e(t,!0).push(n)},removeDisposeCallback:function(t,i){var r=e(t,!1);r&&(g.utils.arrayRemoveItem(r,i),0==r.length&&n(t))},cleanNode:function(e){if(a[e.nodeType]&&(i(e),l[e.nodeType])){var t=[];g.utils.arrayPushAll(t,e.getElementsByTagName("*"));for(var n=0,r=t.length;n<r;n++)i(t[n])}return e},removeNode:function(e){g.cleanNode(e),e.parentNode&&e.parentNode.removeChild(e)},cleanExternalData:function(e){o&&"function"==typeof o.cleanData&&o.cleanData([e])}}},g.cleanNode=g.utils.domNodeDisposal.cleanNode,g.removeNode=g.utils.domNodeDisposal.removeNode,g.exportSymbol("cleanNode",g.cleanNode),g.exportSymbol("removeNode",g.removeNode),g.exportSymbol("utils.domNodeDisposal",g.utils.domNodeDisposal),g.exportSymbol("utils.domNodeDisposal.addDisposeCallback",g.utils.domNodeDisposal.addDisposeCallback),g.exportSymbol("utils.domNodeDisposal.removeDisposeCallback",g.utils.domNodeDisposal.removeDisposeCallback),function(){function e(e){var t=e.match(/^<([a-z]+)[ >]/);return t&&p[t[1]]||a}function r(t,r){r||(r=i);var o=r.parentWindow||r.defaultView||n,s=g.utils.stringTrim(t).toLowerCase(),a=r.createElement("div"),l=e(s),u=l[0],d="ignored<div>"+l[1]+t+l[2]+"</div>";for("function"==typeof o.innerShiv?a.appendChild(o.innerShiv(d)):(f&&r.appendChild(a),a.innerHTML=d,f&&a.parentNode.removeChild(a));u--;)a=a.lastChild;return g.utils.makeArray(a.lastChild.childNodes)}function s(e,t){if(o.parseHTML)return o.parseHTML(e,t)||[];var n=o.clean([e],t);if(n&&n[0]){for(var i=n[0];i.parentNode&&11!==i.parentNode.nodeType;)i=i.parentNode;i.parentNode&&i.parentNode.removeChild(i)}return n}var a=[0,"",""],l=[1,"<table>","</table>"],u=[2,"<table><tbody>","</tbody></table>"],d=[3,"<table><tbody><tr>","</tr></tbody></table>"],c=[1,"<select multiple='multiple'>","</select>"],p={thead:l,tbody:l,tfoot:l,tr:u,td:d,th:d,option:c,optgroup:c},f=g.utils.ieVersion<=8;g.utils.parseHtmlFragment=function(e,t){return o?s(e,t):r(e,t)},g.utils.setHtml=function(e,n){if(g.utils.emptyDomNode(e),n=g.utils.unwrapObservable(n),null!==n&&n!==t)if("string"!=typeof n&&(n=n.toString()),o)o(e).html(n);else for(var i=g.utils.parseHtmlFragment(n,e.ownerDocument),r=0;r<i.length;r++)e.appendChild(i[r])}}(),g.exportSymbol("utils.parseHtmlFragment",g.utils.parseHtmlFragment),g.exportSymbol("utils.setHtml",g.utils.setHtml),g.memoization=function(){function e(){return(4294967296*(1+Math.random())|0).toString(16).substring(1)}function n(){return e()+e()}function i(e,t){if(e)if(8==e.nodeType){var n=g.memoization.parseMemoText(e.nodeValue);null!=n&&t.push({domNode:e,memoId:n})}else if(1==e.nodeType)for(var r=0,o=e.childNodes,s=o.length;r<s;r++)i(o[r],t)}var r={};return{memoize:function(e){if("function"!=typeof e)throw new Error("You can only pass a function to ko.memoization.memoize()");var t=n();return r[t]=e,"<!--[ko_memo:"+t+"]-->"},unmemoize:function(e,n){var i=r[e];if(i===t)throw new Error("Couldn't find any memo with ID "+e+". Perhaps it's already been unmemoized.");try{return i.apply(null,n||[]),!0}finally{delete r[e]}},unmemoizeDomNodeAndDescendants:function(e,t){var n=[];i(e,n);for(var r=0,o=n.length;r<o;r++){var s=n[r].domNode,a=[s];t&&g.utils.arrayPushAll(a,t),g.memoization.unmemoize(n[r].memoId,a),s.nodeValue="",s.parentNode&&s.parentNode.removeChild(s)}},parseMemoText:function(e){var t=e.match(/^\[ko_memo\:(.*?)\]$/);return t?t[1]:null}}}(),g.exportSymbol("memoization",g.memoization),g.exportSymbol("memoization.memoize",g.memoization.memoize),g.exportSymbol("memoization.unmemoize",g.memoization.unmemoize),g.exportSymbol("memoization.parseMemoText",g.memoization.parseMemoText),g.exportSymbol("memoization.unmemoizeDomNodeAndDescendants",g.memoization.unmemoizeDomNodeAndDescendants),g.tasks=function(){function e(){if(a)for(var e,t=a,n=0;u<a;)if(e=s[u++]){if(u>t){if(++n>=5e3){u=a,g.utils.deferError(Error("'Too much recursion' after processing "+n+" task groups."));break}t=a}try{e()}catch(e){g.utils.deferError(e)}}}function t(){e(),u=a=s.length=0}function r(){g.tasks.scheduler(t)}var o,s=[],a=0,l=1,u=0;o=n.MutationObserver?function(e){var t=i.createElement("div");return new MutationObserver(e).observe(t,{attributes:!0}),function(){t.classList.toggle("foo")}}(t):i&&"onreadystatechange"in i.createElement("script")?function(e){var t=i.createElement("script");t.onreadystatechange=function(){t.onreadystatechange=null,i.documentElement.removeChild(t),t=null,e()},i.documentElement.appendChild(t)}:function(e){setTimeout(e,0)};var d={scheduler:o,schedule:function(e){return a||r(),s[a++]=e,l++},cancel:function(e){var t=e-(l-a);t>=u&&t<a&&(s[t]=null)},resetForTesting:function(){var e=a-u;return u=a=s.length=0,e},runEarly:e};return d}(),g.exportSymbol("tasks",g.tasks),g.exportSymbol("tasks.schedule",g.tasks.schedule),g.exportSymbol("tasks.runEarly",g.tasks.runEarly),g.extenders={throttle:function(e,t){e.throttleEvaluation=t;var n=null;return g.dependentObservable({read:e,write:function(i){clearTimeout(n),n=g.utils.setTimeout(function(){e(i)},t)}})},rateLimit:function(e,t){var n,i,r;"number"==typeof t?n=t:(n=t.timeout,i=t.method),e._deferUpdates=!1,r="notifyWhenChangesStop"==i?c:d,e.limit(function(e){return r(e,n)})},deferred:function(e,n){if(n!==!0)throw new Error("The 'deferred' extender only accepts the value 'true', because it is not supported to turn deferral off once enabled.");e._deferUpdates||(e._deferUpdates=!0,e.limit(function(n){var i;return function(){g.tasks.cancel(i),i=g.tasks.schedule(n),e.notifySubscribers(t,"dirty")}}))},notify:function(e,t){e.equalityComparer="always"==t?null:u}};var y={undefined:1,boolean:1,number:1,string:1};g.exportSymbol("extenders",g.extenders),g.subscription=function(e,t,n){this._target=e,this.callback=t,this.disposeCallback=n,this.isDisposed=!1,g.exportProperty(this,"dispose",this.dispose)},g.subscription.prototype.dispose=function(){this.isDisposed=!0,this.disposeCallback()},g.subscribable=function(){g.utils.setPrototypeOfOrExtend(this,E),E.init(this)};var x="change",E={init:function(e){e._subscriptions={},e._versionNumber=1},subscribe:function(e,t,n){var i=this;n=n||x;var r=t?e.bind(t):e,o=new g.subscription(i,r,function(){g.utils.arrayRemoveItem(i._subscriptions[n],o),i.afterSubscriptionRemove&&i.afterSubscriptionRemove(n)});return i.beforeSubscriptionAdd&&i.beforeSubscriptionAdd(n),i._subscriptions[n]||(i._subscriptions[n]=[]),i._subscriptions[n].push(o),o},notifySubscribers:function(e,t){if(t=t||x,t===x&&this.updateVersion(),this.hasSubscriptionsForEvent(t))try{g.dependencyDetection.begin();for(var n,i=this._subscriptions[t].slice(0),r=0;n=i[r];++r)n.isDisposed||n.callback(e)}finally{g.dependencyDetection.end()}},getVersion:function(){return this._versionNumber},hasChanged:function(e){return this.getVersion()!==e},updateVersion:function(){++this._versionNumber},limit:function(e){var t,n,i,r=this,o=g.isObservable(r),s="beforeChange";r._origNotifySubscribers||(r._origNotifySubscribers=r.notifySubscribers,r.notifySubscribers=f);var a=e(function(){r._notificationIsPending=!1,o&&i===r&&(i=r()),t=!1,r.isDifferent(n,i)&&r._origNotifySubscribers(n=i)});r._limitChange=function(e){r._notificationIsPending=t=!0,i=e,a()},r._limitBeforeChange=function(e){t||(n=e,r._origNotifySubscribers(e,s))}},hasSubscriptionsForEvent:function(e){return this._subscriptions[e]&&this._subscriptions[e].length},getSubscriptionsCount:function(e){if(e)return this._subscriptions[e]&&this._subscriptions[e].length||0;var t=0;return g.utils.objectForEach(this._subscriptions,function(e,n){"dirty"!==e&&(t+=n.length)}),t},isDifferent:function(e,t){return!this.equalityComparer||!this.equalityComparer(e,t)},extend:p};g.exportProperty(E,"subscribe",E.subscribe),g.exportProperty(E,"extend",E.extend),g.exportProperty(E,"getSubscriptionsCount",E.getSubscriptionsCount),g.utils.canSetPrototype&&g.utils.setPrototypeOf(E,Function.prototype),g.subscribable.fn=E,g.isSubscribable=function(e){return null!=e&&"function"==typeof e.subscribe&&"function"==typeof e.notifySubscribers},g.exportSymbol("subscribable",g.subscribable),g.exportSymbol("isSubscribable",g.isSubscribable),g.computedContext=g.dependencyDetection=function(){function e(){return++o}function t(e){r.push(i),i=e}function n(){i=r.pop()}var i,r=[],o=0;return{begin:t,end:n,registerDependency:function(t){if(i){if(!g.isSubscribable(t))throw new Error("Only subscribable things can act as dependencies");i.callback.call(i.callbackTarget,t,t._id||(t._id=e()))}},ignore:function(e,i,r){try{return t(),e.apply(i,r||[])}finally{n()}},getDependenciesCount:function(){if(i)return i.computed.getDependenciesCount()},isInitial:function(){if(i)return i.isInitial}}}(),g.exportSymbol("computedContext",g.computedContext),g.exportSymbol("computedContext.getDependenciesCount",g.computedContext.getDependenciesCount),g.exportSymbol("computedContext.isInitial",g.computedContext.isInitial),g.exportSymbol("ignoreDependencies",g.ignoreDependencies=g.dependencyDetection.ignore);var w=g.utils.createSymbolOrString("_latestValue");g.observable=function(e){function t(){return arguments.length>0?(t.isDifferent(t[w],arguments[0])&&(t.valueWillMutate(),t[w]=arguments[0],t.valueHasMutated()),this):(g.dependencyDetection.registerDependency(t),t[w])}return t[w]=e,g.utils.canSetPrototype||g.utils.extend(t,g.subscribable.fn),g.subscribable.fn.init(t),g.utils.setPrototypeOfOrExtend(t,S),g.options.deferUpdates&&g.extenders.deferred(t,!0),t};var S={equalityComparer:u,peek:function(){return this[w]},valueHasMutated:function(){this.notifySubscribers(this[w])},valueWillMutate:function(){this.notifySubscribers(this[w],"beforeChange")}};g.utils.canSetPrototype&&g.utils.setPrototypeOf(S,g.subscribable.fn);var N=g.observable.protoProperty="__ko_proto__";S[N]=g.observable,g.hasPrototype=function(e,n){return null!==e&&e!==t&&e[N]!==t&&(e[N]===n||g.hasPrototype(e[N],n))},g.isObservable=function(e){return g.hasPrototype(e,g.observable)},g.isWriteableObservable=function(e){return"function"==typeof e&&e[N]===g.observable||!("function"!=typeof e||e[N]!==g.dependentObservable||!e.hasWriteFunction)},g.exportSymbol("observable",g.observable),g.exportSymbol("isObservable",g.isObservable),g.exportSymbol("isWriteableObservable",g.isWriteableObservable),g.exportSymbol("isWritableObservable",g.isWriteableObservable),g.exportSymbol("observable.fn",S),g.exportProperty(S,"peek",S.peek),g.exportProperty(S,"valueHasMutated",S.valueHasMutated),g.exportProperty(S,"valueWillMutate",S.valueWillMutate),g.observableArray=function(e){if(e=e||[],"object"!=("undefined"==typeof e?"undefined":_typeof(e))||!("length"in e))throw new Error("The argument passed when initializing an observable array must be an array, or null, or undefined.");var t=g.observable(e);return g.utils.setPrototypeOfOrExtend(t,g.observableArray.fn),t.extend({trackArrayChanges:!0})},g.observableArray.fn={remove:function(e){for(var t=this.peek(),n=[],i="function"!=typeof e||g.isObservable(e)?function(t){return t===e}:e,r=0;r<t.length;r++){var o=t[r];i(o)&&(0===n.length&&this.valueWillMutate(),n.push(o),t.splice(r,1),r--)}return n.length&&this.valueHasMutated(),n},removeAll:function(e){if(e===t){var n=this.peek(),i=n.slice(0);return this.valueWillMutate(),n.splice(0,n.length),this.valueHasMutated(),i}return e?this.remove(function(t){return g.utils.arrayIndexOf(e,t)>=0}):[]},destroy:function(e){var t=this.peek(),n="function"!=typeof e||g.isObservable(e)?function(t){return t===e}:e;this.valueWillMutate();for(var i=t.length-1;i>=0;i--){var r=t[i];n(r)&&(t[i]._destroy=!0)}this.valueHasMutated()},destroyAll:function(e){return e===t?this.destroy(function(){return!0}):e?this.destroy(function(t){return g.utils.arrayIndexOf(e,t)>=0}):[]},indexOf:function(e){var t=this();return g.utils.arrayIndexOf(t,e)},replace:function(e,t){var n=this.indexOf(e);n>=0&&(this.valueWillMutate(),this.peek()[n]=t,this.valueHasMutated())}},g.utils.canSetPrototype&&g.utils.setPrototypeOf(g.observableArray.fn,g.observable.fn),g.utils.arrayForEach(["pop","push","reverse","shift","sort","splice","unshift"],function(e){
g.observableArray.fn[e]=function(){var t=this.peek();this.valueWillMutate(),this.cacheDiffForKnownOperation(t,e,arguments);var n=t[e].apply(t,arguments);return this.valueHasMutated(),n===t?this:n}}),g.utils.arrayForEach(["slice"],function(e){g.observableArray.fn[e]=function(){var t=this();return t[e].apply(t,arguments)}}),g.exportSymbol("observableArray",g.observableArray);var T="arrayChange";g.extenders.trackArrayChanges=function(e,t){function n(){if(!o){o=!0;var t=e.notifySubscribers;e.notifySubscribers=function(e,n){return n&&n!==x||++a,t.apply(this,arguments)};var n=[].concat(e.peek()||[]);s=null,r=e.subscribe(function(t){if(t=[].concat(t||[]),e.hasSubscriptionsForEvent(T))var r=i(n,t);n=t,s=null,a=0,r&&r.length&&e.notifySubscribers(r,T)})}}function i(t,n){return(!s||a>1)&&(s=g.utils.compareArrays(t,n,e.compareArrayOptions)),s}if(e.compareArrayOptions={},t&&"object"==("undefined"==typeof t?"undefined":_typeof(t))&&g.utils.extend(e.compareArrayOptions,t),e.compareArrayOptions.sparse=!0,!e.cacheDiffForKnownOperation){var r,o=!1,s=null,a=0,l=e.beforeSubscriptionAdd,u=e.afterSubscriptionRemove;e.beforeSubscriptionAdd=function(t){l&&l.call(e,t),t===T&&n()},e.afterSubscriptionRemove=function(t){u&&u.call(e,t),t!==T||e.hasSubscriptionsForEvent(T)||(r.dispose(),o=!1)},e.cacheDiffForKnownOperation=function(e,t,n){function i(e,t,n){return r[r.length]={status:e,value:t,index:n}}if(o&&!a){var r=[],l=e.length,u=n.length,d=0;switch(t){case"push":d=l;case"unshift":for(var c=0;c<u;c++)i("added",n[c],d+c);break;case"pop":d=l-1;case"shift":l&&i("deleted",e[d],d);break;case"splice":for(var p=Math.min(Math.max(0,n[0]<0?l+n[0]:n[0]),l),f=1===u?l:Math.min(p+(n[1]||0),l),m=p+u-2,v=Math.max(f,m),h=[],b=[],c=p,y=2;c<v;++c,++y)c<f&&b.push(i("deleted",e[c],c)),c<m&&h.push(i("added",n[y],c));g.utils.findMovesInArrayComparison(b,h);break;default:return}s=r}}}};var C=g.utils.createSymbolOrString("_state");g.computed=g.dependentObservable=function(n,i,r){function o(){if(arguments.length>0){if("function"!=typeof s)throw new Error("Cannot write a value to a ko.computed unless you specify a 'write' option. If you wish to read the current value, don't pass any parameters.");return s.apply(a.evaluatorFunctionTarget,arguments),this}return g.dependencyDetection.registerDependency(o),(a.isStale||a.isSleeping&&o.haveDependenciesChanged())&&o.evaluateImmediate(),a.latestValue}if("object"===("undefined"==typeof n?"undefined":_typeof(n))?r=n:(r=r||{},n&&(r.read=n)),"function"!=typeof r.read)throw Error("Pass a function that returns the value of the ko.computed");var s=r.write,a={latestValue:t,isStale:!0,isBeingEvaluated:!1,suppressDisposalUntilDisposeWhenReturnsFalse:!1,isDisposed:!1,pure:!1,isSleeping:!1,readFunction:r.read,evaluatorFunctionTarget:i||r.owner,disposeWhenNodeIsRemoved:r.disposeWhenNodeIsRemoved||r.disposeWhenNodeIsRemoved||null,disposeWhen:r.disposeWhen||r.disposeWhen,domNodeDisposalCallback:null,dependencyTracking:{},dependenciesCount:0,evaluationTimeoutInstance:null};return o[C]=a,o.hasWriteFunction="function"==typeof s,g.utils.canSetPrototype||g.utils.extend(o,g.subscribable.fn),g.subscribable.fn.init(o),g.utils.setPrototypeOfOrExtend(o,D),r.pure?(a.pure=!0,a.isSleeping=!0,g.utils.extend(o,k)):r.deferEvaluation&&g.utils.extend(o,O),g.options.deferUpdates&&g.extenders.deferred(o,!0),e&&(o._options=r),a.disposeWhenNodeIsRemoved&&(a.suppressDisposalUntilDisposeWhenReturnsFalse=!0,a.disposeWhenNodeIsRemoved.nodeType||(a.disposeWhenNodeIsRemoved=null)),a.isSleeping||r.deferEvaluation||o.evaluateImmediate(),a.disposeWhenNodeIsRemoved&&o.isActive()&&g.utils.domNodeDisposal.addDisposeCallback(a.disposeWhenNodeIsRemoved,a.domNodeDisposalCallback=function(){o.dispose()}),o};var D={equalityComparer:u,getDependenciesCount:function(){return this[C].dependenciesCount},addDependencyTracking:function(e,t,n){if(this[C].pure&&t===this)throw Error("A 'pure' computed must not be called recursively");this[C].dependencyTracking[e]=n,n._order=this[C].dependenciesCount++,n._version=t.getVersion()},haveDependenciesChanged:function(){var e,t,n=this[C].dependencyTracking;for(e in n)if(n.hasOwnProperty(e)&&(t=n[e],t._target.hasChanged(t._version)))return!0},markDirty:function(){this._evalDelayed&&!this[C].isBeingEvaluated&&this._evalDelayed()},isActive:function(){return this[C].isStale||this[C].dependenciesCount>0},respondToChange:function(){this._notificationIsPending||this.evaluatePossiblyAsync()},subscribeToDependency:function(e){if(e._deferUpdates&&!this[C].disposeWhenNodeIsRemoved){var t=e.subscribe(this.markDirty,this,"dirty"),n=e.subscribe(this.respondToChange,this);return{_target:e,dispose:function(){t.dispose(),n.dispose()}}}return e.subscribe(this.evaluatePossiblyAsync,this)},evaluatePossiblyAsync:function(){var e=this,t=e.throttleEvaluation;t&&t>=0?(clearTimeout(this[C].evaluationTimeoutInstance),this[C].evaluationTimeoutInstance=g.utils.setTimeout(function(){e.evaluateImmediate(!0)},t)):e._evalDelayed?e._evalDelayed():e.evaluateImmediate(!0)},evaluateImmediate:function(e){var t=this,n=t[C],i=n.disposeWhen;if(!n.isBeingEvaluated&&!n.isDisposed){if(n.disposeWhenNodeIsRemoved&&!g.utils.domNodeIsAttachedToDocument(n.disposeWhenNodeIsRemoved)||i&&i()){if(!n.suppressDisposalUntilDisposeWhenReturnsFalse)return void t.dispose()}else n.suppressDisposalUntilDisposeWhenReturnsFalse=!1;n.isBeingEvaluated=!0;try{this.evaluateImmediate_CallReadWithDependencyDetection(e)}finally{n.isBeingEvaluated=!1}n.dependenciesCount||t.dispose()}},evaluateImmediate_CallReadWithDependencyDetection:function(e){var n=this,i=n[C],r=i.pure?t:!i.dependenciesCount,o={computedObservable:n,disposalCandidates:i.dependencyTracking,disposalCount:i.dependenciesCount};g.dependencyDetection.begin({callbackTarget:o,callback:v,computed:n,isInitial:r}),i.dependencyTracking={},i.dependenciesCount=0;var s=this.evaluateImmediate_CallReadThenEndDependencyDetection(i,o);n.isDifferent(i.latestValue,s)&&(i.isSleeping||n.notifySubscribers(i.latestValue,"beforeChange"),i.latestValue=s,i.isSleeping?n.updateVersion():e&&n.notifySubscribers(i.latestValue)),r&&n.notifySubscribers(i.latestValue,"awake")},evaluateImmediate_CallReadThenEndDependencyDetection:function(e,t){try{var n=e.readFunction;return e.evaluatorFunctionTarget?n.call(e.evaluatorFunctionTarget):n()}finally{g.dependencyDetection.end(),t.disposalCount&&!e.isSleeping&&g.utils.objectForEach(t.disposalCandidates,m),e.isStale=!1}},peek:function(){var e=this[C];return(e.isStale&&!e.dependenciesCount||e.isSleeping&&this.haveDependenciesChanged())&&this.evaluateImmediate(),e.latestValue},limit:function(e){g.subscribable.fn.limit.call(this,e),this._evalDelayed=function(){this._limitBeforeChange(this[C].latestValue),this[C].isStale=!0,this._limitChange(this)}},dispose:function(){var e=this[C];!e.isSleeping&&e.dependencyTracking&&g.utils.objectForEach(e.dependencyTracking,function(e,t){t.dispose&&t.dispose()}),e.disposeWhenNodeIsRemoved&&e.domNodeDisposalCallback&&g.utils.domNodeDisposal.removeDisposeCallback(e.disposeWhenNodeIsRemoved,e.domNodeDisposalCallback),e.dependencyTracking=null,e.dependenciesCount=0,e.isDisposed=!0,e.isStale=!1,e.isSleeping=!1,e.disposeWhenNodeIsRemoved=null}},k={beforeSubscriptionAdd:function(e){var t=this,n=t[C];if(!n.isDisposed&&n.isSleeping&&"change"==e){if(n.isSleeping=!1,n.isStale||t.haveDependenciesChanged())n.dependencyTracking=null,n.dependenciesCount=0,n.isStale=!0,t.evaluateImmediate();else{var i=[];g.utils.objectForEach(n.dependencyTracking,function(e,t){i[t._order]=e}),g.utils.arrayForEach(i,function(e,i){var r=n.dependencyTracking[e],o=t.subscribeToDependency(r._target);o._order=i,o._version=r._version,n.dependencyTracking[e]=o})}n.isDisposed||t.notifySubscribers(n.latestValue,"awake")}},afterSubscriptionRemove:function(e){var n=this[C];n.isDisposed||"change"!=e||this.hasSubscriptionsForEvent("change")||(g.utils.objectForEach(n.dependencyTracking,function(e,t){t.dispose&&(n.dependencyTracking[e]={_target:t._target,_order:t._order,_version:t._version},t.dispose())}),n.isSleeping=!0,this.notifySubscribers(t,"asleep"))},getVersion:function(){var e=this[C];return e.isSleeping&&(e.isStale||this.haveDependenciesChanged())&&this.evaluateImmediate(),g.subscribable.fn.getVersion.call(this)}},O={beforeSubscriptionAdd:function(e){"change"!=e&&"beforeChange"!=e||this.peek()}};g.utils.canSetPrototype&&g.utils.setPrototypeOf(D,g.subscribable.fn);var _=g.observable.protoProperty;g.computed[_]=g.observable,D[_]=g.computed,g.isComputed=function(e){return g.hasPrototype(e,g.computed)},g.isPureComputed=function(e){return g.hasPrototype(e,g.computed)&&e[C]&&e[C].pure},g.exportSymbol("computed",g.computed),g.exportSymbol("dependentObservable",g.computed),g.exportSymbol("isComputed",g.isComputed),g.exportSymbol("isPureComputed",g.isPureComputed),g.exportSymbol("computed.fn",D),g.exportProperty(D,"peek",D.peek),g.exportProperty(D,"dispose",D.dispose),g.exportProperty(D,"isActive",D.isActive),g.exportProperty(D,"getDependenciesCount",D.getDependenciesCount),g.pureComputed=function(e,t){return"function"==typeof e?g.computed(e,t,{pure:!0}):(e=g.utils.extend({},e),e.pure=!0,g.computed(e,t))},g.exportSymbol("pureComputed",g.pureComputed),function(){function e(r,o,s){s=s||new i,r=o(r);var a=!("object"!=("undefined"==typeof r?"undefined":_typeof(r))||null===r||r===t||r instanceof RegExp||r instanceof Date||r instanceof String||r instanceof Number||r instanceof Boolean);if(!a)return r;var l=r instanceof Array?[]:{};return s.save(r,l),n(r,function(n){var i=o(r[n]);switch("undefined"==typeof i?"undefined":_typeof(i)){case"boolean":case"number":case"string":case"function":l[n]=i;break;case"object":case"undefined":var a=s.get(i);l[n]=a!==t?a:e(i,o,s)}}),l}function n(e,t){if(e instanceof Array){for(var n=0;n<e.length;n++)t(n);"function"==typeof e.toJSON&&t("toJSON")}else for(var i in e)t(i)}function i(){this.keys=[],this.values=[]}var r=10;g.toJS=function(t){if(0==arguments.length)throw new Error("When calling ko.toJS, pass the object you want to convert.");return e(t,function(e){for(var t=0;g.isObservable(e)&&t<r;t++)e=e();return e})},g.toJSON=function(e,t,n){var i=g.toJS(e);return g.utils.stringifyJson(i,t,n)},i.prototype={constructor:i,save:function(e,t){var n=g.utils.arrayIndexOf(this.keys,e);n>=0?this.values[n]=t:(this.keys.push(e),this.values.push(t))},get:function(e){var n=g.utils.arrayIndexOf(this.keys,e);return n>=0?this.values[n]:t}}}(),g.exportSymbol("toJS",g.toJS),g.exportSymbol("toJSON",g.toJSON),function(){var e="__ko__hasDomDataOptionValue__";g.selectExtensions={readValue:function(n){switch(g.utils.tagNameLower(n)){case"option":return n[e]===!0?g.utils.domData.get(n,g.bindingHandlers.options.optionValueDomDataKey):g.utils.ieVersion<=7?n.getAttributeNode("value")&&n.getAttributeNode("value").specified?n.value:n.text:n.value;case"select":return n.selectedIndex>=0?g.selectExtensions.readValue(n.options[n.selectedIndex]):t;default:return n.value}},writeValue:function(n,i,r){switch(g.utils.tagNameLower(n)){case"option":switch("undefined"==typeof i?"undefined":_typeof(i)){case"string":g.utils.domData.set(n,g.bindingHandlers.options.optionValueDomDataKey,t),e in n&&delete n[e],n.value=i;break;default:g.utils.domData.set(n,g.bindingHandlers.options.optionValueDomDataKey,i),n[e]=!0,n.value="number"==typeof i?i:""}break;case"select":""!==i&&null!==i||(i=t);for(var o,s=-1,a=0,l=n.options.length;a<l;++a)if(o=g.selectExtensions.readValue(n.options[a]),o==i||""==o&&i===t){s=a;break}(r||s>=0||i===t&&n.size>1)&&(n.selectedIndex=s);break;default:null!==i&&i!==t||(i=""),n.value=i}}}}(),g.exportSymbol("selectExtensions",g.selectExtensions),g.exportSymbol("selectExtensions.readValue",g.selectExtensions.readValue),g.exportSymbol("selectExtensions.writeValue",g.selectExtensions.writeValue),g.expressionRewriting=function(){function e(e){if(g.utils.arrayIndexOf(i,e)>=0)return!1;var t=e.match(r);return null!==t&&(t[1]?"Object("+t[1]+")"+t[2]:e)}function t(e){var t=g.utils.stringTrim(e);123===t.charCodeAt(0)&&(t=t.slice(1,-1));var n,i=[],r=t.match(c),o=[],s=0;if(r){r.push(",");for(var a,l=0;a=r[l];++l){var u=a.charCodeAt(0);if(44===u){if(s<=0){i.push(n&&o.length?{key:n,value:o.join("")}:{unknown:n||o.join("")}),n=s=0,o=[];continue}}else if(58===u){if(!s&&!n&&1===o.length){n=o.pop();continue}}else if(47===u&&l&&a.length>1){var d=r[l-1].match(p);d&&!f[d[0]]&&(t=t.substr(t.indexOf(a)+1),r=t.match(c),r.push(","),l=-1,a="/")}else 40===u||123===u||91===u?++s:41===u||125===u||93===u?--s:n||o.length||34!==u&&39!==u||(a=a.slice(1,-1));o.push(a)}}return i}function n(n,i){function r(t,n){function i(e){return!e||!e.preprocess||(n=e.preprocess(n,t,r))}var u;if(!l){if(!i(g.getBindingHandler(t)))return;m[t]&&(u=e(n))&&s.push("'"+t+"':function(_z){"+u+"=_z}")}a&&(n="function(){return "+n+" }"),o.push("'"+t+"':"+n)}i=i||{};var o=[],s=[],a=i.valueAccessors,l=i.bindingParams,u="string"==typeof n?t(n):n;return g.utils.arrayForEach(u,function(e){r(e.key||e.unknown,e.value)}),s.length&&r("_ko_property_writers","{"+s.join(",")+" }"),o.join(",")}var i=["true","false","null","undefined"],r=/^(?:[$_a-z][$\w]*|(.+)(\.\s*[$_a-z][$\w]*|\[.+\]))$/i,o='"(?:[^"\\\\]|\\\\.)*"',s="'(?:[^'\\\\]|\\\\.)*'",a="/(?:[^/\\\\]|\\\\.)*/w*",l=",\"'{}()/:[\\]",u="[^\\s:,/][^"+l+"]*[^\\s"+l+"]",d="[^\\s]",c=RegExp(o+"|"+s+"|"+a+"|"+u+"|"+d,"g"),p=/[\])"'A-Za-z0-9_$]+$/,f={in:1,return:1,typeof:1},m={};return{bindingRewriteValidators:[],twoWayBindings:m,parseObjectLiteral:t,preProcessBindings:n,keyValueArrayContainsKey:function(e,t){for(var n=0;n<e.length;n++)if(e[n].key==t)return!0;return!1},writeValueToProperty:function(e,t,n,i,r){if(e&&g.isObservable(e))!g.isWriteableObservable(e)||r&&e.peek()===i||e(i);else{var o=t.get("_ko_property_writers");o&&o[n]&&o[n](i)}}}}(),g.exportSymbol("expressionRewriting",g.expressionRewriting),g.exportSymbol("expressionRewriting.bindingRewriteValidators",g.expressionRewriting.bindingRewriteValidators),g.exportSymbol("expressionRewriting.parseObjectLiteral",g.expressionRewriting.parseObjectLiteral),g.exportSymbol("expressionRewriting.preProcessBindings",g.expressionRewriting.preProcessBindings),g.exportSymbol("expressionRewriting._twoWayBindings",g.expressionRewriting.twoWayBindings),g.exportSymbol("jsonExpressionRewriting",g.expressionRewriting),g.exportSymbol("jsonExpressionRewriting.insertPropertyAccessorsIntoJson",g.expressionRewriting.preProcessBindings),function(){function e(e){return 8==e.nodeType&&a.test(s?e.text:e.nodeValue)}function t(e){return 8==e.nodeType&&l.test(s?e.text:e.nodeValue)}function n(n,i){for(var r=n,o=1,s=[];r=r.nextSibling;){if(t(r)&&(o--,0===o))return s;s.push(r),e(r)&&o++}if(!i)throw new Error("Cannot find closing comment tag to match: "+n.nodeValue);return null}function r(e,t){var i=n(e,t);return i?i.length>0?i[i.length-1].nextSibling:e.nextSibling:null}function o(n){var i=n.firstChild,o=null;if(i)do if(o)o.push(i);else if(e(i)){var s=r(i,!0);s?i=s:o=[i]}else t(i)&&(o=[i]);while(i=i.nextSibling);return o}var s=i&&"<!--test-->"===i.createComment("test").text,a=s?/^<!--\s*ko(?:\s+([\s\S]+))?\s*-->$/:/^\s*ko(?:\s+([\s\S]+))?\s*$/,l=s?/^<!--\s*\/ko\s*-->$/:/^\s*\/ko\s*$/,u={ul:!0,ol:!0};g.virtualElements={allowedBindings:{},childNodes:function(t){return e(t)?n(t):t.childNodes},emptyNode:function(t){if(e(t))for(var n=g.virtualElements.childNodes(t),i=0,r=n.length;i<r;i++)g.removeNode(n[i]);else g.utils.emptyDomNode(t)},setDomNodeChildren:function(t,n){if(e(t)){g.virtualElements.emptyNode(t);for(var i=t.nextSibling,r=0,o=n.length;r<o;r++)i.parentNode.insertBefore(n[r],i)}else g.utils.setDomNodeChildren(t,n)},prepend:function(t,n){e(t)?t.parentNode.insertBefore(n,t.nextSibling):t.firstChild?t.insertBefore(n,t.firstChild):t.appendChild(n)},insertAfter:function(t,n,i){i?e(t)?t.parentNode.insertBefore(n,i.nextSibling):i.nextSibling?t.insertBefore(n,i.nextSibling):t.appendChild(n):g.virtualElements.prepend(t,n)},firstChild:function(n){return e(n)?!n.nextSibling||t(n.nextSibling)?null:n.nextSibling:n.firstChild},nextSibling:function(n){return e(n)&&(n=r(n)),n.nextSibling&&t(n.nextSibling)?null:n.nextSibling},hasBindingValue:e,virtualNodeBindingValue:function(e){var t=(s?e.text:e.nodeValue).match(a);return t?t[1]:null},normaliseVirtualElementDomStructure:function(e){if(u[g.utils.tagNameLower(e)]){var t=e.firstChild;if(t)do if(1===t.nodeType){var n=o(t);if(n)for(var i=t.nextSibling,r=0;r<n.length;r++)i?e.insertBefore(n[r],i):e.appendChild(n[r])}while(t=t.nextSibling)}}}}(),g.exportSymbol("virtualElements",g.virtualElements),g.exportSymbol("virtualElements.allowedBindings",g.virtualElements.allowedBindings),g.exportSymbol("virtualElements.emptyNode",g.virtualElements.emptyNode),g.exportSymbol("virtualElements.insertAfter",g.virtualElements.insertAfter),g.exportSymbol("virtualElements.prepend",g.virtualElements.prepend),g.exportSymbol("virtualElements.setDomNodeChildren",g.virtualElements.setDomNodeChildren),function(){function e(e,n,i){var r=e+(i&&i.valueAccessors||"");return n[r]||(n[r]=t(e,i))}function t(e,t){var n=g.expressionRewriting.preProcessBindings(e,t),i="with($context){with($data||{}){return{"+n+"}}}";return new Function("$context","$element",i)}var n="data-bind";g.bindingProvider=function(){this.bindingCache={}},g.utils.extend(g.bindingProvider.prototype,{nodeHasBindings:function(e){switch(e.nodeType){case 1:return null!=e.getAttribute(n)||g.components.getComponentNameForNode(e);case 8:return g.virtualElements.hasBindingValue(e);default:return!1}},getBindings:function(e,t){var n=this.getBindingsString(e,t),i=n?this.parseBindingsString(n,t,e):null;return g.components.addBindingsForCustomElement(i,e,t,!1)},getBindingAccessors:function(e,t){var n=this.getBindingsString(e,t),i=n?this.parseBindingsString(n,t,e,{valueAccessors:!0}):null;return g.components.addBindingsForCustomElement(i,e,t,!0)},getBindingsString:function(e,t){switch(e.nodeType){case 1:return e.getAttribute(n);case 8:return g.virtualElements.virtualNodeBindingValue(e);default:return null}},parseBindingsString:function(t,n,i,r){try{var o=e(t,this.bindingCache,r);return o(n,i)}catch(e){throw e.message="Unable to parse bindings.\nBindings value: "+t+"\nMessage: "+e.message,e}}}),g.bindingProvider.instance=new g.bindingProvider}(),g.exportSymbol("bindingProvider",g.bindingProvider),function(){function e(e){return function(){return e}}function i(e){return e()}function r(e){return g.utils.objectMap(g.dependencyDetection.ignore(e),function(t,n){return function(){return e()[n]}})}function s(t,n,i){return"function"==typeof t?r(t.bind(null,n,i)):g.utils.objectMap(t,e)}function a(e,t){return r(this.getBindings.bind(this,e,t))}function l(e){var t=g.virtualElements.allowedBindings[e];if(!t)throw new Error("The binding '"+e+"' cannot be used with virtual elements")}function u(e,t,n){var i,r=g.virtualElements.firstChild(t),o=g.bindingProvider.instance,s=o.preprocessNode;if(s){for(;i=r;)r=g.virtualElements.nextSibling(i),s.call(o,i);r=g.virtualElements.firstChild(t)}for(;i=r;)r=g.virtualElements.nextSibling(i),d(e,i,n)}function d(e,t,n){var i=!0,r=1===t.nodeType;r&&g.virtualElements.normaliseVirtualElementDomStructure(t);var o=r&&n||g.bindingProvider.instance.nodeHasBindings(t);o&&(i=p(t,null,e,n).shouldBindDescendants),i&&!m[g.utils.tagNameLower(t)]&&u(e,t,!r)}function c(e){var t=[],n={},i=[];return g.utils.objectForEach(e,function r(o){if(!n[o]){var s=g.getBindingHandler(o);s&&(s.after&&(i.push(o),g.utils.arrayForEach(s.after,function(t){if(e[t]){if(g.utils.arrayIndexOf(i,t)!==-1)throw Error("Cannot combine the following bindings, because they have a cyclic dependency: "+i.join(", "));r(t)}}),i.length--),t.push({key:o,handler:s})),n[o]=!0}}),t}function p(e,n,r,o){var s=g.utils.domData.get(e,v);if(!n){if(s)throw Error("You cannot apply bindings multiple times to the same element.");g.utils.domData.set(e,v,!0)}!s&&o&&g.storedBindingContextForNode(e,r);var u;if(n&&"function"!=typeof n)u=n;else{var d=g.bindingProvider.instance,p=d.getBindingAccessors||a,f=g.dependentObservable(function(){return u=n?n(r,e):p.call(d,e,r),u&&r._subscribable&&r._subscribable(),u},null,{disposeWhenNodeIsRemoved:e});u&&f.isActive()||(f=null)}var m;if(u){var h,b;!function(){var n=function(){return g.utils.objectMap(f?f():u,i)};h=f?function(e){return function(){return i(f()[e])}}:function(e){return u[e]},n.get=function(e){return u[e]&&i(h(e))},n.has=function(e){return e in u},b=c(u),g.utils.arrayForEach(b,function(i){var o=i.handler.init,s=i.handler.update,a=i.key;8===e.nodeType&&l(a);try{"function"==typeof o&&g.dependencyDetection.ignore(function(){var i=o(e,h(a),n,r.$data,r);if(i&&i.controlsDescendantBindings){if(m!==t)throw new Error("Multiple bindings ("+m+" and "+a+") are trying to control descendant bindings of the same element. You cannot use these bindings together on the same element.");m=a}}),"function"==typeof s&&g.dependentObservable(function(){s(e,h(a),n,r.$data,r)},null,{disposeWhenNodeIsRemoved:e})}catch(e){throw e.message='Unable to process binding "'+a+": "+u[a]+'"\nMessage: '+e.message,e}})}()}return{shouldBindDescendants:m===t}}function f(e){return e&&e instanceof g.bindingContext?e:new g.bindingContext(e)}g.bindingHandlers={};var m={script:!0,textarea:!0,template:!0};g.getBindingHandler=function(e){return g.bindingHandlers[e]},g.bindingContext=function(e,n,i,r){function o(){var t=u?e():e,o=g.utils.unwrapObservable(t);return n?(n._subscribable&&n._subscribable(),g.utils.extend(l,n),d&&(l._subscribable=d)):(l.$parents=[],l.$root=o,l.ko=g),l.$rawData=t,l.$data=o,i&&(l[i]=o),r&&r(l,n,o),l.$data}function s(){return a&&!g.utils.anyDomNodeIsAttachedToDocument(a)}var a,l=this,u="function"==typeof e&&!g.isObservable(e),d=g.dependentObservable(o,null,{disposeWhen:s,disposeWhenNodeIsRemoved:!0});d.isActive()&&(l._subscribable=d,d.equalityComparer=null,a=[],d._addNode=function(e){a.push(e),g.utils.domNodeDisposal.addDisposeCallback(e,function(e){g.utils.arrayRemoveItem(a,e),a.length||(d.dispose(),l._subscribable=d=t)})})},g.bindingContext.prototype.createChildContext=function(e,t,n){return new g.bindingContext(e,this,t,function(e,t){e.$parentContext=t,e.$parent=t.$data,e.$parents=(t.$parents||[]).slice(0),e.$parents.unshift(e.$parent),n&&n(e)})},g.bindingContext.prototype.extend=function(e){return new g.bindingContext(this._subscribable||this.$data,this,null,function(t,n){t.$rawData=n.$rawData,g.utils.extend(t,"function"==typeof e?e():e)})};var v=g.utils.domData.nextKey(),h=g.utils.domData.nextKey();g.storedBindingContextForNode=function(e,t){return 2!=arguments.length?g.utils.domData.get(e,h):(g.utils.domData.set(e,h,t),void(t._subscribable&&t._subscribable._addNode(e)))},g.applyBindingAccessorsToNode=function(e,t,n){return 1===e.nodeType&&g.virtualElements.normaliseVirtualElementDomStructure(e),p(e,t,f(n),!0)},g.applyBindingsToNode=function(e,t,n){var i=f(n);return g.applyBindingAccessorsToNode(e,s(t,i,e),i)},g.applyBindingsToDescendants=function(e,t){1!==t.nodeType&&8!==t.nodeType||u(f(e),t,!0)},g.applyBindings=function(e,t){if(!o&&n.jQuery&&(o=n.jQuery),t&&1!==t.nodeType&&8!==t.nodeType)throw new Error("ko.applyBindings: first parameter should be your view model; second parameter should be a DOM node");t=t||n.document.body,d(f(e),t,!0)},g.contextFor=function(e){switch(e.nodeType){case 1:case 8:var n=g.storedBindingContextForNode(e);if(n)return n;if(e.parentNode)return g.contextFor(e.parentNode)}return t},g.dataFor=function(e){var n=g.contextFor(e);return n?n.$data:t},g.exportSymbol("bindingHandlers",g.bindingHandlers),g.exportSymbol("applyBindings",g.applyBindings),g.exportSymbol("applyBindingsToDescendants",g.applyBindingsToDescendants),g.exportSymbol("applyBindingAccessorsToNode",g.applyBindingAccessorsToNode),g.exportSymbol("applyBindingsToNode",g.applyBindingsToNode),g.exportSymbol("contextFor",g.contextFor),g.exportSymbol("dataFor",g.dataFor)}(),function(e){function t(t,n){return t.hasOwnProperty(n)?t[n]:e}function n(e,n){var r,a=t(o,e);a?a.subscribe(n):(a=o[e]=new g.subscribable,a.subscribe(n),i(e,function(t,n){var i=!(!n||!n.synchronous);s[e]={definition:t,isSynchronousComponent:i},delete o[e],r||i?a.notifySubscribers(t):g.tasks.schedule(function(){a.notifySubscribers(t)})}),r=!0)}function i(e,t){r("getConfig",[e],function(n){n?r("loadComponent",[e,n],function(e){t(e,n)}):t(null,null)})}function r(t,n,i,o){o||(o=g.components.loaders.slice(0));var s=o.shift();if(s){var a=s[t];if(a){var l=!1,u=a.apply(s,n.concat(function(e){l?i(null):null!==e?i(e):r(t,n,i,o)}));if(u!==e&&(l=!0,!s.suppressLoaderExceptions))throw new Error("Component loaders must supply values by invoking the callback, not by returning values synchronously.")}else r(t,n,i,o)}else i(null)}var o={},s={};g.components={get:function(e,i){var r=t(s,e);r?r.isSynchronousComponent?g.dependencyDetection.ignore(function(){i(r.definition)}):g.tasks.schedule(function(){i(r.definition)}):n(e,i)},clearCachedDefinition:function(e){delete s[e]},_getFirstResultFromLoaders:r},g.components.loaders=[],g.exportSymbol("components",g.components),g.exportSymbol("components.get",g.components.get),g.exportSymbol("components.clearCachedDefinition",g.components.clearCachedDefinition)}(),function(e){function t(e,t,n,i){var r={},o=2,s=function(){0===--o&&i(r)},a=n.template,l=n.viewModel;a?d(t,a,function(t){g.components._getFirstResultFromLoaders("loadTemplate",[e,t],function(e){r.template=e,s()})}):s(),l?d(t,l,function(t){g.components._getFirstResultFromLoaders("loadViewModel",[e,t],function(e){r[f]=e,s()})}):s()}function r(e,t,n){if("string"==typeof t)n(g.utils.parseHtmlFragment(t));else if(t instanceof Array)n(t);else if(u(t))n(g.utils.makeArray(t.childNodes));else if(t.element){var r=t.element;if(a(r))n(s(r));else if("string"==typeof r){var o=i.getElementById(r);o?n(s(o)):e("Cannot find element with ID "+r)}else e("Unknown element type: "+r)}else e("Unknown template value: "+t)}function o(e,t,n){if("function"==typeof t)n(function(e){return new t(e)});else if("function"==typeof t[f])n(t[f]);else if("instance"in t){var i=t.instance;n(function(e,t){return i})}else"viewModel"in t?o(e,t.viewModel,n):e("Unknown viewModel value: "+t)}function s(e){switch(g.utils.tagNameLower(e)){case"script":return g.utils.parseHtmlFragment(e.text);case"textarea":return g.utils.parseHtmlFragment(e.value);case"template":if(u(e.content))return g.utils.cloneNodes(e.content.childNodes)}return g.utils.cloneNodes(e.childNodes)}function a(e){return n.HTMLElement?e instanceof HTMLElement:e&&e.tagName&&1===e.nodeType}function u(e){return n.DocumentFragment?e instanceof DocumentFragment:e&&11===e.nodeType}function d(e,t,i){"string"==typeof t.require?l||n.require?(l||n.require)([t.require],i):e("Uses require, but no AMD loader is present"):i(t)}function c(e){return function(t){throw new Error("Component '"+e+"': "+t)}}var p={};g.components.register=function(e,t){if(!t)throw new Error("Invalid configuration for "+e);if(g.components.isRegistered(e))throw new Error("Component "+e+" is already registered");p[e]=t},g.components.isRegistered=function(e){return p.hasOwnProperty(e)},g.components.unregister=function(e){delete p[e],g.components.clearCachedDefinition(e)},g.components.defaultLoader={getConfig:function(e,t){var n=p.hasOwnProperty(e)?p[e]:null;t(n)},loadComponent:function(e,n,i){var r=c(e);d(r,n,function(n){t(e,r,n,i)})},loadTemplate:function(e,t,n){r(c(e),t,n)},loadViewModel:function(e,t,n){o(c(e),t,n)}};var f="createViewModel";g.exportSymbol("components.register",g.components.register),g.exportSymbol("components.isRegistered",g.components.isRegistered),g.exportSymbol("components.unregister",g.components.unregister),g.exportSymbol("components.defaultLoader",g.components.defaultLoader),g.components.loaders.push(g.components.defaultLoader),g.components._allRegisteredComponents=p}(),function(e){function t(e,t){var i=e.getAttribute("params");if(i){var r=n.parseBindingsString(i,t,e,{valueAccessors:!0,bindingParams:!0}),o=g.utils.objectMap(r,function(t,n){return g.computed(t,null,{disposeWhenNodeIsRemoved:e})}),s=g.utils.objectMap(o,function(t,n){var i=t.peek();return t.isActive()?g.computed({read:function(){return g.utils.unwrapObservable(t())},write:g.isWriteableObservable(i)&&function(e){t()(e)},disposeWhenNodeIsRemoved:e}):i});return s.hasOwnProperty("$raw")||(s.$raw=o),s}return{$raw:{}}}g.components.getComponentNameForNode=function(e){var t=g.utils.tagNameLower(e);if(g.components.isRegistered(t)&&(t.indexOf("-")!=-1||""+e=="[object HTMLUnknownElement]"||g.utils.ieVersion<=8&&e.tagName===t))return t},g.components.addBindingsForCustomElement=function(e,n,i,r){if(1===n.nodeType){var o=g.components.getComponentNameForNode(n);if(o){if(e=e||{},e.component)throw new Error('Cannot use the "component" binding on a custom element matching a component');var s={name:o,params:t(n,i)};e.component=r?function(){return s}:s}}return e};var n=new g.bindingProvider;g.utils.ieVersion<9&&(g.components.register=function(e){return function(t){return i.createElement(t),e.apply(this,arguments)}}(g.components.register),i.createDocumentFragment=function(e){return function(){var t=e(),n=g.components._allRegisteredComponents;for(var i in n)n.hasOwnProperty(i)&&t.createElement(i);return t}}(i.createDocumentFragment))}(),function(e){function t(e,t,n){var i=t.template;if(!i)throw new Error("Component '"+e+"' has no template");var r=g.utils.cloneNodes(i);g.virtualElements.setDomNodeChildren(n,r)}function n(e,t,n,i){var r=e.createViewModel;return r?r.call(e,i,{element:t,templateNodes:n}):i}var i=0;g.bindingHandlers.component={init:function(r,o,s,a,l){var u,d,c=function(){var e=u&&u.dispose;"function"==typeof e&&e.call(u),u=null,d=null},p=g.utils.makeArray(g.virtualElements.childNodes(r));return g.utils.domNodeDisposal.addDisposeCallback(r,c),g.computed(function(){var s,a,f=g.utils.unwrapObservable(o());if("string"==typeof f?s=f:(s=g.utils.unwrapObservable(f.name),a=g.utils.unwrapObservable(f.params)),!s)throw new Error("No component name specified");var m=d=++i;g.components.get(s,function(i){if(d===m){if(c(),!i)throw new Error("Unknown component '"+s+"'");t(s,i,r);var o=n(i,r,p,a),f=l.createChildContext(o,e,function(e){e.$component=o,e.$componentTemplateNodes=p});u=o,g.applyBindingsToDescendants(f,r)}})},null,{disposeWhenNodeIsRemoved:r}),{controlsDescendantBindings:!0}}},g.virtualElements.allowedBindings.component=!0}();var A={class:"className",for:"htmlFor"};g.bindingHandlers.attr={update:function(e,n,i){var r=g.utils.unwrapObservable(n())||{};g.utils.objectForEach(r,function(n,i){i=g.utils.unwrapObservable(i);var r=i===!1||null===i||i===t;r&&e.removeAttribute(n),g.utils.ieVersion<=8&&n in A?(n=A[n],r?e.removeAttribute(n):e[n]=i):r||e.setAttribute(n,i.toString()),"name"===n&&g.utils.setElementName(e,r?"":i.toString())})}},function(){g.bindingHandlers.checked={after:["value","attr"],init:function(e,n,i){function r(){var t=e.checked,r=f?s():t;if(!g.computedContext.isInitial()&&(!l||t)){var o=g.dependencyDetection.ignore(n);if(d){var a=c?o.peek():o;p!==r?(t&&(g.utils.addOrRemoveItem(a,r,!0),g.utils.addOrRemoveItem(a,p,!1)),p=r):g.utils.addOrRemoveItem(a,r,t),c&&g.isWriteableObservable(o)&&o(a)}else g.expressionRewriting.writeValueToProperty(o,i,"checked",r,!0)}}function o(){var t=g.utils.unwrapObservable(n());d?e.checked=g.utils.arrayIndexOf(t,s())>=0:a?e.checked=t:e.checked=s()===t}var s=g.pureComputed(function(){return i.has("checkedValue")?g.utils.unwrapObservable(i.get("checkedValue")):i.has("value")?g.utils.unwrapObservable(i.get("value")):e.value}),a="checkbox"==e.type,l="radio"==e.type;if(a||l){var u=n(),d=a&&g.utils.unwrapObservable(u)instanceof Array,c=!(d&&u.push&&u.splice),p=d?s():t,f=l||d;l&&!e.name&&g.bindingHandlers.uniqueName.init(e,function(){return!0}),g.computed(r,null,{disposeWhenNodeIsRemoved:e}),g.utils.registerEventHandler(e,"click",r),g.computed(o,null,{disposeWhenNodeIsRemoved:e}),u=t}}},g.expressionRewriting.twoWayBindings.checked=!0,g.bindingHandlers.checkedValue={update:function(e,t){e.value=g.utils.unwrapObservable(t())}}}();var I="__ko__cssValue";g.bindingHandlers.css={update:function(e,t){
var n=g.utils.unwrapObservable(t());null!==n&&"object"==("undefined"==typeof n?"undefined":_typeof(n))?g.utils.objectForEach(n,function(t,n){n=g.utils.unwrapObservable(n),g.utils.toggleDomNodeCssClass(e,t,n)}):(n=g.utils.stringTrim(String(n||"")),g.utils.toggleDomNodeCssClass(e,e[I],!1),e[I]=n,g.utils.toggleDomNodeCssClass(e,n,!0))}},g.bindingHandlers.enable={update:function(e,t){var n=g.utils.unwrapObservable(t());n&&e.disabled?e.removeAttribute("disabled"):n||e.disabled||(e.disabled=!0)}},g.bindingHandlers.disable={update:function(e,t){g.bindingHandlers.enable.update(e,function(){return!g.utils.unwrapObservable(t())})}},g.bindingHandlers.event={init:function(e,t,n,i,r){var o=t()||{};g.utils.objectForEach(o,function(o){"string"==typeof o&&g.utils.registerEventHandler(e,o,function(e){var s,a=t()[o];if(a){try{var l=g.utils.makeArray(arguments);i=r.$data,l.unshift(i),s=a.apply(i,l)}finally{s!==!0&&(e.preventDefault?e.preventDefault():e.returnValue=!1)}var u=n.get(o+"Bubble")!==!1;u||(e.cancelBubble=!0,e.stopPropagation&&e.stopPropagation())}})})}},g.bindingHandlers.foreach={makeTemplateValueAccessor:function(e){return function(){var t=e(),n=g.utils.peekObservable(t);return n&&"number"!=typeof n.length?(g.utils.unwrapObservable(t),{foreach:n.data,as:n.as,includeDestroyed:n.includeDestroyed,afterAdd:n.afterAdd,beforeRemove:n.beforeRemove,afterRender:n.afterRender,beforeMove:n.beforeMove,afterMove:n.afterMove,templateEngine:g.nativeTemplateEngine.instance}):{foreach:t,templateEngine:g.nativeTemplateEngine.instance}}},init:function(e,t,n,i,r){return g.bindingHandlers.template.init(e,g.bindingHandlers.foreach.makeTemplateValueAccessor(t))},update:function(e,t,n,i,r){return g.bindingHandlers.template.update(e,g.bindingHandlers.foreach.makeTemplateValueAccessor(t),n,i,r)}},g.expressionRewriting.bindingRewriteValidators.foreach=!1,g.virtualElements.allowedBindings.foreach=!0;var R="__ko_hasfocusUpdating",B="__ko_hasfocusLastValue";g.bindingHandlers.hasfocus={init:function(e,t,n){var i=function(i){e[R]=!0;var r=e.ownerDocument;if("activeElement"in r){var o;try{o=r.activeElement}catch(e){o=r.body}i=o===e}var s=t();g.expressionRewriting.writeValueToProperty(s,n,"hasfocus",i,!0),e[B]=i,e[R]=!1},r=i.bind(null,!0),o=i.bind(null,!1);g.utils.registerEventHandler(e,"focus",r),g.utils.registerEventHandler(e,"focusin",r),g.utils.registerEventHandler(e,"blur",o),g.utils.registerEventHandler(e,"focusout",o)},update:function(e,t){var n=!!g.utils.unwrapObservable(t());e[R]||e[B]===n||(n?e.focus():e.blur(),!n&&e[B]&&e.ownerDocument.body.focus(),g.dependencyDetection.ignore(g.utils.triggerEvent,null,[e,n?"focusin":"focusout"]))}},g.expressionRewriting.twoWayBindings.hasfocus=!0,g.bindingHandlers.hasFocus=g.bindingHandlers.hasfocus,g.expressionRewriting.twoWayBindings.hasFocus=!0,g.bindingHandlers.html={init:function(){return{controlsDescendantBindings:!0}},update:function(e,t){g.utils.setHtml(e,t())}},b("if"),b("ifnot",!1,!0),b("with",!0,!1,function(e,t){return e.createChildContext(t)});var F={};g.bindingHandlers.options={init:function(e){if("select"!==g.utils.tagNameLower(e))throw new Error("options binding applies only to SELECT elements");for(;e.length>0;)e.remove(0);return{controlsDescendantBindings:!0}},update:function(e,n,i){function r(){return g.utils.arrayFilter(e.options,function(e){return e.selected})}function o(e,t,n){var i="undefined"==typeof t?"undefined":_typeof(t);return"function"==i?t(e):"string"==i?e[t]:n}function s(n,r,s){s.length&&(b=!m&&s[0].selected?[g.selectExtensions.readValue(s[0])]:[],y=!0);var a=e.ownerDocument.createElement("option");if(n===F)g.utils.setTextContent(a,i.get("optionsCaption")),g.selectExtensions.writeValue(a,t);else{var l=o(n,i.get("optionsValue"),n);g.selectExtensions.writeValue(a,g.utils.unwrapObservable(l));var u=o(n,i.get("optionsText"),l);g.utils.setTextContent(a,u)}return[a]}function a(t,n){if(y&&m)g.selectExtensions.writeValue(e,g.utils.unwrapObservable(i.get("value")),!0);else if(b.length){var r=g.utils.arrayIndexOf(b,g.selectExtensions.readValue(n[0]))>=0;g.utils.setOptionNodeSelectionState(n[0],r),y&&!r&&g.dependencyDetection.ignore(g.utils.triggerEvent,null,[e,"change"])}}var l,u,d=0==e.length,c=e.multiple,p=!d&&c?e.scrollTop:null,f=g.utils.unwrapObservable(n()),m=i.get("valueAllowUnset")&&i.has("value"),v=i.get("optionsIncludeDestroyed"),h={},b=[];m||(c?b=g.utils.arrayMap(r(),g.selectExtensions.readValue):e.selectedIndex>=0&&b.push(g.selectExtensions.readValue(e.options[e.selectedIndex]))),f&&("undefined"==typeof f.length&&(f=[f]),u=g.utils.arrayFilter(f,function(e){return v||e===t||null===e||!g.utils.unwrapObservable(e._destroy)}),i.has("optionsCaption")&&(l=g.utils.unwrapObservable(i.get("optionsCaption")),null!==l&&l!==t&&u.unshift(F)));var y=!1;h.beforeRemove=function(t){e.removeChild(t)};var x=a;i.has("optionsAfterRender")&&"function"==typeof i.get("optionsAfterRender")&&(x=function(e,n){a(e,n),g.dependencyDetection.ignore(i.get("optionsAfterRender"),null,[n[0],e!==F?e:t])}),g.utils.setDomNodeChildrenFromArrayMapping(e,u,s,h,x),g.dependencyDetection.ignore(function(){if(m)g.selectExtensions.writeValue(e,g.utils.unwrapObservable(i.get("value")),!0);else{var t;t=c?b.length&&r().length<b.length:b.length&&e.selectedIndex>=0?g.selectExtensions.readValue(e.options[e.selectedIndex])!==b[0]:b.length||e.selectedIndex>=0,t&&g.utils.triggerEvent(e,"change")}}),g.utils.ensureSelectElementIsRenderedCorrectly(e),p&&Math.abs(p-e.scrollTop)>20&&(e.scrollTop=p)}},g.bindingHandlers.options.optionValueDomDataKey=g.utils.domData.nextKey(),g.bindingHandlers.selectedOptions={after:["options","foreach"],init:function(e,t,n){g.utils.registerEventHandler(e,"change",function(){var i=t(),r=[];g.utils.arrayForEach(e.getElementsByTagName("option"),function(e){e.selected&&r.push(g.selectExtensions.readValue(e))}),g.expressionRewriting.writeValueToProperty(i,n,"selectedOptions",r)})},update:function(e,t){if("select"!=g.utils.tagNameLower(e))throw new Error("values binding applies only to SELECT elements");var n=g.utils.unwrapObservable(t()),i=e.scrollTop;n&&"number"==typeof n.length&&g.utils.arrayForEach(e.getElementsByTagName("option"),function(e){var t=g.utils.arrayIndexOf(n,g.selectExtensions.readValue(e))>=0;e.selected!=t&&g.utils.setOptionNodeSelectionState(e,t)}),e.scrollTop=i}},g.expressionRewriting.twoWayBindings.selectedOptions=!0,g.bindingHandlers.style={update:function(e,n){var i=g.utils.unwrapObservable(n()||{});g.utils.objectForEach(i,function(n,i){i=g.utils.unwrapObservable(i),null!==i&&i!==t&&i!==!1||(i=""),e.style[n]=i})}},g.bindingHandlers.submit={init:function(e,t,n,i,r){if("function"!=typeof t())throw new Error("The value for a submit binding must be a function");g.utils.registerEventHandler(e,"submit",function(n){var i,o=t();try{i=o.call(r.$data,e)}finally{i!==!0&&(n.preventDefault?n.preventDefault():n.returnValue=!1)}})}},g.bindingHandlers.text={init:function(){return{controlsDescendantBindings:!0}},update:function(e,t){g.utils.setTextContent(e,t())}},g.virtualElements.allowedBindings.text=!0,function(){if(n&&n.navigator)var i=function(e){if(e)return parseFloat(e[1])},r=n.opera&&n.opera.version&&parseInt(n.opera.version()),o=n.navigator.userAgent,s=i(o.match(/^(?:(?!chrome).)*version\/([^ ]*) safari/i)),a=i(o.match(/Firefox\/([^ ]*)/));if(g.utils.ieVersion<10)var l=g.utils.domData.nextKey(),u=g.utils.domData.nextKey(),d=function(e){var t=this.activeElement,n=t&&g.utils.domData.get(t,u);n&&n(e)},c=function(e,t){var n=e.ownerDocument;g.utils.domData.get(n,l)||(g.utils.domData.set(n,l,!0),g.utils.registerEventHandler(n,"selectionchange",d)),g.utils.domData.set(e,u,t)};g.bindingHandlers.textInput={init:function(n,i,o){var l,u,d=n.value,p=function(r){clearTimeout(l),u=l=t;var s=n.value;d!==s&&(e&&r&&(n._ko_textInputProcessedEvent=r.type),d=s,g.expressionRewriting.writeValueToProperty(i(),o,"textInput",s))},f=function(t){if(!l){u=n.value;var i=e?p.bind(n,{type:t.type}):p;l=g.utils.setTimeout(i,4)}},m=9==g.utils.ieVersion?f:p,v=function e(){var r=g.utils.unwrapObservable(i());return null!==r&&r!==t||(r=""),u!==t&&r===u?void g.utils.setTimeout(e,4):void(n.value!==r&&(d=r,n.value=r))},h=function(e,t){g.utils.registerEventHandler(n,e,t)};e&&g.bindingHandlers.textInput._forceUpdateOn?g.utils.arrayForEach(g.bindingHandlers.textInput._forceUpdateOn,function(e){"after"==e.slice(0,5)?h(e.slice(5),f):h(e,p)}):g.utils.ieVersion<10?(h("propertychange",function(e){"value"===e.propertyName&&m(e)}),8==g.utils.ieVersion&&(h("keyup",p),h("keydown",p)),g.utils.ieVersion>=8&&(c(n,m),h("dragend",f))):(h("input",p),s<5&&"textarea"===g.utils.tagNameLower(n)?(h("keydown",f),h("paste",f),h("cut",f)):r<11?h("keydown",f):a<4&&(h("DOMAutoComplete",p),h("dragdrop",p),h("drop",p))),h("change",p),g.computed(v,null,{disposeWhenNodeIsRemoved:n})}},g.expressionRewriting.twoWayBindings.textInput=!0,g.bindingHandlers.textinput={preprocess:function(e,t,n){n("textInput",e)}}}(),g.bindingHandlers.uniqueName={init:function(e,t){if(t()){var n="ko_unique_"+ ++g.bindingHandlers.uniqueName.currentIndex;g.utils.setElementName(e,n)}}},g.bindingHandlers.uniqueName.currentIndex=0,g.bindingHandlers.value={after:["options","foreach"],init:function(e,t,n){if("input"==e.tagName.toLowerCase()&&("checkbox"==e.type||"radio"==e.type))return void g.applyBindingAccessorsToNode(e,{checkedValue:t});var i=["change"],r=n.get("valueUpdate"),o=!1,s=null;r&&("string"==typeof r&&(r=[r]),g.utils.arrayPushAll(i,r),i=g.utils.arrayGetDistinctValues(i));var a=function(){s=null,o=!1;var i=t(),r=g.selectExtensions.readValue(e);g.expressionRewriting.writeValueToProperty(i,n,"value",r)},l=g.utils.ieVersion&&"input"==e.tagName.toLowerCase()&&"text"==e.type&&"off"!=e.autocomplete&&(!e.form||"off"!=e.form.autocomplete);l&&g.utils.arrayIndexOf(i,"propertychange")==-1&&(g.utils.registerEventHandler(e,"propertychange",function(){o=!0}),g.utils.registerEventHandler(e,"focus",function(){o=!1}),g.utils.registerEventHandler(e,"blur",function(){o&&a()})),g.utils.arrayForEach(i,function(t){var n=a;g.utils.stringStartsWith(t,"after")&&(n=function(){s=g.selectExtensions.readValue(e),g.utils.setTimeout(a,0)},t=t.substring("after".length)),g.utils.registerEventHandler(e,t,n)});var u=function i(){var r=g.utils.unwrapObservable(t()),o=g.selectExtensions.readValue(e);if(null!==s&&r===s)return void g.utils.setTimeout(i,0);var a=r!==o;if(a)if("select"===g.utils.tagNameLower(e)){var l=n.get("valueAllowUnset"),u=function(){g.selectExtensions.writeValue(e,r,l)};u(),l||r===g.selectExtensions.readValue(e)?g.utils.setTimeout(u,0):g.dependencyDetection.ignore(g.utils.triggerEvent,null,[e,"change"])}else g.selectExtensions.writeValue(e,r)};g.computed(u,null,{disposeWhenNodeIsRemoved:e})},update:function(){}},g.expressionRewriting.twoWayBindings.value=!0,g.bindingHandlers.visible={update:function(e,t){var n=g.utils.unwrapObservable(t()),i=!("none"==e.style.display);n&&!i?e.style.display="":!n&&i&&(e.style.display="none")}},h("click"),g.templateEngine=function(){},g.templateEngine.prototype.renderTemplateSource=function(e,t,n,i){throw new Error("Override renderTemplateSource")},g.templateEngine.prototype.createJavaScriptEvaluatorBlock=function(e){throw new Error("Override createJavaScriptEvaluatorBlock")},g.templateEngine.prototype.makeTemplateSource=function(e,t){if("string"==typeof e){t=t||i;var n=t.getElementById(e);if(!n)throw new Error("Cannot find template with ID "+e);return new g.templateSources.domElement(n)}if(1==e.nodeType||8==e.nodeType)return new g.templateSources.anonymousTemplate(e);throw new Error("Unknown template type: "+e)},g.templateEngine.prototype.renderTemplate=function(e,t,n,i){var r=this.makeTemplateSource(e,i);return this.renderTemplateSource(r,t,n,i)},g.templateEngine.prototype.isTemplateRewritten=function(e,t){return this.allowTemplateRewriting===!1||this.makeTemplateSource(e,t).data("isRewritten")},g.templateEngine.prototype.rewriteTemplate=function(e,t,n){var i=this.makeTemplateSource(e,n),r=t(i.text());i.text(r),i.data("isRewritten",!0)},g.exportSymbol("templateEngine",g.templateEngine),g.templateRewriting=function(){function e(e){for(var t=g.expressionRewriting.bindingRewriteValidators,n=0;n<e.length;n++){var i=e[n].key;if(t.hasOwnProperty(i)){var r=t[i];if("function"==typeof r){var o=r(e[n].value);if(o)throw new Error(o)}else if(!r)throw new Error("This template engine does not support the '"+i+"' binding within its templates")}}}function t(t,n,i,r){var o=g.expressionRewriting.parseObjectLiteral(t);e(o);var s=g.expressionRewriting.preProcessBindings(o,{valueAccessors:!0}),a="ko.__tr_ambtns(function($context,$element){return(function(){return{ "+s+" } })()},'"+i.toLowerCase()+"')";return r.createJavaScriptEvaluatorBlock(a)+n}var n=/(<([a-z]+\d*)(?:\s+(?!data-bind\s*=\s*)[a-z0-9\-]+(?:=(?:\"[^\"]*\"|\'[^\']*\'|[^>]*))?)*\s+)data-bind\s*=\s*(["'])([\s\S]*?)\3/gi,i=/<!--\s*ko\b\s*([\s\S]*?)\s*-->/g;return{ensureTemplateIsRewritten:function(e,t,n){t.isTemplateRewritten(e,n)||t.rewriteTemplate(e,function(e){return g.templateRewriting.memoizeBindingAttributeSyntax(e,t)},n)},memoizeBindingAttributeSyntax:function(e,r){return e.replace(n,function(){return t(arguments[4],arguments[1],arguments[2],r)}).replace(i,function(){return t(arguments[1],"<!-- ko -->","#comment",r)})},applyMemoizedBindingsToNextSibling:function(e,t){return g.memoization.memoize(function(n,i){var r=n.nextSibling;r&&r.nodeName.toLowerCase()===t&&g.applyBindingAccessorsToNode(r,e,i)})}}}(),g.exportSymbol("__tr_ambtns",g.templateRewriting.applyMemoizedBindingsToNextSibling),function(){function e(e){return g.utils.domData.get(e,l)||{}}function n(e,t){g.utils.domData.set(e,l,t)}g.templateSources={};var i=1,r=2,o=3,s=4;g.templateSources.domElement=function(e){if(this.domElement=e,e){var t=g.utils.tagNameLower(e);this.templateType="script"===t?i:"textarea"===t?r:"template"==t&&e.content&&11===e.content.nodeType?o:s}},g.templateSources.domElement.prototype.text=function(){var e=this.templateType===i?"text":this.templateType===r?"value":"innerHTML";if(0==arguments.length)return this.domElement[e];var t=arguments[0];"innerHTML"===e?g.utils.setHtml(this.domElement,t):this.domElement[e]=t};var a=g.utils.domData.nextKey()+"_";g.templateSources.domElement.prototype.data=function(e){return 1===arguments.length?g.utils.domData.get(this.domElement,a+e):void g.utils.domData.set(this.domElement,a+e,arguments[1])};var l=g.utils.domData.nextKey();g.templateSources.domElement.prototype.nodes=function(){var i=this.domElement;if(0==arguments.length){var r=e(i),a=r.containerData;return a||(this.templateType===o?i.content:this.templateType===s?i:t)}var l=arguments[0];n(i,{containerData:l})},g.templateSources.anonymousTemplate=function(e){this.domElement=e},g.templateSources.anonymousTemplate.prototype=new g.templateSources.domElement,g.templateSources.anonymousTemplate.prototype.constructor=g.templateSources.anonymousTemplate,g.templateSources.anonymousTemplate.prototype.text=function(){if(0==arguments.length){var i=e(this.domElement);return i.textData===t&&i.containerData&&(i.textData=i.containerData.innerHTML),i.textData}var r=arguments[0];n(this.domElement,{textData:r})},g.exportSymbol("templateSources",g.templateSources),g.exportSymbol("templateSources.domElement",g.templateSources.domElement),g.exportSymbol("templateSources.anonymousTemplate",g.templateSources.anonymousTemplate)}(),function(){function e(e,t,n){for(var i,r=e,o=g.virtualElements.nextSibling(t);r&&(i=r)!==o;)r=g.virtualElements.nextSibling(i),n(i,r)}function n(t,n){if(t.length){var i=t[0],r=t[t.length-1],o=i.parentNode,s=g.bindingProvider.instance,a=s.preprocessNode;if(a){if(e(i,r,function(e,t){var n=e.previousSibling,o=a.call(s,e);o&&(e===i&&(i=o[0]||t),e===r&&(r=o[o.length-1]||n))}),t.length=0,!i)return;i===r?t.push(i):(t.push(i,r),g.utils.fixUpContinuousNodeArray(t,o))}e(i,r,function(e){1!==e.nodeType&&8!==e.nodeType||g.applyBindings(n,e)}),e(i,r,function(e){1!==e.nodeType&&8!==e.nodeType||g.memoization.unmemoizeDomNodeAndDescendants(e,[n])}),g.utils.fixUpContinuousNodeArray(t,o)}}function i(e){return e.nodeType?e:e.length>0?e[0]:null}function r(e,t,r,o,s){s=s||{};var l=e&&i(e),u=(l||r||{}).ownerDocument,d=s.templateEngine||a;g.templateRewriting.ensureTemplateIsRewritten(r,d,u);var c=d.renderTemplate(r,o,s,u);if("number"!=typeof c.length||c.length>0&&"number"!=typeof c[0].nodeType)throw new Error("Template engine must return an array of DOM nodes");var p=!1;switch(t){case"replaceChildren":g.virtualElements.setDomNodeChildren(e,c),p=!0;break;case"replaceNode":g.utils.replaceDomNodes(e,c),p=!0;break;case"ignoreTargetNode":break;default:throw new Error("Unknown renderMode: "+t)}return p&&(n(c,o),s.afterRender&&g.dependencyDetection.ignore(s.afterRender,null,[c,o.$data])),c}function o(e,t,n){return g.isObservable(e)?e():"function"==typeof e?e(t,n):e}function s(e,n){var i=g.utils.domData.get(e,l);i&&"function"==typeof i.dispose&&i.dispose(),g.utils.domData.set(e,l,n&&n.isActive()?n:t)}var a;g.setTemplateEngine=function(e){if(e!=t&&!(e instanceof g.templateEngine))throw new Error("templateEngine must inherit from ko.templateEngine");a=e},g.renderTemplate=function(e,n,s,l,u){if(s=s||{},(s.templateEngine||a)==t)throw new Error("Set a template engine before calling renderTemplate");if(u=u||"replaceChildren",l){var d=i(l),c=function(){return!d||!g.utils.domNodeIsAttachedToDocument(d)},p=d&&"replaceNode"==u?d.parentNode:d;return g.dependentObservable(function(){var t=n&&n instanceof g.bindingContext?n:new g.bindingContext(g.utils.unwrapObservable(n)),a=o(e,t.$data,t),c=r(l,u,a,t,s);"replaceNode"==u&&(l=c,d=i(l))},null,{disposeWhen:c,disposeWhenNodeIsRemoved:p})}return g.memoization.memoize(function(t){g.renderTemplate(e,n,s,t,"replaceNode")})},g.renderTemplateForEach=function(e,i,s,a,l){var u,d=function(t,n){u=l.createChildContext(t,s.as,function(e){e.$index=n});var i=o(e,t,u);return r(null,"ignoreTargetNode",i,u,s)},c=function(e,t,i){n(t,u),s.afterRender&&s.afterRender(t,e),u=null};return g.dependentObservable(function(){var e=g.utils.unwrapObservable(i)||[];"undefined"==typeof e.length&&(e=[e]);var n=g.utils.arrayFilter(e,function(e){return s.includeDestroyed||e===t||null===e||!g.utils.unwrapObservable(e._destroy)});g.dependencyDetection.ignore(g.utils.setDomNodeChildrenFromArrayMapping,null,[a,n,d,s,c])},null,{disposeWhenNodeIsRemoved:a})};var l=g.utils.domData.nextKey();g.bindingHandlers.template={init:function(e,t){var n=g.utils.unwrapObservable(t());if("string"==typeof n||n.name)g.virtualElements.emptyNode(e);else if("nodes"in n){var i=n.nodes||[];if(g.isObservable(i))throw new Error('The "nodes" option must be a plain, non-observable array.');var r=g.utils.moveCleanedNodesToContainerElement(i);new g.templateSources.anonymousTemplate(e).nodes(r)}else{var o=g.virtualElements.childNodes(e),r=g.utils.moveCleanedNodesToContainerElement(o);new g.templateSources.anonymousTemplate(e).nodes(r)}return{controlsDescendantBindings:!0}},update:function(e,t,n,i,r){var o,a,l=t(),u=g.utils.unwrapObservable(l),d=!0,c=null;if("string"==typeof u?(a=l,u={}):(a=u.name,"if"in u&&(d=g.utils.unwrapObservable(u.if)),d&&"ifnot"in u&&(d=!g.utils.unwrapObservable(u.ifnot)),o=g.utils.unwrapObservable(u.data)),"foreach"in u){var p=d&&u.foreach||[];c=g.renderTemplateForEach(a||e,p,u,e,r)}else if(d){var f="data"in u?r.createChildContext(o,u.as):r;c=g.renderTemplate(a||e,f,u,e)}else g.virtualElements.emptyNode(e);s(e,c)}},g.expressionRewriting.bindingRewriteValidators.template=function(e){var t=g.expressionRewriting.parseObjectLiteral(e);return 1==t.length&&t[0].unknown?null:g.expressionRewriting.keyValueArrayContainsKey(t,"name")?null:"This template engine does not support anonymous templates nested within its templates"},g.virtualElements.allowedBindings.template=!0}(),g.exportSymbol("setTemplateEngine",g.setTemplateEngine),g.exportSymbol("renderTemplate",g.renderTemplate),g.utils.findMovesInArrayComparison=function(e,t,n){if(e.length&&t.length){var i,r,o,s,a;for(i=r=0;(!n||i<n)&&(s=e[r]);++r){for(o=0;a=t[o];++o)if(s.value===a.value){s.moved=a.index,a.moved=s.index,t.splice(o,1),i=o=0;break}i+=o}}},g.utils.compareArrays=function(){function e(e,r,o){return o="boolean"==typeof o?{dontLimitMoves:o}:o||{},e=e||[],r=r||[],e.length<r.length?t(e,r,n,i,o):t(r,e,i,n,o)}function t(e,t,n,i,r){var o,s,a,l,u,d,c=Math.min,p=Math.max,f=[],m=e.length,v=t.length,h=v-m||1,b=m+v+1;for(o=0;o<=m;o++)for(l=a,f.push(a=[]),u=c(v,o+h),d=p(0,o-1),s=d;s<=u;s++)if(s)if(o)if(e[o-1]===t[s-1])a[s]=l[s-1];else{var y=l[s]||b,x=a[s-1]||b;a[s]=c(y,x)+1}else a[s]=s+1;else a[s]=o+1;var E,w=[],S=[],N=[];for(o=m,s=v;o||s;)E=f[o][s]-1,s&&E===f[o][s-1]?S.push(w[w.length]={status:n,value:t[--s],index:s}):o&&E===f[o-1][s]?N.push(w[w.length]={status:i,value:e[--o],index:o}):(--s,--o,r.sparse||w.push({status:"retained",value:t[s]}));return g.utils.findMovesInArrayComparison(N,S,!r.dontLimitMoves&&10*m),w.reverse()}var n="added",i="deleted";return e}(),g.exportSymbol("utils.compareArrays",g.utils.compareArrays),function(){function e(e,n,i,r,o){var s=[],a=g.dependentObservable(function(){var t=n(i,o,g.utils.fixUpContinuousNodeArray(s,e))||[];s.length>0&&(g.utils.replaceDomNodes(s,t),r&&g.dependencyDetection.ignore(r,null,[i,t,o])),s.length=0,g.utils.arrayPushAll(s,t)},null,{disposeWhenNodeIsRemoved:e,disposeWhen:function(){return!g.utils.anyDomNodeIsAttachedToDocument(s)}});return{mappedNodes:s,dependentObservable:a.isActive()?a:t}}var n=g.utils.domData.nextKey(),i=g.utils.domData.nextKey();g.utils.setDomNodeChildrenFromArrayMapping=function(r,o,s,a,l){function u(e,t){c=v[t],E!==t&&(T[e]=c),c.indexObservable(E++),g.utils.fixUpContinuousNodeArray(c.mappedNodes,r),y.push(c),S.push(c)}function d(e,t){if(e)for(var n=0,i=t.length;n<i;n++)t[n]&&g.utils.arrayForEach(t[n].mappedNodes,function(i){e(i,n,t[n].arrayEntry)})}o=o||[],a=a||{};for(var c,p,f,m=g.utils.domData.get(r,n)===t,v=g.utils.domData.get(r,n)||[],h=g.utils.arrayMap(v,function(e){return e.arrayEntry}),b=g.utils.compareArrays(h,o,a.dontLimitMoves),y=[],x=0,E=0,w=[],S=[],N=[],T=[],C=[],D=0;p=b[D];D++)switch(f=p.moved,p.status){case"deleted":f===t&&(c=v[x],c.dependentObservable&&(c.dependentObservable.dispose(),c.dependentObservable=t),g.utils.fixUpContinuousNodeArray(c.mappedNodes,r).length&&(a.beforeRemove&&(y.push(c),S.push(c),c.arrayEntry===i?c=null:N[D]=c),c&&w.push.apply(w,c.mappedNodes))),x++;break;case"retained":u(D,x++);break;case"added":f!==t?u(D,f):(c={arrayEntry:p.value,indexObservable:g.observable(E++)},y.push(c),S.push(c),m||(C[D]=c))}g.utils.domData.set(r,n,y),d(a.beforeMove,T),g.utils.arrayForEach(w,a.beforeRemove?g.cleanNode:g.removeNode);for(var k,O,D=0,_=g.virtualElements.firstChild(r);c=S[D];D++){c.mappedNodes||g.utils.extend(c,e(r,s,c.arrayEntry,l,c.indexObservable));for(var A=0;O=c.mappedNodes[A];_=O.nextSibling,k=O,A++)O!==_&&g.virtualElements.insertAfter(r,O,k);!c.initialized&&l&&(l(c.arrayEntry,c.mappedNodes,c.indexObservable),c.initialized=!0)}for(d(a.beforeRemove,N),D=0;D<N.length;++D)N[D]&&(N[D].arrayEntry=i);d(a.afterMove,T),d(a.afterAdd,C)}}(),g.exportSymbol("utils.setDomNodeChildrenFromArrayMapping",g.utils.setDomNodeChildrenFromArrayMapping),g.nativeTemplateEngine=function(){this.allowTemplateRewriting=!1},g.nativeTemplateEngine.prototype=new g.templateEngine,g.nativeTemplateEngine.prototype.constructor=g.nativeTemplateEngine,g.nativeTemplateEngine.prototype.renderTemplateSource=function(e,t,n,i){var r=!(g.utils.ieVersion<9),o=r?e.nodes:null,s=o?e.nodes():null;if(s)return g.utils.makeArray(s.cloneNode(!0).childNodes);var a=e.text();return g.utils.parseHtmlFragment(a,i)},g.nativeTemplateEngine.instance=new g.nativeTemplateEngine,g.setTemplateEngine(g.nativeTemplateEngine.instance),g.exportSymbol("nativeTemplateEngine",g.nativeTemplateEngine),function(){g.jqueryTmplTemplateEngine=function(){function e(){if(n<2)throw new Error("Your version of jQuery.tmpl is too old. Please upgrade to jQuery.tmpl 1.0.0pre or later.")}function t(e,t,n){return o.tmpl(e,t,n)}var n=this.jQueryTmplVersion=function(){if(!o||!o.tmpl)return 0;try{if(o.tmpl.tag.tmpl.open.toString().indexOf("__")>=0)return 2}catch(e){}return 1}();this.renderTemplateSource=function(n,r,s,a){a=a||i,s=s||{},e();var l=n.data("precompiled");if(!l){var u=n.text()||"";u="{{ko_with $item.koBindingContext}}"+u+"{{/ko_with}}",l=o.template(null,u),n.data("precompiled",l)}var d=[r.$data],c=o.extend({koBindingContext:r},s.templateOptions),p=t(l,d,c);return p.appendTo(a.createElement("div")),o.fragments={},p},this.createJavaScriptEvaluatorBlock=function(e){return"{{ko_code ((function() { return "+e+" })()) }}"},this.addTemplate=function(e,t){i.write("<script type='text/html' id='"+e+"'>"+t+"</script>")},n>0&&(o.tmpl.tag.ko_code={open:"__.push($1 || '');"},o.tmpl.tag.ko_with={open:"with($1) {",close:"} "})},g.jqueryTmplTemplateEngine.prototype=new g.templateEngine,g.jqueryTmplTemplateEngine.prototype.constructor=g.jqueryTmplTemplateEngine;var e=new g.jqueryTmplTemplateEngine;e.jQueryTmplVersion>0&&g.setTemplateEngine(e),g.exportSymbol("jqueryTmplTemplateEngine",g.jqueryTmplTemplateEngine)}()})}()}();
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImFwcC5qcyIsImtub2Nrb3V0LmpzIl0sIm5hbWVzIjpbImluaXRpYWxpemVBcHBsaWNhdGlvbiIsImJvdW5kcyIsIm9zbG8iLCJsYXQiLCJsbmciLCJpbmZvV2luZG93IiwiZ29vZ2xlIiwibWFwcyIsIkluZm9XaW5kb3ciLCJmb3Vyc3F1YXJlIiwidmVudWVzIiwiZXhwbG9yZSIsInNlYXJjaCIsImNyZWRlbnRpYWxzIiwidmVyc2lvbiIsImdldFBvcHVsYXJTcG90cyIsImNlbnRlciIsImNhbGxiYWNrIiwiY29vcmRpbmF0ZXMiLCJxdWVyeSIsInJlcXVlc3QiLCJYTUxIdHRwUmVxdWVzdCIsIm9wZW4iLCJvbnJlYWR5c3RhdGVjaGFuZ2UiLCJyZWFkeVN0YXRlIiwic3RhdHVzIiwiYW5zd2VyIiwiSlNPTiIsInBhcnNlIiwicmVzcG9uc2VUZXh0IiwiaXRlbXMiLCJyZXNwb25zZSIsImdyb3VwcyIsInNlbmQiLCJnZXRWZW51ZURldGFpbHMiLCJ2ZW51ZUlkIiwidmVudWUiLCJjb25zdHJ1Y3RQaG90b3NBcnJheSIsInBob3RvVXJscyIsInBob3RvcyIsIm1hcCIsIml0ZW0iLCJwcmVmaXgiLCJzdWZmaXgiLCJoZXlOZXdQbGFjZSIsInBsYWNlIiwiTGF0TG5nQm91bmRzIiwiaW5kZXgiLCJmb3JFYWNoIiwiaWQiLCJyZXNwb25zZU9iamVjdCIsInBvc2l0aW9uIiwibG9jYXRpb24iLCJtYXJrZXIiLCJNYXJrZXIiLCJ0aXRsZSIsIm5hbWUiLCJhZGRMaXN0ZW5lciIsInNob3dJbmZvIiwiY29uc29sZSIsImxvZyIsImNpdHlFeHBsb3JlciIsImFkZFZlbnVlIiwiZXh0ZW5kIiwiTGF0TG5nIiwiZml0Qm91bmRzIiwiaW5mb3dpbmRvdyIsImNvbnRlbnQiLCJzZXRDb250ZW50Iiwia28iLCJhcHBseUJpbmRpbmdzIiwiZG9jdW1lbnQiLCJnZXRFbGVtZW50QnlJZCIsIk1hcCIsInpvb20iLCJmdWxsc2NyZWVuQ29udHJvbCIsImlucHV0Iiwic2VhcmNoQm94IiwicGxhY2VzIiwiU2VhcmNoQm94Iiwic2V0Qm91bmRzIiwiZ2V0Qm91bmRzIiwiZ2V0UGxhY2VzIiwibGVuZ3RoIiwiZGlzdGFuY2UiLCJnZW9tZXRyeSIsInNwaGVyaWNhbCIsImNvbXB1dGVEaXN0YW5jZUJldHdlZW4iLCJnZXRDZW50ZXIiLCJuZXdDZW50ZXIiLCJzdHJpbmdpZnkiLCJuZXdDaXR5IiwicmVtb3ZlQWxsVmVudWVzIiwiVmlld01vZGVsIiwidGhpcyIsInZlbnVlTGlzdCIsIm9ic2VydmFibGVBcnJheSIsImJpbmQiLCJjYWxsU2hvd0luZm8iLCJwcm90b3R5cGUiLCJwdXNoIiwic2V0TWFwIiwicmVtb3ZlQWxsIiwibmF2IiwiaGlkZVNpZGVOYXYiLCJTaWRlTmF2IiwiX2NsYXNzQ2FsbENoZWNrIiwic2hvd0J1dHRvbkVsIiwicXVlcnlTZWxlY3RvciIsImhpZGVCdXR0b25FbCIsInNpZGVOYXZFbCIsInNpZGVOYXZDb250YWluZXJFbCIsInNob3dTaWRlTmF2IiwiYmxvY2tDbGlja3MiLCJvblRvdWNoU3RhcnQiLCJvblRvdWNoTW92ZSIsIm9uVG91Y2hFbmQiLCJvblRyYW5zaXRpb25FbmQiLCJ1cGRhdGUiLCJzdGFydFgiLCJjdXJyZW50WCIsInRvdWNoaW5nU2lkZU5hdiIsImFkZEV2ZW50TGlzdGVuZXJzIiwiYWRkRXZlbnRMaXN0ZW5lciIsImV2dCIsImNsYXNzTGlzdCIsImNvbnRhaW5zIiwidG91Y2hlcyIsInBhZ2VYIiwicmVxdWVzdEFuaW1hdGlvbkZyYW1lIiwidHJhbnNsYXRlWCIsIk1hdGgiLCJtaW4iLCJwcmV2ZW50RGVmYXVsdCIsInN0eWxlIiwidHJhbnNmb3JtIiwic3RvcFByb3BhZ2F0aW9uIiwicmVtb3ZlIiwicmVtb3ZlRXZlbnRMaXN0ZW5lciIsImFkZCIsIkRFQlVHIiwidW5kZWZpbmVkIiwid2luZG93IiwiZXZhbCIsIm5hdmlnYXRvciIsImpRdWVyeUluc3RhbmNlIiwiZmFjdG9yeSIsImRlZmluZSIsImV4cG9ydHMiLCJfdHlwZW9mIiwibW9kdWxlIiwia29FeHBvcnRzIiwiYW1kUmVxdWlyZSIsInZhbHVlc0FyZVByaW1pdGl2ZUFuZEVxdWFsIiwiYSIsImIiLCJvbGRWYWx1ZUlzUHJpbWl0aXZlIiwicHJpbWl0aXZlVHlwZXMiLCJ0aHJvdHRsZSIsInRpbWVvdXQiLCJ0aW1lb3V0SW5zdGFuY2UiLCJ1dGlscyIsInNldFRpbWVvdXQiLCJkZWJvdW5jZSIsImNsZWFyVGltZW91dCIsImFwcGx5RXh0ZW5kZXJzIiwicmVxdWVzdGVkRXh0ZW5kZXJzIiwidGFyZ2V0Iiwib2JqZWN0Rm9yRWFjaCIsImtleSIsInZhbHVlIiwiZXh0ZW5kZXJIYW5kbGVyIiwiZXh0ZW5kZXJzIiwibGltaXROb3RpZnlTdWJzY3JpYmVycyIsImV2ZW50IiwiZGVmYXVsdEV2ZW50IiwiX2xpbWl0QmVmb3JlQ2hhbmdlIiwiX29yaWdOb3RpZnlTdWJzY3JpYmVycyIsIl9saW1pdENoYW5nZSIsImNvbXB1dGVkRGlzcG9zZURlcGVuZGVuY3lDYWxsYmFjayIsImVudHJ5VG9EaXNwb3NlIiwiZGlzcG9zZSIsImNvbXB1dGVkQmVnaW5EZXBlbmRlbmN5RGV0ZWN0aW9uQ2FsbGJhY2siLCJzdWJzY3JpYmFibGUiLCJjb21wdXRlZE9ic2VydmFibGUiLCJzdGF0ZSIsImNvbXB1dGVkU3RhdGUiLCJpc0Rpc3Bvc2VkIiwiZGlzcG9zYWxDb3VudCIsImRpc3Bvc2FsQ2FuZGlkYXRlcyIsImFkZERlcGVuZGVuY3lUcmFja2luZyIsImRlcGVuZGVuY3lUcmFja2luZyIsImlzU2xlZXBpbmciLCJfdGFyZ2V0Iiwic3Vic2NyaWJlVG9EZXBlbmRlbmN5IiwibWFrZUV2ZW50SGFuZGxlclNob3J0Y3V0IiwiZXZlbnROYW1lIiwiYmluZGluZ0hhbmRsZXJzIiwiaW5pdCIsImVsZW1lbnQiLCJ2YWx1ZUFjY2Vzc29yIiwiYWxsQmluZGluZ3MiLCJ2aWV3TW9kZWwiLCJiaW5kaW5nQ29udGV4dCIsIm5ld1ZhbHVlQWNjZXNzb3IiLCJyZXN1bHQiLCJjYWxsIiwibWFrZVdpdGhJZkJpbmRpbmciLCJiaW5kaW5nS2V5IiwiaXNXaXRoIiwiaXNOb3QiLCJtYWtlQ29udGV4dENhbGxiYWNrIiwiZGlkRGlzcGxheU9uTGFzdFVwZGF0ZSIsInNhdmVkTm9kZXMiLCJjb21wdXRlZCIsImRhdGFWYWx1ZSIsInVud3JhcE9ic2VydmFibGUiLCJzaG91bGREaXNwbGF5IiwiaXNGaXJzdFJlbmRlciIsIm5lZWRzUmVmcmVzaCIsImNvbXB1dGVkQ29udGV4dCIsImdldERlcGVuZGVuY2llc0NvdW50IiwiY2xvbmVOb2RlcyIsInZpcnR1YWxFbGVtZW50cyIsImNoaWxkTm9kZXMiLCJzZXREb21Ob2RlQ2hpbGRyZW4iLCJhcHBseUJpbmRpbmdzVG9EZXNjZW5kYW50cyIsImVtcHR5Tm9kZSIsImRpc3Bvc2VXaGVuTm9kZUlzUmVtb3ZlZCIsImNvbnRyb2xzRGVzY2VuZGFudEJpbmRpbmdzIiwiZXhwcmVzc2lvblJld3JpdGluZyIsImJpbmRpbmdSZXdyaXRlVmFsaWRhdG9ycyIsImFsbG93ZWRCaW5kaW5ncyIsImV4cG9ydFN5bWJvbCIsImtvUGF0aCIsIm9iamVjdCIsInRva2VucyIsInNwbGl0IiwiaSIsImV4cG9ydFByb3BlcnR5Iiwib3duZXIiLCJwdWJsaWNOYW1lIiwib3B0aW9ucyIsImRlZmVyVXBkYXRlcyIsInVzZU9ubHlOYXRpdmVFdmVudHMiLCJvYmoiLCJhY3Rpb24iLCJwcm9wIiwiaGFzT3duUHJvcGVydHkiLCJzb3VyY2UiLCJzZXRQcm90b3R5cGVPZiIsInByb3RvIiwiX19wcm90b19fIiwiaXNDbGlja09uQ2hlY2thYmxlRWxlbWVudCIsImV2ZW50VHlwZSIsInRhZ05hbWVMb3dlciIsInR5cGUiLCJ0b0xvd2VyQ2FzZSIsImlucHV0VHlwZSIsInRvZ2dsZURvbU5vZGVDc3NDbGFzcyIsIm5vZGUiLCJjbGFzc05hbWVzIiwic2hvdWxkSGF2ZUNsYXNzIiwiYWRkT3JSZW1vdmVGbiIsImFycmF5Rm9yRWFjaCIsIm1hdGNoIiwiY3NzQ2xhc3NOYW1lUmVnZXgiLCJjbGFzc05hbWUiLCJ0b2dnbGVPYmplY3RDbGFzc1Byb3BlcnR5U3RyaW5nIiwiY3VycmVudENsYXNzTmFtZXMiLCJhZGRPclJlbW92ZUl0ZW0iLCJqb2luIiwiY2FuU2V0UHJvdG90eXBlIiwiQXJyYXkiLCJjYW5Vc2VTeW1ib2xzIiwiU3ltYm9sIiwia25vd25FdmVudHMiLCJrbm93bkV2ZW50VHlwZXNCeUV2ZW50TmFtZSIsImtleUV2ZW50VHlwZU5hbWUiLCJ0ZXN0IiwidXNlckFnZW50Iiwia25vd25FdmVudHNGb3JUeXBlIiwiaiIsImV2ZW50c1RoYXRNdXN0QmVSZWdpc3RlcmVkVXNpbmdBdHRhY2hFdmVudCIsInByb3BlcnR5Y2hhbmdlIiwiaWVWZXJzaW9uIiwiZGl2IiwiY3JlYXRlRWxlbWVudCIsImlFbGVtcyIsImdldEVsZW1lbnRzQnlUYWdOYW1lIiwiaW5uZXJIVE1MIiwiaXNJZTYiLCJpc0llNyIsImZpZWxkc0luY2x1ZGVkV2l0aEpzb25Qb3N0IiwiYXJyYXkiLCJhcnJheUluZGV4T2YiLCJpbmRleE9mIiwiYXJyYXlGaXJzdCIsInByZWRpY2F0ZSIsInByZWRpY2F0ZU93bmVyIiwiYXJyYXlSZW1vdmVJdGVtIiwiaXRlbVRvUmVtb3ZlIiwic3BsaWNlIiwic2hpZnQiLCJhcnJheUdldERpc3RpbmN0VmFsdWVzIiwiYXJyYXlNYXAiLCJtYXBwaW5nIiwiYXJyYXlGaWx0ZXIiLCJhcnJheVB1c2hBbGwiLCJ2YWx1ZXNUb1B1c2giLCJhcHBseSIsImluY2x1ZGVkIiwiZXhpc3RpbmdFbnRyeUluZGV4IiwicGVla09ic2VydmFibGUiLCJzZXRQcm90b3R5cGVPZk9yRXh0ZW5kIiwib2JqZWN0TWFwIiwiZW1wdHlEb21Ob2RlIiwiZG9tTm9kZSIsImZpcnN0Q2hpbGQiLCJyZW1vdmVOb2RlIiwibW92ZUNsZWFuZWROb2Rlc1RvQ29udGFpbmVyRWxlbWVudCIsIm5vZGVzIiwibm9kZXNBcnJheSIsIm1ha2VBcnJheSIsInRlbXBsYXRlRG9jdW1lbnQiLCJvd25lckRvY3VtZW50IiwiY29udGFpbmVyIiwiYXBwZW5kQ2hpbGQiLCJjbGVhbk5vZGUiLCJzaG91bGRDbGVhbk5vZGVzIiwibmV3Tm9kZXNBcnJheSIsImNsb25lZE5vZGUiLCJjbG9uZU5vZGUiLCJyZXBsYWNlRG9tTm9kZXMiLCJub2RlVG9SZXBsYWNlT3JOb2RlQXJyYXkiLCJub2Rlc1RvUmVwbGFjZUFycmF5Iiwibm9kZVR5cGUiLCJpbnNlcnRpb25Qb2ludCIsInBhcmVudCIsInBhcmVudE5vZGUiLCJpbnNlcnRCZWZvcmUiLCJmaXhVcENvbnRpbnVvdXNOb2RlQXJyYXkiLCJjb250aW51b3VzTm9kZUFycmF5IiwiY3VycmVudCIsImxhc3QiLCJuZXh0U2libGluZyIsInNldE9wdGlvbk5vZGVTZWxlY3Rpb25TdGF0ZSIsIm9wdGlvbk5vZGUiLCJpc1NlbGVjdGVkIiwic2V0QXR0cmlidXRlIiwic2VsZWN0ZWQiLCJzdHJpbmdUcmltIiwic3RyaW5nIiwidHJpbSIsInRvU3RyaW5nIiwicmVwbGFjZSIsInN0cmluZ1N0YXJ0c1dpdGgiLCJzdGFydHNXaXRoIiwic3Vic3RyaW5nIiwiZG9tTm9kZUlzQ29udGFpbmVkQnkiLCJjb250YWluZWRCeU5vZGUiLCJjb21wYXJlRG9jdW1lbnRQb3NpdGlvbiIsImRvbU5vZGVJc0F0dGFjaGVkVG9Eb2N1bWVudCIsImRvY3VtZW50RWxlbWVudCIsImFueURvbU5vZGVJc0F0dGFjaGVkVG9Eb2N1bWVudCIsInRhZ05hbWUiLCJjYXRjaEZ1bmN0aW9uRXJyb3JzIiwiZGVsZWdhdGUiLCJhcmd1bWVudHMiLCJlIiwiaGFuZGxlciIsImRlZmVyRXJyb3IiLCJlcnJvciIsInJlZ2lzdGVyRXZlbnRIYW5kbGVyIiwid3JhcHBlZEhhbmRsZXIiLCJtdXN0VXNlQXR0YWNoRXZlbnQiLCJhdHRhY2hFdmVudCIsIkVycm9yIiwiYXR0YWNoRXZlbnRIYW5kbGVyIiwiYXR0YWNoRXZlbnROYW1lIiwiZG9tTm9kZURpc3Bvc2FsIiwiYWRkRGlzcG9zZUNhbGxiYWNrIiwiZGV0YWNoRXZlbnQiLCJ0cmlnZ2VyRXZlbnQiLCJ1c2VDbGlja1dvcmthcm91bmQiLCJjcmVhdGVFdmVudCIsImRpc3BhdGNoRXZlbnQiLCJldmVudENhdGVnb3J5IiwiaW5pdEV2ZW50IiwiY2xpY2siLCJmaXJlRXZlbnQiLCJpc09ic2VydmFibGUiLCJwZWVrIiwic2V0VGV4dENvbnRlbnQiLCJ0ZXh0Q29udGVudCIsImlubmVyVGV4dE5vZGUiLCJjcmVhdGVUZXh0Tm9kZSIsImRhdGEiLCJmb3JjZVJlZnJlc2giLCJzZXRFbGVtZW50TmFtZSIsIm1lcmdlQXR0cmlidXRlcyIsImVsZW0iLCJlbnN1cmVTZWxlY3RFbGVtZW50SXNSZW5kZXJlZENvcnJlY3RseSIsInNlbGVjdEVsZW1lbnQiLCJvcmlnaW5hbFdpZHRoIiwid2lkdGgiLCJyYW5nZSIsIm1heCIsImFycmF5TGlrZU9iamVjdCIsImNyZWF0ZVN5bWJvbE9yU3RyaW5nIiwiaWRlbnRpZmllciIsImdldEZvcm1GaWVsZHMiLCJmb3JtIiwiZmllbGROYW1lIiwiZmllbGRzIiwiY29uY2F0IiwiaXNNYXRjaGluZ0ZpZWxkIiwiZmllbGQiLCJtYXRjaGVzIiwicGFyc2VKc29uIiwianNvblN0cmluZyIsIkZ1bmN0aW9uIiwic3RyaW5naWZ5SnNvbiIsInJlcGxhY2VyIiwic3BhY2UiLCJwb3N0SnNvbiIsInVybE9yRm9ybSIsInBhcmFtcyIsImluY2x1ZGVGaWVsZHMiLCJ1cmwiLCJvcmlnaW5hbEZvcm0iLCJkaXNwbGF5IiwibWV0aG9kIiwiYm9keSIsInN1Ym1pdCIsInJlbW92ZUNoaWxkIiwib3JpZ2luYWxGdW5jdGlvbiIsInBhcnRpYWxBcmdzIiwic2xpY2UiLCJhcmdzIiwiZG9tRGF0YSIsImdldEFsbCIsImNyZWF0ZUlmTm90Rm91bmQiLCJkYXRhU3RvcmVLZXkiLCJkYXRhU3RvcmVLZXlFeHBhbmRvUHJvcGVydHlOYW1lIiwiaGFzRXhpc3RpbmdEYXRhU3RvcmUiLCJkYXRhU3RvcmUiLCJ1bmlxdWVJZCIsIkRhdGUiLCJnZXRUaW1lIiwiZ2V0IiwiYWxsRGF0YUZvck5vZGUiLCJzZXQiLCJjbGVhciIsIm5leHRLZXkiLCJnZXREaXNwb3NlQ2FsbGJhY2tzQ29sbGVjdGlvbiIsImFsbERpc3Bvc2VDYWxsYmFja3MiLCJkb21EYXRhS2V5IiwiZGVzdHJveUNhbGxiYWNrc0NvbGxlY3Rpb24iLCJjbGVhblNpbmdsZU5vZGUiLCJjYWxsYmFja3MiLCJjbGVhbmFibGVOb2RlVHlwZXNXaXRoRGVzY2VuZGFudHMiLCJjbGVhbkltbWVkaWF0ZUNvbW1lbnRUeXBlQ2hpbGRyZW4iLCJub2RlV2l0aENoaWxkcmVuIiwiY2hpbGQiLCJuZXh0Q2hpbGQiLCJjbGVhbmFibGVOb2RlVHlwZXMiLCIxIiwiOCIsIjkiLCJyZW1vdmVEaXNwb3NlQ2FsbGJhY2siLCJjYWxsYmFja3NDb2xsZWN0aW9uIiwiZGVzY2VuZGFudHMiLCJjbGVhbkV4dGVybmFsRGF0YSIsImdldFdyYXAiLCJ0YWdzIiwibSIsImxvb2t1cCIsIm5vbmUiLCJzaW1wbGVIdG1sUGFyc2UiLCJodG1sIiwiZG9jdW1lbnRDb250ZXh0Iiwid2luZG93Q29udGV4dCIsIndyYXAiLCJkZXB0aCIsIm1hcmt1cCIsIm1heVJlcXVpcmVDcmVhdGVFbGVtZW50SGFjayIsImxhc3RDaGlsZCIsImpRdWVyeUh0bWxQYXJzZSIsImVsZW1zIiwidGFibGUiLCJ0Ym9keSIsInRyIiwic2VsZWN0IiwidGhlYWQiLCJ0Zm9vdCIsInRkIiwidGgiLCJvcHRpb24iLCJvcHRncm91cCIsInBhcnNlSHRtbEZyYWdtZW50Iiwic2V0SHRtbCIsInBhcnNlZE5vZGVzIiwibWVtb2l6YXRpb24iLCJyYW5kb21NYXg4SGV4Q2hhcnMiLCJyYW5kb20iLCJnZW5lcmF0ZVJhbmRvbUlkIiwiZmluZE1lbW9Ob2RlcyIsInJvb3ROb2RlIiwiYXBwZW5kVG9BcnJheSIsIm1lbW9JZCIsInBhcnNlTWVtb1RleHQiLCJub2RlVmFsdWUiLCJtZW1vcyIsIm1lbW9pemUiLCJ1bm1lbW9pemUiLCJjYWxsYmFja1BhcmFtcyIsInVubWVtb2l6ZURvbU5vZGVBbmREZXNjZW5kYW50cyIsImV4dHJhQ2FsbGJhY2tQYXJhbXNBcnJheSIsImNvbWJpbmVkUGFyYW1zIiwibWVtb1RleHQiLCJ0YXNrcyIsInByb2Nlc3NUYXNrcyIsInRhc2tRdWV1ZUxlbmd0aCIsInRhc2siLCJtYXJrIiwiY291bnRNYXJrcyIsIm5leHRJbmRleFRvUHJvY2VzcyIsInRhc2tRdWV1ZSIsImV4Iiwic2NoZWR1bGVkUHJvY2VzcyIsInNjaGVkdWxlVGFza1Byb2Nlc3NpbmciLCJzY2hlZHVsZXIiLCJuZXh0SGFuZGxlIiwiTXV0YXRpb25PYnNlcnZlciIsIm9ic2VydmUiLCJhdHRyaWJ1dGVzIiwidG9nZ2xlIiwic2NyaXB0Iiwic2NoZWR1bGUiLCJmdW5jIiwiY2FuY2VsIiwiaGFuZGxlIiwicmVzZXRGb3JUZXN0aW5nIiwicnVuRWFybHkiLCJ3cml0ZVRpbWVvdXRJbnN0YW5jZSIsImRlcGVuZGVudE9ic2VydmFibGUiLCJyZWFkIiwid3JpdGUiLCJyYXRlTGltaXQiLCJsaW1pdEZ1bmN0aW9uIiwiX2RlZmVyVXBkYXRlcyIsImxpbWl0IiwiZGVmZXJyZWQiLCJub3RpZnkiLCJub3RpZnlXaGVuIiwiYm9vbGVhbiIsIm51bWJlciIsInN1YnNjcmlwdGlvbiIsImRpc3Bvc2VDYWxsYmFjayIsImtvX3N1YnNjcmliYWJsZV9mbiIsImluc3RhbmNlIiwiX3N1YnNjcmlwdGlvbnMiLCJfdmVyc2lvbk51bWJlciIsInN1YnNjcmliZSIsImNhbGxiYWNrVGFyZ2V0Iiwic2VsZiIsImJvdW5kQ2FsbGJhY2siLCJhZnRlclN1YnNjcmlwdGlvblJlbW92ZSIsImJlZm9yZVN1YnNjcmlwdGlvbkFkZCIsIm5vdGlmeVN1YnNjcmliZXJzIiwidmFsdWVUb05vdGlmeSIsInVwZGF0ZVZlcnNpb24iLCJoYXNTdWJzY3JpcHRpb25zRm9yRXZlbnQiLCJkZXBlbmRlbmN5RGV0ZWN0aW9uIiwiYmVnaW4iLCJlbmQiLCJnZXRWZXJzaW9uIiwiaGFzQ2hhbmdlZCIsInZlcnNpb25Ub0NoZWNrIiwiaWdub3JlQmVmb3JlQ2hhbmdlIiwicHJldmlvdXNWYWx1ZSIsInBlbmRpbmdWYWx1ZSIsInNlbGZJc09ic2VydmFibGUiLCJiZWZvcmVDaGFuZ2UiLCJmaW5pc2giLCJfbm90aWZpY2F0aW9uSXNQZW5kaW5nIiwiaXNEaWZmZXJlbnQiLCJnZXRTdWJzY3JpcHRpb25zQ291bnQiLCJ0b3RhbCIsInN1YnNjcmlwdGlvbnMiLCJvbGRWYWx1ZSIsIm5ld1ZhbHVlIiwiaXNTdWJzY3JpYmFibGUiLCJnZXRJZCIsImxhc3RJZCIsIm91dGVyRnJhbWVzIiwiY3VycmVudEZyYW1lIiwicG9wIiwicmVnaXN0ZXJEZXBlbmRlbmN5IiwiX2lkIiwiaWdub3JlIiwiY2FsbGJhY2tBcmdzIiwiaXNJbml0aWFsIiwiaWdub3JlRGVwZW5kZW5jaWVzIiwib2JzZXJ2YWJsZUxhdGVzdFZhbHVlIiwib2JzZXJ2YWJsZSIsImluaXRpYWxWYWx1ZSIsInZhbHVlV2lsbE11dGF0ZSIsInZhbHVlSGFzTXV0YXRlZCIsIm9ic2VydmFibGVGbiIsImVxdWFsaXR5Q29tcGFyZXIiLCJwcm90b1Byb3BlcnR5IiwiaGFzUHJvdG90eXBlIiwiaXNXcml0ZWFibGVPYnNlcnZhYmxlIiwiaGFzV3JpdGVGdW5jdGlvbiIsImluaXRpYWxWYWx1ZXMiLCJ0cmFja0FycmF5Q2hhbmdlcyIsInZhbHVlT3JQcmVkaWNhdGUiLCJ1bmRlcmx5aW5nQXJyYXkiLCJyZW1vdmVkVmFsdWVzIiwiYXJyYXlPZlZhbHVlcyIsImFsbFZhbHVlcyIsImRlc3Ryb3kiLCJkZXN0cm95QWxsIiwib2xkSXRlbSIsIm5ld0l0ZW0iLCJtZXRob2ROYW1lIiwiY2FjaGVEaWZmRm9yS25vd25PcGVyYXRpb24iLCJtZXRob2RDYWxsUmVzdWx0IiwiYXJyYXlDaGFuZ2VFdmVudE5hbWUiLCJ0cmFja0NoYW5nZXMiLCJ0cmFja2luZ0NoYW5nZXMiLCJ1bmRlcmx5aW5nTm90aWZ5U3Vic2NyaWJlcnNGdW5jdGlvbiIsInBlbmRpbmdOb3RpZmljYXRpb25zIiwicHJldmlvdXNDb250ZW50cyIsImNhY2hlZERpZmYiLCJhcnJheUNoYW5nZVN1YnNjcmlwdGlvbiIsImN1cnJlbnRDb250ZW50cyIsImNoYW5nZXMiLCJnZXRDaGFuZ2VzIiwiY29tcGFyZUFycmF5cyIsImNvbXBhcmVBcnJheU9wdGlvbnMiLCJ1bmRlcmx5aW5nQmVmb3JlU3Vic2NyaXB0aW9uQWRkRnVuY3Rpb24iLCJ1bmRlcmx5aW5nQWZ0ZXJTdWJzY3JpcHRpb25SZW1vdmVGdW5jdGlvbiIsInJhd0FycmF5Iiwib3BlcmF0aW9uTmFtZSIsInB1c2hEaWZmIiwiZGlmZiIsImFycmF5TGVuZ3RoIiwiYXJnc0xlbmd0aCIsIm9mZnNldCIsInN0YXJ0SW5kZXgiLCJlbmREZWxldGVJbmRleCIsImVuZEFkZEluZGV4IiwiZW5kSW5kZXgiLCJhZGRpdGlvbnMiLCJkZWxldGlvbnMiLCJhcmdzSW5kZXgiLCJmaW5kTW92ZXNJbkFycmF5Q29tcGFyaXNvbiIsImV2YWx1YXRvckZ1bmN0aW9uT3JPcHRpb25zIiwiZXZhbHVhdG9yRnVuY3Rpb25UYXJnZXQiLCJ3cml0ZUZ1bmN0aW9uIiwiaXNTdGFsZSIsImhhdmVEZXBlbmRlbmNpZXNDaGFuZ2VkIiwiZXZhbHVhdGVJbW1lZGlhdGUiLCJsYXRlc3RWYWx1ZSIsImlzQmVpbmdFdmFsdWF0ZWQiLCJzdXBwcmVzc0Rpc3Bvc2FsVW50aWxEaXNwb3NlV2hlblJldHVybnNGYWxzZSIsInB1cmUiLCJyZWFkRnVuY3Rpb24iLCJkaXNwb3NlV2hlbiIsImRvbU5vZGVEaXNwb3NhbENhbGxiYWNrIiwiZGVwZW5kZW5jaWVzQ291bnQiLCJldmFsdWF0aW9uVGltZW91dEluc3RhbmNlIiwiY29tcHV0ZWRGbiIsInB1cmVDb21wdXRlZE92ZXJyaWRlcyIsImRlZmVyRXZhbHVhdGlvbk92ZXJyaWRlcyIsImlzQWN0aXZlIiwidHJhY2tpbmdPYmoiLCJfb3JkZXIiLCJfdmVyc2lvbiIsImRlcGVuZGVuY3kiLCJtYXJrRGlydHkiLCJfZXZhbERlbGF5ZWQiLCJyZXNwb25kVG9DaGFuZ2UiLCJldmFsdWF0ZVBvc3NpYmx5QXN5bmMiLCJkaXJ0eVN1YiIsImNoYW5nZVN1YiIsInRocm90dGxlRXZhbHVhdGlvblRpbWVvdXQiLCJub3RpZnlDaGFuZ2UiLCJldmFsdWF0ZUltbWVkaWF0ZV9DYWxsUmVhZFdpdGhEZXBlbmRlbmN5RGV0ZWN0aW9uIiwiZGVwZW5kZW5jeURldGVjdGlvbkNvbnRleHQiLCJldmFsdWF0ZUltbWVkaWF0ZV9DYWxsUmVhZFRoZW5FbmREZXBlbmRlbmN5RGV0ZWN0aW9uIiwiZGVwZW5kZWNpZXNPcmRlciIsIm9yZGVyIiwicHJvdG9Qcm9wIiwiaXNDb21wdXRlZCIsImlzUHVyZUNvbXB1dGVkIiwicHVyZUNvbXB1dGVkIiwibWFwSnNPYmplY3RHcmFwaCIsInJvb3RPYmplY3QiLCJtYXBJbnB1dENhbGxiYWNrIiwidmlzaXRlZE9iamVjdHMiLCJvYmplY3RMb29rdXAiLCJjYW5IYXZlUHJvcGVydGllcyIsIlJlZ0V4cCIsIlN0cmluZyIsIk51bWJlciIsIkJvb2xlYW4iLCJvdXRwdXRQcm9wZXJ0aWVzIiwic2F2ZSIsInZpc2l0UHJvcGVydGllc09yQXJyYXlFbnRyaWVzIiwiaW5kZXhlciIsInByb3BlcnR5VmFsdWUiLCJwcmV2aW91c2x5TWFwcGVkVmFsdWUiLCJ2aXNpdG9yQ2FsbGJhY2siLCJwcm9wZXJ0eU5hbWUiLCJrZXlzIiwidmFsdWVzIiwibWF4TmVzdGVkT2JzZXJ2YWJsZURlcHRoIiwidG9KUyIsInZhbHVlVG9NYXAiLCJ0b0pTT04iLCJwbGFpbkphdmFTY3JpcHRPYmplY3QiLCJjb25zdHJ1Y3RvciIsImV4aXN0aW5nSW5kZXgiLCJoYXNEb21EYXRhRXhwYW5kb1Byb3BlcnR5Iiwic2VsZWN0RXh0ZW5zaW9ucyIsInJlYWRWYWx1ZSIsIm9wdGlvblZhbHVlRG9tRGF0YUtleSIsImdldEF0dHJpYnV0ZU5vZGUiLCJzcGVjaWZpZWQiLCJ0ZXh0Iiwic2VsZWN0ZWRJbmRleCIsIndyaXRlVmFsdWUiLCJhbGxvd1Vuc2V0Iiwib3B0aW9uVmFsdWUiLCJzZWxlY3Rpb24iLCJuIiwic2l6ZSIsImdldFdyaXRlYWJsZVZhbHVlIiwiZXhwcmVzc2lvbiIsImphdmFTY3JpcHRSZXNlcnZlZFdvcmRzIiwiamF2YVNjcmlwdEFzc2lnbm1lbnRUYXJnZXQiLCJwYXJzZU9iamVjdExpdGVyYWwiLCJvYmplY3RMaXRlcmFsU3RyaW5nIiwic3RyIiwiY2hhckNvZGVBdCIsInRva3MiLCJiaW5kaW5nVG9rZW4iLCJ0b2siLCJjIiwidW5rbm93biIsImRpdmlzaW9uTG9va0JlaGluZCIsImtleXdvcmRSZWdleExvb2tCZWhpbmQiLCJzdWJzdHIiLCJwcmVQcm9jZXNzQmluZGluZ3MiLCJiaW5kaW5nc1N0cmluZ09yS2V5VmFsdWVBcnJheSIsImJpbmRpbmdPcHRpb25zIiwicHJvY2Vzc0tleVZhbHVlIiwidmFsIiwiY2FsbFByZXByb2Nlc3NIb29rIiwid3JpdGFibGVWYWwiLCJiaW5kaW5nUGFyYW1zIiwidHdvV2F5QmluZGluZ3MiLCJwcm9wZXJ0eUFjY2Vzc29yUmVzdWx0U3RyaW5ncyIsIm1ha2VWYWx1ZUFjY2Vzc29ycyIsInJlc3VsdFN0cmluZ3MiLCJrZXlWYWx1ZUFycmF5Iiwia2V5VmFsdWUiLCJzdHJpbmdEb3VibGUiLCJzdHJpbmdTaW5nbGUiLCJzdHJpbmdSZWdleHAiLCJzcGVjaWFscyIsImV2ZXJ5VGhpbmdFbHNlIiwib25lTm90U3BhY2UiLCJpbiIsInJldHVybiIsInR5cGVvZiIsImtleVZhbHVlQXJyYXlDb250YWluc0tleSIsIndyaXRlVmFsdWVUb1Byb3BlcnR5IiwicHJvcGVydHkiLCJjaGVja0lmRGlmZmVyZW50IiwicHJvcFdyaXRlcnMiLCJpc1N0YXJ0Q29tbWVudCIsInN0YXJ0Q29tbWVudFJlZ2V4IiwiY29tbWVudE5vZGVzSGF2ZVRleHRQcm9wZXJ0eSIsImlzRW5kQ29tbWVudCIsImVuZENvbW1lbnRSZWdleCIsImdldFZpcnR1YWxDaGlsZHJlbiIsInN0YXJ0Q29tbWVudCIsImFsbG93VW5iYWxhbmNlZCIsImN1cnJlbnROb2RlIiwiY2hpbGRyZW4iLCJnZXRNYXRjaGluZ0VuZENvbW1lbnQiLCJhbGxWaXJ0dWFsQ2hpbGRyZW4iLCJnZXRVbmJhbGFuY2VkQ2hpbGRUYWdzIiwiY2hpbGROb2RlIiwiY2FwdHVyZVJlbWFpbmluZyIsIm1hdGNoaW5nRW5kQ29tbWVudCIsImNyZWF0ZUNvbW1lbnQiLCJodG1sVGFnc1dpdGhPcHRpb25hbGx5Q2xvc2luZ0NoaWxkcmVuIiwidWwiLCJvbCIsInZpcnR1YWxDaGlsZHJlbiIsImVuZENvbW1lbnROb2RlIiwicHJlcGVuZCIsImNvbnRhaW5lck5vZGUiLCJub2RlVG9QcmVwZW5kIiwiaW5zZXJ0QWZ0ZXIiLCJub2RlVG9JbnNlcnQiLCJpbnNlcnRBZnRlck5vZGUiLCJoYXNCaW5kaW5nVmFsdWUiLCJ2aXJ0dWFsTm9kZUJpbmRpbmdWYWx1ZSIsInJlZ2V4TWF0Y2giLCJub3JtYWxpc2VWaXJ0dWFsRWxlbWVudERvbVN0cnVjdHVyZSIsImVsZW1lbnRWZXJpZmllZCIsInVuYmFsYW5jZWRUYWdzIiwibm9kZVRvSW5zZXJ0QmVmb3JlIiwiY3JlYXRlQmluZGluZ3NTdHJpbmdFdmFsdWF0b3JWaWFDYWNoZSIsImJpbmRpbmdzU3RyaW5nIiwiY2FjaGUiLCJjYWNoZUtleSIsImNyZWF0ZUJpbmRpbmdzU3RyaW5nRXZhbHVhdG9yIiwicmV3cml0dGVuQmluZGluZ3MiLCJmdW5jdGlvbkJvZHkiLCJkZWZhdWx0QmluZGluZ0F0dHJpYnV0ZU5hbWUiLCJiaW5kaW5nUHJvdmlkZXIiLCJiaW5kaW5nQ2FjaGUiLCJub2RlSGFzQmluZGluZ3MiLCJnZXRBdHRyaWJ1dGUiLCJjb21wb25lbnRzIiwiZ2V0QmluZGluZ3MiLCJwYXJzZWRCaW5kaW5ncyIsImFkZEJpbmRpbmdzRm9yQ3VzdG9tRWxlbWVudCIsImdldEJpbmRpbmdBY2Nlc3NvcnMiLCJ2YWx1ZUFjY2Vzc29ycyIsImdldEJpbmRpbmdzU3RyaW5nIiwicGFyc2VCaW5kaW5nc1N0cmluZyIsImJpbmRpbmdGdW5jdGlvbiIsIm1lc3NhZ2UiLCJtYWtlVmFsdWVBY2Nlc3NvciIsImV2YWx1YXRlVmFsdWVBY2Nlc3NvciIsIm1ha2VBY2Nlc3NvcnNGcm9tRnVuY3Rpb24iLCJtYWtlQmluZGluZ0FjY2Vzc29ycyIsImJpbmRpbmdzIiwiY29udGV4dCIsImdldEJpbmRpbmdzQW5kTWFrZUFjY2Vzc29ycyIsInZhbGlkYXRlVGhhdEJpbmRpbmdJc0FsbG93ZWRGb3JWaXJ0dWFsRWxlbWVudHMiLCJiaW5kaW5nTmFtZSIsInZhbGlkYXRvciIsImFwcGx5QmluZGluZ3NUb0Rlc2NlbmRhbnRzSW50ZXJuYWwiLCJlbGVtZW50T3JWaXJ0dWFsRWxlbWVudCIsImJpbmRpbmdDb250ZXh0c01heURpZmZlckZyb21Eb21QYXJlbnRFbGVtZW50IiwiY3VycmVudENoaWxkIiwibmV4dEluUXVldWUiLCJwcm92aWRlciIsInByZXByb2Nlc3NOb2RlIiwiYXBwbHlCaW5kaW5nc1RvTm9kZUFuZERlc2NlbmRhbnRzSW50ZXJuYWwiLCJub2RlVmVyaWZpZWQiLCJiaW5kaW5nQ29udGV4dE1heURpZmZlckZyb21Eb21QYXJlbnRFbGVtZW50Iiwic2hvdWxkQmluZERlc2NlbmRhbnRzIiwiaXNFbGVtZW50Iiwic2hvdWxkQXBwbHlCaW5kaW5ncyIsImFwcGx5QmluZGluZ3NUb05vZGVJbnRlcm5hbCIsImJpbmRpbmdEb2VzTm90UmVjdXJzZUludG9FbGVtZW50VHlwZXMiLCJ0b3BvbG9naWNhbFNvcnRCaW5kaW5ncyIsImJpbmRpbmdzQ29uc2lkZXJlZCIsImN5Y2xpY0RlcGVuZGVuY3lTdGFjayIsInB1c2hCaW5kaW5nIiwiYmluZGluZyIsImJpbmRpbmdEZXBlbmRlbmN5S2V5Iiwic291cmNlQmluZGluZ3MiLCJhbHJlYWR5Qm91bmQiLCJib3VuZEVsZW1lbnREb21EYXRhS2V5Iiwic3RvcmVkQmluZGluZ0NvbnRleHRGb3JOb2RlIiwiYmluZGluZ3NVcGRhdGVyIiwiX3N1YnNjcmliYWJsZSIsImJpbmRpbmdIYW5kbGVyVGhhdENvbnRyb2xzRGVzY2VuZGFudEJpbmRpbmdzIiwiZ2V0VmFsdWVBY2Nlc3NvciIsIm9yZGVyZWRCaW5kaW5ncyIsImJpbmRpbmdLZXlBbmRIYW5kbGVyIiwiaGFuZGxlckluaXRGbiIsImhhbmRsZXJVcGRhdGVGbiIsImluaXRSZXN1bHQiLCJnZXRCaW5kaW5nQ29udGV4dCIsInZpZXdNb2RlbE9yQmluZGluZ0NvbnRleHQiLCJ0ZXh0YXJlYSIsInRlbXBsYXRlIiwiZGF0YUl0ZW1PckFjY2Vzc29yIiwicGFyZW50Q29udGV4dCIsImRhdGFJdGVtQWxpYXMiLCJleHRlbmRDYWxsYmFjayIsInVwZGF0ZUNvbnRleHQiLCJkYXRhSXRlbU9yT2JzZXJ2YWJsZSIsImlzRnVuYyIsImRhdGFJdGVtIiwiX2FkZE5vZGUiLCJ1bnNoaWZ0IiwicHJvcGVydGllcyIsInN0b3JlZEJpbmRpbmdDb250ZXh0RG9tRGF0YUtleSIsImFwcGx5QmluZGluZ0FjY2Vzc29yc1RvTm9kZSIsImFwcGx5QmluZGluZ3NUb05vZGUiLCJjb250ZXh0Rm9yIiwiZGF0YUZvciIsImdldE9iamVjdE93blByb3BlcnR5IiwicHJvcE5hbWUiLCJsb2FkQ29tcG9uZW50QW5kTm90aWZ5IiwiY29tcG9uZW50TmFtZSIsImNvbXBsZXRlZEFzeW5jIiwibG9hZGluZ1N1YnNjcmliYWJsZXNDYWNoZSIsImJlZ2luTG9hZGluZ0NvbXBvbmVudCIsImRlZmluaXRpb24iLCJjb25maWciLCJpc1N5bmNocm9ub3VzQ29tcG9uZW50IiwibG9hZGVkRGVmaW5pdGlvbnNDYWNoZSIsImdldEZpcnN0UmVzdWx0RnJvbUxvYWRlcnMiLCJhcmdzRXhjZXB0Q2FsbGJhY2siLCJjYW5kaWRhdGVMb2FkZXJzIiwiY3VycmVudENhbmRpZGF0ZUxvYWRlciIsIm1ldGhvZEluc3RhbmNlIiwid2FzQWJvcnRlZCIsInN5bmNocm9ub3VzUmV0dXJuVmFsdWUiLCJjYWNoZWREZWZpbml0aW9uIiwiY2xlYXJDYWNoZWREZWZpbml0aW9uIiwiX2dldEZpcnN0UmVzdWx0RnJvbUxvYWRlcnMiLCJyZXNvbHZlQ29uZmlnIiwiZXJyb3JDYWxsYmFjayIsIm1ha2VDYWxsQmFja1doZW5aZXJvIiwidHJ5SXNzdWVDYWxsYmFjayIsInRlbXBsYXRlQ29uZmlnIiwidmlld01vZGVsQ29uZmlnIiwicG9zc2libHlHZXRDb25maWdGcm9tQW1kIiwibG9hZGVkQ29uZmlnIiwicmVzb2x2ZWRUZW1wbGF0ZSIsInJlc29sdmVkVmlld01vZGVsIiwiY3JlYXRlVmlld01vZGVsS2V5IiwicmVzb2x2ZVRlbXBsYXRlIiwiaXNEb2N1bWVudEZyYWdtZW50IiwiaXNEb21FbGVtZW50IiwiY2xvbmVOb2Rlc0Zyb21UZW1wbGF0ZVNvdXJjZUVsZW1lbnQiLCJlbGVtSW5zdGFuY2UiLCJyZXNvbHZlVmlld01vZGVsIiwiZml4ZWRJbnN0YW5jZSIsImNvbXBvbmVudEluZm8iLCJIVE1MRWxlbWVudCIsIkRvY3VtZW50RnJhZ21lbnQiLCJtYWtlRXJyb3JDYWxsYmFjayIsImRlZmF1bHRDb25maWdSZWdpc3RyeSIsInJlZ2lzdGVyIiwiaXNSZWdpc3RlcmVkIiwidW5yZWdpc3RlciIsImRlZmF1bHRMb2FkZXIiLCJnZXRDb25maWciLCJsb2FkQ29tcG9uZW50IiwibG9hZFRlbXBsYXRlIiwibG9hZFZpZXdNb2RlbCIsIl9hbGxSZWdpc3RlcmVkQ29tcG9uZW50cyIsImdldENvbXBvbmVudFBhcmFtc0Zyb21DdXN0b21FbGVtZW50IiwicGFyYW1zQXR0cmlidXRlIiwibmF0aXZlQmluZGluZ1Byb3ZpZGVySW5zdGFuY2UiLCJyYXdQYXJhbUNvbXB1dGVkVmFsdWVzIiwicGFyYW1WYWx1ZSIsInBhcmFtTmFtZSIsInBhcmFtVmFsdWVDb21wdXRlZCIsIiRyYXciLCJjb21wb25lbnRCaW5kaW5nVmFsdWUiLCJjcmVhdGVEb2N1bWVudEZyYWdtZW50IiwibmV3RG9jRnJhZyIsImFsbENvbXBvbmVudHMiLCJjbG9uZVRlbXBsYXRlSW50b0VsZW1lbnQiLCJjb21wb25lbnREZWZpbml0aW9uIiwiY2xvbmVkTm9kZXNBcnJheSIsImNyZWF0ZVZpZXdNb2RlbCIsIm9yaWdpbmFsQ2hpbGROb2RlcyIsImNvbXBvbmVudFBhcmFtcyIsImNvbXBvbmVudFZpZXdNb2RlbEZhY3RvcnkiLCJ0ZW1wbGF0ZU5vZGVzIiwiY29tcG9uZW50TG9hZGluZ09wZXJhdGlvblVuaXF1ZUlkIiwiaWdub3JlZDEiLCJpZ25vcmVkMiIsImN1cnJlbnRWaWV3TW9kZWwiLCJjdXJyZW50TG9hZGluZ09wZXJhdGlvbklkIiwiZGlzcG9zZUFzc29jaWF0ZWRDb21wb25lbnRWaWV3TW9kZWwiLCJjdXJyZW50Vmlld01vZGVsRGlzcG9zZSIsImxvYWRpbmdPcGVyYXRpb25JZCIsImNvbXBvbmVudFZpZXdNb2RlbCIsImNoaWxkQmluZGluZ0NvbnRleHQiLCJjdHgiLCJhdHRySHRtbFRvSmF2YXNjcmlwdE1hcCIsImNsYXNzIiwiZm9yIiwiYXR0ck5hbWUiLCJhdHRyVmFsdWUiLCJ0b1JlbW92ZSIsInJlbW92ZUF0dHJpYnV0ZSIsImFmdGVyIiwidXBkYXRlTW9kZWwiLCJpc0NoZWNrZWQiLCJjaGVja2VkIiwiZWxlbVZhbHVlIiwidXNlQ2hlY2tlZFZhbHVlIiwiY2hlY2tlZFZhbHVlIiwiaXNSYWRpbyIsIm1vZGVsVmFsdWUiLCJ2YWx1ZUlzQXJyYXkiLCJ3cml0YWJsZVZhbHVlIiwicmF3VmFsdWVJc05vbkFycmF5T2JzZXJ2YWJsZSIsIm9sZEVsZW1WYWx1ZSIsInVwZGF0ZVZpZXciLCJpc0NoZWNrYm94IiwicmF3VmFsdWUiLCJjbGFzc2VzV3JpdHRlbkJ5QmluZGluZ0tleSIsImRpc2FibGVkIiwiZXZlbnRzVG9IYW5kbGUiLCJoYW5kbGVyUmV0dXJuVmFsdWUiLCJoYW5kbGVyRnVuY3Rpb24iLCJhcmdzRm9ySGFuZGxlciIsInJldHVyblZhbHVlIiwiYnViYmxlIiwiY2FuY2VsQnViYmxlIiwibWFrZVRlbXBsYXRlVmFsdWVBY2Nlc3NvciIsInVud3JhcHBlZFZhbHVlIiwiZm9yZWFjaCIsImFzIiwiaW5jbHVkZURlc3Ryb3llZCIsImFmdGVyQWRkIiwiYmVmb3JlUmVtb3ZlIiwiYWZ0ZXJSZW5kZXIiLCJiZWZvcmVNb3ZlIiwiYWZ0ZXJNb3ZlIiwidGVtcGxhdGVFbmdpbmUiLCJuYXRpdmVUZW1wbGF0ZUVuZ2luZSIsImhhc2ZvY3VzVXBkYXRpbmdQcm9wZXJ0eSIsImhhc2ZvY3VzTGFzdFZhbHVlIiwiaGFuZGxlRWxlbWVudEZvY3VzQ2hhbmdlIiwiaXNGb2N1c2VkIiwib3duZXJEb2MiLCJhY3RpdmUiLCJhY3RpdmVFbGVtZW50IiwiaGFuZGxlRWxlbWVudEZvY3VzSW4iLCJoYW5kbGVFbGVtZW50Rm9jdXNPdXQiLCJmb2N1cyIsImJsdXIiLCJjYXB0aW9uUGxhY2Vob2xkZXIiLCJzZWxlY3RlZE9wdGlvbnMiLCJhcHBseVRvT2JqZWN0IiwiZGVmYXVsdFZhbHVlIiwicHJlZGljYXRlVHlwZSIsIm9wdGlvbkZvckFycmF5SXRlbSIsImFycmF5RW50cnkiLCJvbGRPcHRpb25zIiwicHJldmlvdXNTZWxlY3RlZFZhbHVlcyIsInZhbHVlQWxsb3dVbnNldCIsIml0ZW1VcGRhdGUiLCJvcHRpb25UZXh0Iiwic2V0U2VsZWN0aW9uQ2FsbGJhY2siLCJuZXdPcHRpb25zIiwiY2FwdGlvblZhbHVlIiwiZmlsdGVyZWRBcnJheSIsInNlbGVjdFdhc1ByZXZpb3VzbHlFbXB0eSIsIm11bHRpcGxlIiwicHJldmlvdXNTY3JvbGxUb3AiLCJzY3JvbGxUb3AiLCJ1bndyYXBwZWRBcnJheSIsImFycmF5VG9Eb21Ob2RlQ2hpbGRyZW5PcHRpb25zIiwic2V0RG9tTm9kZUNoaWxkcmVuRnJvbUFycmF5TWFwcGluZyIsInNlbGVjdGlvbkNoYW5nZWQiLCJhYnMiLCJ2YWx1ZVRvV3JpdGUiLCJzdHlsZU5hbWUiLCJzdHlsZVZhbHVlIiwicGFyc2VWZXJzaW9uIiwicGFyc2VGbG9hdCIsIm9wZXJhVmVyc2lvbiIsIm9wZXJhIiwicGFyc2VJbnQiLCJzYWZhcmlWZXJzaW9uIiwiZmlyZWZveFZlcnNpb24iLCJzZWxlY3Rpb25DaGFuZ2VSZWdpc3RlcmVkTmFtZSIsInNlbGVjdGlvbkNoYW5nZUhhbmRsZXJOYW1lIiwic2VsZWN0aW9uQ2hhbmdlSGFuZGxlciIsInJlZ2lzdGVyRm9yU2VsZWN0aW9uQ2hhbmdlRXZlbnQiLCJ0aW1lb3V0SGFuZGxlIiwiZWxlbWVudFZhbHVlQmVmb3JlRXZlbnQiLCJwcmV2aW91c0VsZW1lbnRWYWx1ZSIsImVsZW1lbnRWYWx1ZSIsImRlZmVyVXBkYXRlTW9kZWwiLCJpZVVwZGF0ZU1vZGVsIiwib25FdmVudCIsInByZXByb2Nlc3MiLCJhZGRCaW5kaW5nIiwiY3VycmVudEluZGV4IiwiZXZlbnRzVG9DYXRjaCIsInJlcXVlc3RlZEV2ZW50c1RvQ2F0Y2giLCJwcm9wZXJ0eUNoYW5nZWRGaXJlZCIsInZhbHVlVXBkYXRlSGFuZGxlciIsImllQXV0b0NvbXBsZXRlSGFja05lZWRlZCIsImF1dG9jb21wbGV0ZSIsInVwZGF0ZUZyb21Nb2RlbCIsInZhbHVlSGFzQ2hhbmdlZCIsImFwcGx5VmFsdWVBY3Rpb24iLCJpc0N1cnJlbnRseVZpc2libGUiLCJ0ZW1wbGF0ZVNvdXJjZSIsInRlbXBsYXRlU291cmNlcyIsImRvbUVsZW1lbnQiLCJhbm9ueW1vdXNUZW1wbGF0ZSIsInJld3JpdGVyQ2FsbGJhY2siLCJyZXdyaXR0ZW4iLCJ0ZW1wbGF0ZVJld3JpdGluZyIsInZhbGlkYXRlRGF0YUJpbmRWYWx1ZXNGb3JSZXdyaXRpbmciLCJhbGxWYWxpZGF0b3JzIiwicG9zc2libGVFcnJvck1lc3NhZ2UiLCJjb25zdHJ1Y3RNZW1vaXplZFRhZ1JlcGxhY2VtZW50IiwiZGF0YUJpbmRBdHRyaWJ1dGVWYWx1ZSIsInRhZ1RvUmV0YWluIiwibm9kZU5hbWUiLCJkYXRhQmluZEtleVZhbHVlQXJyYXkiLCJyZXdyaXR0ZW5EYXRhQmluZEF0dHJpYnV0ZVZhbHVlIiwiYXBwbHlCaW5kaW5nc1RvTmV4dFNpYmxpbmdTY3JpcHQiLCJtZW1vaXplRGF0YUJpbmRpbmdBdHRyaWJ1dGVTeW50YXhSZWdleCIsIm1lbW9pemVWaXJ0dWFsQ29udGFpbmVyQmluZGluZ1N5bnRheFJlZ2V4IiwiZW5zdXJlVGVtcGxhdGVJc1Jld3JpdHRlbiIsImh0bWxTdHJpbmciLCJtZW1vaXplQmluZGluZ0F0dHJpYnV0ZVN5bnRheCIsImFwcGx5TWVtb2l6ZWRCaW5kaW5nc1RvTmV4dFNpYmxpbmciLCJub2RlVG9CaW5kIiwiZ2V0VGVtcGxhdGVEb21EYXRhIiwidGVtcGxhdGVzRG9tRGF0YUtleSIsInNldFRlbXBsYXRlRG9tRGF0YSIsInRlbXBsYXRlU2NyaXB0IiwidGVtcGxhdGVUZXh0QXJlYSIsInRlbXBsYXRlVGVtcGxhdGUiLCJ0ZW1wbGF0ZUVsZW1lbnQiLCJ0ZW1wbGF0ZVR5cGUiLCJlbGVtQ29udGVudHNQcm9wZXJ0eSIsImRhdGFEb21EYXRhUHJlZml4IiwidGVtcGxhdGVEYXRhIiwiY29udGFpbmVyRGF0YSIsInRleHREYXRhIiwiaW52b2tlRm9yRWFjaE5vZGVJbkNvbnRpbnVvdXNSYW5nZSIsImZpcnN0Tm9kZSIsImxhc3ROb2RlIiwiZmlyc3RPdXRPZlJhbmdlTm9kZSIsImFjdGl2YXRlQmluZGluZ3NPbkNvbnRpbnVvdXNOb2RlQXJyYXkiLCJuZXh0Tm9kZUluUmFuZ2UiLCJub2RlUHJldmlvdXNTaWJsaW5nIiwicHJldmlvdXNTaWJsaW5nIiwibmV3Tm9kZXMiLCJnZXRGaXJzdE5vZGVGcm9tUG9zc2libGVBcnJheSIsIm5vZGVPck5vZGVBcnJheSIsImV4ZWN1dGVUZW1wbGF0ZSIsInRhcmdldE5vZGVPck5vZGVBcnJheSIsInJlbmRlck1vZGUiLCJmaXJzdFRhcmdldE5vZGUiLCJ0ZW1wbGF0ZUVuZ2luZVRvVXNlIiwiX3RlbXBsYXRlRW5naW5lIiwicmVuZGVyZWROb2Rlc0FycmF5IiwiaGF2ZUFkZGVkTm9kZXNUb1BhcmVudCIsInJlc29sdmVUZW1wbGF0ZU5hbWUiLCJkaXNwb3NlT2xkQ29tcHV0ZWRBbmRTdG9yZU5ld09uZSIsIm5ld0NvbXB1dGVkIiwib2xkQ29tcHV0ZWQiLCJ0ZW1wbGF0ZUNvbXB1dGVkRG9tRGF0YUtleSIsInNldFRlbXBsYXRlRW5naW5lIiwicmVuZGVyVGVtcGxhdGUiLCJkYXRhT3JCaW5kaW5nQ29udGV4dCIsIndoZW5Ub0Rpc3Bvc2UiLCJhY3RpdmVseURpc3Bvc2VXaGVuTm9kZUlzUmVtb3ZlZCIsInRlbXBsYXRlTmFtZSIsInJlbmRlclRlbXBsYXRlRm9yRWFjaCIsImFycmF5T3JPYnNlcnZhYmxlQXJyYXkiLCJ0YXJnZXROb2RlIiwicGFyZW50QmluZGluZ0NvbnRleHQiLCJhcnJheUl0ZW1Db250ZXh0IiwiZXhlY3V0ZVRlbXBsYXRlRm9yQXJyYXlJdGVtIiwiYXJyYXlWYWx1ZSIsImFjdGl2YXRlQmluZGluZ3NDYWxsYmFjayIsImFkZGVkTm9kZXNBcnJheSIsImJpbmRpbmdWYWx1ZSIsInRlbXBsYXRlQ29tcHV0ZWQiLCJkYXRhQXJyYXkiLCJpbm5lckJpbmRpbmdDb250ZXh0IiwicGFyc2VkQmluZGluZ1ZhbHVlIiwibGVmdCIsInJpZ2h0IiwibGltaXRGYWlsZWRDb21wYXJlcyIsImZhaWxlZENvbXBhcmVzIiwibCIsInIiLCJsZWZ0SXRlbSIsInJpZ2h0SXRlbSIsIm9sZEFycmF5IiwibmV3QXJyYXkiLCJkb250TGltaXRNb3ZlcyIsImNvbXBhcmVTbWFsbEFycmF5VG9CaWdBcnJheSIsInN0YXR1c05vdEluT2xkIiwic3RhdHVzTm90SW5OZXciLCJzbWxBcnJheSIsImJpZ0FycmF5Iiwic3RhdHVzTm90SW5TbWwiLCJzdGF0dXNOb3RJbkJpZyIsInNtbEluZGV4IiwiYmlnSW5kZXgiLCJ0aGlzUm93IiwibGFzdFJvdyIsImJpZ0luZGV4TWF4Rm9yUm93IiwiYmlnSW5kZXhNaW5Gb3JSb3ciLCJteU1pbiIsIm15TWF4IiwiZWRpdERpc3RhbmNlTWF0cml4Iiwic21sSW5kZXhNYXgiLCJiaWdJbmRleE1heCIsImNvbXBhcmVSYW5nZSIsIm1heERpc3RhbmNlIiwibm9ydGhEaXN0YW5jZSIsIndlc3REaXN0YW5jZSIsIm1lTWludXNPbmUiLCJlZGl0U2NyaXB0Iiwibm90SW5TbWwiLCJub3RJbkJpZyIsInJldmVyc2UiLCJtYXBOb2RlQW5kUmVmcmVzaFdoZW5DaGFuZ2VkIiwiY2FsbGJhY2tBZnRlckFkZGluZ05vZGVzIiwibWFwcGVkTm9kZXMiLCJuZXdNYXBwZWROb2RlcyIsImxhc3RNYXBwaW5nUmVzdWx0RG9tRGF0YUtleSIsImRlbGV0ZWRJdGVtRHVtbXlWYWx1ZSIsIml0ZW1Nb3ZlZE9yUmV0YWluZWQiLCJlZGl0U2NyaXB0SW5kZXgiLCJvbGRQb3NpdGlvbiIsIm1hcERhdGEiLCJsYXN0TWFwcGluZ1Jlc3VsdCIsIm5ld01hcHBpbmdSZXN1bHRJbmRleCIsIml0ZW1zRm9yTW92ZUNhbGxiYWNrcyIsImluZGV4T2JzZXJ2YWJsZSIsIm5ld01hcHBpbmdSZXN1bHQiLCJpdGVtc1RvUHJvY2VzcyIsImNhbGxDYWxsYmFjayIsImVkaXRTY3JpcHRJdGVtIiwibW92ZWRJbmRleCIsImlzRmlyc3RFeGVjdXRpb24iLCJsYXN0QXJyYXkiLCJ4IiwibGFzdE1hcHBpbmdSZXN1bHRJbmRleCIsIm5vZGVzVG9EZWxldGUiLCJpdGVtc0ZvckJlZm9yZVJlbW92ZUNhbGxiYWNrcyIsIml0ZW1zRm9yQWZ0ZXJBZGRDYWxsYmFja3MiLCJuZXh0Tm9kZSIsImluaXRpYWxpemVkIiwidXNlTm9kZXNJZkF2YWlsYWJsZSIsInRlbXBsYXRlTm9kZXNGdW5jIiwidGVtcGxhdGVUZXh0IiwianF1ZXJ5VG1wbFRlbXBsYXRlRW5naW5lIiwiZW5zdXJlSGFzUmVmZXJlbmNlZEpRdWVyeVRlbXBsYXRlcyIsImpRdWVyeVRtcGxWZXJzaW9uIiwiY29tcGlsZWRUZW1wbGF0ZSIsImpRdWVyeVRlbXBsYXRlT3B0aW9ucyIsInByZWNvbXBpbGVkIiwia29CaW5kaW5nQ29udGV4dCIsInJlc3VsdE5vZGVzIiwidGVtcGxhdGVNYXJrdXAiLCJjbG9zZSIsImpxdWVyeVRtcGxUZW1wbGF0ZUVuZ2luZUluc3RhbmNlIl0sIm1hcHBpbmdzIjoiQUFzQkEseUhBOEdBLFFBQVNBLHlCQUdQLEdBSUlDLEdBSkFDLEdBQVFDLElBQUksV0FBV0MsSUFBSSxvQkFFM0JDLEVBQWEsR0FBSUMsUUFBT0MsS0FBS0MsV0FJN0JDLEdBQ0ZD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LEVBQXdCemxDLEVBQUEsUUFBMkIybEMsaUJBQW9CamlDLEdBQWtCdUMsRUFBQSxpQkFFekYyL0IsRUFBYzdHLEVBQWdCMkcsRUFBYTkxQixFQUFNNjFCLEVBSXJELE9BSEFHLEdBQUEsU0FBd0J6NkIsRUFBaUJyQyxjQUFjLFFBRXZEOUksRUFBQSxhQUNPNGxDLEdBR1gvb0MsS0FBQSwrQkFBeUMsU0FBUzRiLEdBQzlDLE1BQU8sbUNBQXFDQSxFQUFTLGFBR3pENWIsS0FBQSxZQUFzQixTQUFTb2pDLEVBQWM0RixHQUN6Q3ZxQyxFQUFTNmQsTUFBTSxnQ0FBa0M4bUIsRUFBZSxLQUFPNEYsRUFBaUIsY0FHeEZOLEVBQW9CLElBQ3BCdmxDLEVBQUEsS0FBQSxJQUFBLFNBQ0kzSCxLQUFNLHNCQUVWMkgsRUFBQSxLQUFBLElBQUEsU0FDSTNILEtBQU0sYUFDTnl0QyxNQUFPLFFBS25CMXFDLEVBQUdpcUMseUJBQXlCbm9DLFVBQVksR0FBSTlCLEdBQUdtOEIsZUFDL0NuOEIsRUFBR2lxQyx5QkFBeUJub0MsVUFBVWtuQixZQUFjaHBCLEVBQUdpcUMsd0JBR3ZELElBQUlVLEdBQW1DLEdBQUkzcUMsR0FBR2lxQyx3QkFDMUNVLEdBQWlDUixrQkFBb0IsR0FDckRucUMsRUFBR3drQyxrQkFBa0JtRyxHQUV6QjNxQyxFQUFHb0ssYUFBYSwyQkFBNEJwSyxFQUFHaXFDIiwiZmlsZSI6ImFsbC5qcyIsInNvdXJjZXNDb250ZW50IjpbIi8vIFRoZSBTaWRlTmF2IGNsYXNzICBpcyB3cml0dGVuIGJ5IFBhdWwgTGV3aXMgYW5kIFN1cm1hIChTb3JyeSBkb24ndCBrbm93IHRoZSBsYXN0ICBuYW1lKVxuLy8gaHR0cHM6Ly93d3cueW91dHViZS5jb20vd2F0Y2g/dj1lNUNYZzFzalRxUVxuXG4vKipcbiAqXG4gKiBDb3B5cmlnaHQgMjAxNiBHb29nbGUgSW5jLiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuICpcbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XG4gKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXG4gKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcbiAqXG4gKiAgICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG4gKlxuICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxuICogZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxuICogV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXG4gKiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXG4gKiBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cbiAqL1xuXG5cblxuJ3VzZSBzdHJpY3QnO1xuXG5jbGFzcyBTaWRlTmF2IHtcbiAgY29uc3RydWN0b3IgKCkge1xuICAgIHRoaXMuc2hvd0J1dHRvbkVsID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignLmpzLW1lbnUtc2hvdycpO1xuICAgIHRoaXMuaGlkZUJ1dHRvbkVsID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignLmpzLW1lbnUtaGlkZScpO1xuICAgIHRoaXMuc2lkZU5hdkVsID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignLmpzLXNpZGUtbmF2Jyk7XG4gICAgdGhpcy5zaWRlTmF2Q29udGFpbmVyRWwgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcuanMtc2lkZS1uYXYtY29udGFpbmVyJyk7XG5cbiAgICB0aGlzLnNob3dTaWRlTmF2ID0gdGhpcy5zaG93U2lkZU5hdi5iaW5kKHRoaXMpO1xuICAgIHRoaXMuaGlkZVNpZGVOYXYgPSB0aGlzLmhpZGVTaWRlTmF2LmJpbmQodGhpcyk7XG4gICAgdGhpcy5ibG9ja0NsaWNrcyA9IHRoaXMuYmxvY2tDbGlja3MuYmluZCh0aGlzKTtcbiAgICB0aGlzLm9uVG91Y2hTdGFydCA9IHRoaXMub25Ub3VjaFN0YXJ0LmJpbmQodGhpcyk7XG4gICAgdGhpcy5vblRvdWNoTW92ZSA9IHRoaXMub25Ub3VjaE1vdmUuYmluZCh0aGlzKTtcbiAgICB0aGlzLm9uVG91Y2hFbmQgPSB0aGlzLm9uVG91Y2hFbmQuYmluZCh0aGlzKTtcbiAgICB0aGlzLm9uVHJhbnNpdGlvbkVuZCA9IHRoaXMub25UcmFuc2l0aW9uRW5kLmJpbmQodGhpcyk7XG4gICAgdGhpcy51cGRhdGUgPSB0aGlzLnVwZGF0ZS5iaW5kKHRoaXMpO1xuXG4gICAgdGhpcy5zdGFydFggPSAwO1xuICAgIHRoaXMuY3VycmVudFggPSAwO1xuICAgIHRoaXMudG91Y2hpbmdTaWRlTmF2ID0gZmFsc2U7XG5cbiAgICB0aGlzLmFkZEV2ZW50TGlzdGVuZXJzKCk7XG4gIH1cblxuICBhZGRFdmVudExpc3RlbmVycyAoKSB7XG4gICAgdGhpcy5zaG93QnV0dG9uRWwuYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCB0aGlzLnNob3dTaWRlTmF2KTtcbiAgICB0aGlzLmhpZGVCdXR0b25FbC5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsIHRoaXMuaGlkZVNpZGVOYXYpO1xuICAgIHRoaXMuc2lkZU5hdkVsLmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgdGhpcy5oaWRlU2lkZU5hdik7XG4gICAgdGhpcy5zaWRlTmF2Q29udGFpbmVyRWwuYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCB0aGlzLmJsb2NrQ2xpY2tzKTtcblxuICAgIHRoaXMuc2lkZU5hdkVsLmFkZEV2ZW50TGlzdGVuZXIoJ3RvdWNoc3RhcnQnLCB0aGlzLm9uVG91Y2hTdGFydCk7XG4gICAgdGhpcy5zaWRlTmF2RWwuYWRkRXZlbnRMaXN0ZW5lcigndG91Y2htb3ZlJywgdGhpcy5vblRvdWNoTW92ZSk7XG4gICAgdGhpcy5zaWRlTmF2RWwuYWRkRXZlbnRMaXN0ZW5lcigndG91Y2hlbmQnLCB0aGlzLm9uVG91Y2hFbmQpO1xuICB9XG5cbiAgb25Ub3VjaFN0YXJ0IChldnQpIHtcbiAgICBpZiAoIXRoaXMuc2lkZU5hdkVsLmNsYXNzTGlzdC5jb250YWlucygnc2lkZS1uYXYtLXZpc2libGUnKSlcbiAgICAgIHJldHVybjtcblxuICAgIHRoaXMuc3RhcnRYID0gZXZ0LnRvdWNoZXNbMF0ucGFnZVg7XG4gICAgdGhpcy5jdXJyZW50WCA9IHRoaXMuc3RhcnRYO1xuXG4gICAgdGhpcy50b3VjaGluZ1NpZGVOYXYgPSB0cnVlO1xuICAgIHJlcXVlc3RBbmltYXRpb25GcmFtZSh0aGlzLnVwZGF0ZSk7XG4gIH1cblxuICBvblRvdWNoTW92ZSAoZXZ0KSB7XG4gICAgaWYgKCF0aGlzLnRvdWNoaW5nU2lkZU5hdilcbiAgICAgIHJldHVybjtcblxuICAgIHRoaXMuY3VycmVudFggPSBldnQudG91Y2hlc1swXS5wYWdlWDtcbiAgICBjb25zdCB0cmFuc2xhdGVYID0gTWF0aC5taW4oMCwgdGhpcy5jdXJyZW50WCAtIHRoaXMuc3RhcnRYKTtcblxuICAgIGlmICh0cmFuc2xhdGVYIDwgMCkge1xuICAgICAgZXZ0LnByZXZlbnREZWZhdWx0KCk7XG4gICAgfVxuICB9XG5cbiAgb25Ub3VjaEVuZCAoZXZ0KSB7XG4gICAgaWYgKCF0aGlzLnRvdWNoaW5nU2lkZU5hdilcbiAgICAgIHJldHVybjtcblxuICAgIHRoaXMudG91Y2hpbmdTaWRlTmF2ID0gZmFsc2U7XG5cbiAgICBjb25zdCB0cmFuc2xhdGVYID0gTWF0aC5taW4oMCwgdGhpcy5jdXJyZW50WCAtIHRoaXMuc3RhcnRYKTtcbiAgICB0aGlzLnNpZGVOYXZDb250YWluZXJFbC5zdHlsZS50cmFuc2Zvcm0gPSAnJztcblxuICAgIGlmICh0cmFuc2xhdGVYIDwgMCkge1xuICAgICAgdGhpcy5oaWRlU2lkZU5hdigpO1xuICAgIH1cbiAgfVxuXG4gIHVwZGF0ZSAoKSB7XG4gICAgaWYgKCF0aGlzLnRvdWNoaW5nU2lkZU5hdilcbiAgICAgIHJldHVybjtcblxuXG5cbiAgICBjb25zdCB0cmFuc2xhdGVYID0gTWF0aC5taW4oMCwgdGhpcy5jdXJyZW50WCAtIHRoaXMuc3RhcnRYKTtcbiAgICB0aGlzLnNpZGVOYXZDb250YWluZXJFbC5zdHlsZS50cmFuc2Zvcm0gPSBgdHJhbnNsYXRlWCgke3RyYW5zbGF0ZVh9cHgpYDtcbiAgICByZXF1ZXN0QW5pbWF0aW9uRnJhbWUodGhpcy51cGRhdGUpO1xuICB9XG5cbiAgYmxvY2tDbGlja3MgKGV2dCkge1xuICAgIGV2dC5zdG9wUHJvcGFnYXRpb24oKTtcbiAgfVxuXG4gIG9uVHJhbnNpdGlvbkVuZCAoZXZ0KSB7XG4gICAgdGhpcy5zaWRlTmF2RWwuY2xhc3NMaXN0LnJlbW92ZSgnc2lkZS1uYXYtLWFuaW1hdGFibGUnKTtcbiAgICB0aGlzLnNpZGVOYXZFbC5yZW1vdmVFdmVudExpc3RlbmVyKCd0cmFuc2l0aW9uZW5kJywgdGhpcy5vblRyYW5zaXRpb25FbmQpO1xuICB9XG5cbiAgc2hvd1NpZGVOYXYgKCkge1xuICAgIHRoaXMuc2lkZU5hdkVsLmNsYXNzTGlzdC5hZGQoJ3NpZGUtbmF2LS1hbmltYXRhYmxlJyk7XG4gICAgdGhpcy5zaWRlTmF2RWwuY2xhc3NMaXN0LmFkZCgnc2lkZS1uYXYtLXZpc2libGUnKTtcbiAgICB0aGlzLnNpZGVOYXZFbC5hZGRFdmVudExpc3RlbmVyKCd0cmFuc2l0aW9uZW5kJywgdGhpcy5vblRyYW5zaXRpb25FbmQpO1xuICB9XG5cbiAgaGlkZVNpZGVOYXYgKCkge1xuICAgIHRoaXMuc2lkZU5hdkVsLmNsYXNzTGlzdC5hZGQoJ3NpZGUtbmF2LS1hbmltYXRhYmxlJyk7XG4gICAgdGhpcy5zaWRlTmF2RWwuY2xhc3NMaXN0LnJlbW92ZSgnc2lkZS1uYXYtLXZpc2libGUnKTtcbiAgICB0aGlzLnNpZGVOYXZFbC5hZGRFdmVudExpc3RlbmVyKCd0cmFuc2l0aW9uZW5kJywgdGhpcy5vblRyYW5zaXRpb25FbmQpO1xuICB9XG59XG5cbnZhciBuYXYgPSBuZXcgU2lkZU5hdigpO1xuXG4vLyBBcHBsaWNhdGlvbiBjb2RlIHN0YXJ0cyBoZXJlXG5cbmZ1bmN0aW9uIGluaXRpYWxpemVBcHBsaWNhdGlvbigpIHtcblxuICAvLyBzdGFydGluZyBwb2ludFxuICB2YXIgb3NsbyA9IHtsYXQ6NTkuOTEzODY4OCxsbmc6MTAuNzUyMjQ1Mzk5OTk5OTkzfTtcbiAgdmFyIGZpcnN0UmVxdWVzdCA9IHRydWU7XG4gIHZhciBpbmZvV2luZG93ID0gbmV3IGdvb2dsZS5tYXBzLkluZm9XaW5kb3coKTtcblxuICB2YXIgYm91bmRzO1xuXG4gIHZhciBmb3Vyc3F1YXJlID0ge1xuICAgIHZlbnVlczogJ2h0dHBzOi8vYXBpLmZvdXJzcXVhcmUuY29tL3YyL3ZlbnVlcy8nLFxuICAgIGV4cGxvcmU6ICdleHBsb3JlPycsXG4gICAgc2VhcmNoOiAnc2VhcmNoPycsXG4gICAgY3JlZGVudGlhbHM6ICdjbGllbnRfaWQ9WTBERVowMDVDRFQxWTJGQkdHWFY0S1dZT0VQTFdBS0ZYVFhDMFVYTE5BRkhURkFZJmNsaWVudF9zZWNyZXQ9R0VBMzJVVk4zQ1VOMElITkNUU0ZVMVNPQUJCMFdUNEhIMlUyV1lSUjNaTFg0SlgyJyxcbiAgICB2ZXJzaW9uOiAnJnY9MjAxMzA4MTUnXG5cbiAgfTtcblxuXG4gIC8vIFVzZXMgdGhlIGZvdXJzcXVhcmUgYXBpIHRvIGZpbmQgcG9wdWxhciBzcG90cyBhcm91bmQgYSBwcm92aWRlZCBjZW50ZXJcbiAgLy8gQHBhcmFtZXRlcjogY2VudGVyLCB7bGF0OiBOdW1iZXIsIGxuZzogTnVtYmVyfVxuICAvLyBAcGFyYW1ldGVyOiBjYWxsYmFjayBmdW5jdGlvbiB0aGF0IHJlY2VpdmVzIGFuIGFycmF5IG9mIHBvcHVsYXIgc3BvdHNcbiAgdmFyIGdldFBvcHVsYXJTcG90cyA9IGZ1bmN0aW9uIChjZW50ZXIsIGNhbGxiYWNrKSB7XG5cbiAgICAvLyBpZiAoZmlyc3RSZXF1ZXN0KSB7XG4gICAgLy8gICB2YXIgY29vcmRpbmF0ZXMgPSAnJmxsPScgKyBjZW50ZXIubGF0ICsgJywnICsgY2VudGVyLmxuZztcbiAgICAvLyAgIGZpcnN0UmVxdWVzdCA9IGZhbHNlO1xuICAgIC8vIH1cbiAgICB2YXIgY29vcmRpbmF0ZXMgPSAnJmxsPScgKyBjZW50ZXIubGF0ICsgJywnICsgY2VudGVyLmxuZztcbiAgICB2YXIgcXVlcnkgPSAnJnF1ZXJ5PVBvcHVsYXIgd2l0aCB2aXNpdG9ycyc7XG5cbiAgICAgdmFyIHJlcXVlc3QgPSBuZXcgWE1MSHR0cFJlcXVlc3QoKTtcbiAgICAgcmVxdWVzdC5vcGVuKFxuICAgICAgICdHRVQnLFxuICAgICAgIGZvdXJzcXVhcmUudmVudWVzICtcbiAgICAgICBmb3Vyc3F1YXJlLmV4cGxvcmUgK1xuICAgICAgIGZvdXJzcXVhcmUuY3JlZGVudGlhbHMgK1xuICAgICAgIGZvdXJzcXVhcmUudmVyc2lvbiArXG4gICAgICAgY29vcmRpbmF0ZXMgKyBxdWVyeSxcbiAgICAgICB0cnVlXG4gICAgICk7XG5cbiAgICAgcmVxdWVzdC5vbnJlYWR5c3RhdGVjaGFuZ2UgPSBmdW5jdGlvbigpIHtcbiAgICAgICBpZiAoIHJlcXVlc3QucmVhZHlTdGF0ZSAhPSA0ICB8fCByZXF1ZXN0LnN0YXR1cyAhPSAyMDAgKSB7XG4gICAgICAgICByZXR1cm47XG4gICAgICAgfVxuICAgICAgIHZhciBhbnN3ZXIgPSBKU09OLnBhcnNlKHJlcXVlc3QucmVzcG9uc2VUZXh0KTtcbiAgICAgICB2YXIgaXRlbXMgPSBhbnN3ZXIucmVzcG9uc2UuZ3JvdXBzWzBdLml0ZW1zO1xuICAgICAgIGNhbGxiYWNrKGl0ZW1zKTtcbiAgICAgfTtcblxuICAgICByZXF1ZXN0LnNlbmQoJycpO1xuICB9XG5cblxuICAvLyBVc2VzIHRoZSBmb3Vyc3F1YXJlIGFwaSB0byBnZXQgZGV0YWlscyBvZiBhIHByb3ZpZGVkIHZlbnVlXG4gIC8vIEBwYXJhbWV0ZXI6IHZlbnVlSWQsXG4gIC8vIEBwYXJhbWV0ZXI6IGNhbGxiYWNrIGZ1bmN0aW9uIHRoYXQgcmVjZWl2ZXMgYSB2ZW51ZSBvYmplY3QgdG8gcHJvY2Vzc1xuICB2YXIgZ2V0VmVudWVEZXRhaWxzID0gZnVuY3Rpb24gKHZlbnVlSWQsIGNhbGxiYWNrKSB7XG5cbiAgICB2YXIgcmVxdWVzdCA9IG5ldyBYTUxIdHRwUmVxdWVzdCgpO1xuICAgIHJlcXVlc3Qub3BlbihcbiAgICAgICdHRVQnLFxuICAgICAgZm91cnNxdWFyZS52ZW51ZXMgK1xuICAgICAgdmVudWVJZCArXG4gICAgICAnPycgK1xuICAgICAgZm91cnNxdWFyZS5jcmVkZW50aWFscyArXG4gICAgICBmb3Vyc3F1YXJlLnZlcnNpb24sXG4gICAgICB0cnVlXG4gICAgKTtcblxuICAgIHJlcXVlc3Qub25yZWFkeXN0YXRlY2hhbmdlID0gZnVuY3Rpb24oKSB7XG4gICAgICBpZiAoIHJlcXVlc3QucmVhZHlTdGF0ZSAhPSA0ICB8fCByZXF1ZXN0LnN0YXR1cyAhPSAyMDAgKSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cbiAgICAgIHZhciB2ZW51ZSA9IEpTT04ucGFyc2UocmVxdWVzdC5yZXNwb25zZVRleHQpO1xuICAgICAgY2FsbGJhY2sodmVudWUpO1xuICAgIH07XG5cbiAgICByZXF1ZXN0LnNlbmQoJycpO1xuXG4gIH1cblxuICB2YXIgY29uc3RydWN0UGhvdG9zQXJyYXkgPSBmdW5jdGlvbiAodmVudWUpIHtcbiAgICB2ZW51ZS5waG90b1VybHMgPSB2ZW51ZS5waG90b3MuZ3JvdXBzWzBdLml0ZW1zLm1hcChmdW5jdGlvbiAoaXRlbSkge1xuICAgICAgcmV0dXJuIGl0ZW0ucHJlZml4ICsgJ29yaWdpbmFsJyArIGl0ZW0uc3VmZml4O1xuICAgIH0pO1xuICB9O1xuXG4gIHZhciBjb25zdHJ1Y3RCZXN0UGhvdG8gPSBmdW5jdGlvbiAodmVudWUpIHtcbiAgICB2ZW51ZS5iZXN0UGhvdG9VcmwgPSB2ZW51ZS5iZXN0UGhvdG8ucHJlZml4ICsgJ29yaWdpbmFsJyArIHZlbnVlLmJlc3RQaG90by5zdWZmaXg7XG4gIH07XG5cbiAgdmFyIGhleU5ld1BsYWNlID0gZnVuY3Rpb24gKHBsYWNlKSB7XG4gICAgYm91bmRzID0gbmV3IGdvb2dsZS5tYXBzLkxhdExuZ0JvdW5kcygpO1xuICAgIHZhciBpbmRleCA9IDA7XG4gICAgZ2V0UG9wdWxhclNwb3RzKHBsYWNlLCBmdW5jdGlvbiAoaXRlbXMpIHtcbiAgICAgIGl0ZW1zLmZvckVhY2goZnVuY3Rpb24gKGl0ZW0pIHtcbiAgICAgICAgZ2V0VmVudWVEZXRhaWxzKGl0ZW0udmVudWUuaWQsIGZ1bmN0aW9uIChyZXNwb25zZU9iamVjdCkge1xuICAgICAgICAgIHZhciB2ZW51ZSA9IHJlc3BvbnNlT2JqZWN0LnJlc3BvbnNlLnZlbnVlO1xuXG4gICAgICAgICAgdmFyIHBvc2l0aW9uID0ge1xuICAgICAgICAgICAgbGF0OiB2ZW51ZS5sb2NhdGlvbi5sYXQsXG4gICAgICAgICAgICBsbmc6IHZlbnVlLmxvY2F0aW9uLmxuZyxcbiAgICAgICAgICB9O1xuXG4gICAgICAgICAgdmFyIG1hcmtlciA9IG5ldyBnb29nbGUubWFwcy5NYXJrZXIoe1xuICAgICAgICAgICAgbWFwOiBtYXAsXG4gICAgICAgICAgICB0aXRsZTogdmVudWUubmFtZSxcbiAgICAgICAgICAgIHBvc2l0aW9uOiBwb3NpdGlvblxuICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgbWFya2VyLmFkZExpc3RlbmVyKCAnY2xpY2snLCBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgIHNob3dJbmZvKHZlbnVlLCBpbmZvV2luZG93KTtcbiAgICAgICAgICB9ICk7XG5cbiAgICAgICAgICB2ZW51ZS5tYXJrZXIgPSBtYXJrZXI7XG4gICAgICAgICAgdmVudWUuaW5kZXggPSBpbmRleCsrO1xuICAgICAgICAgIGNvbnN0cnVjdFBob3Rvc0FycmF5KHZlbnVlKTtcbiAgICAgICAgICBjb25zb2xlLmxvZyh2ZW51ZSk7XG4gICAgICAgICAgY2l0eUV4cGxvcmVyLmFkZFZlbnVlKHZlbnVlKTtcblxuXG4gICAgICAgICAgYm91bmRzLmV4dGVuZChuZXcgZ29vZ2xlLm1hcHMuTGF0TG5nKHBvc2l0aW9uKSk7XG4gICAgICAgICAgbWFwLmZpdEJvdW5kcyhib3VuZHMpO1xuXG4gICAgICAgIH0pO1xuICAgICAgfSk7XG4gICAgfSk7XG4gIH07XG5cbiAgdmFyIHNob3dJbmZvID0gZnVuY3Rpb24gKHZlbnVlLCBpbmZvd2luZG93KSB7XG4gICAgLy8gQ2hlY2sgdG8gbWFrZSBzdXJlIHRoZSBpbmZvd2luZG93IGlzIG5vdCBhbHJlYWR5IG9wZW5lZCBvbiB0aGlzIG1hcmtlci5cbiAgICBpZiAoaW5mb3dpbmRvdy5tYXJrZXIgIT0gdmVudWUubWFya2VyKSB7XG5cbiAgICAgIHZhciBjb250ZW50ID0gJzxkaXYgaWQ9XCJjb250ZW50XCIgY2xhc3M9XCJjb250ZW50XCI+J1xuICAgICAgICAgICsgJzxoMSBjbGFzcz1cImNvbnRlbnRfX2hlYWRpbmdcIiBkYXRhLWJpbmQ9XCJ0ZXh0OiB2ZW51ZUxpc3QoKVsnICsgdmVudWUuaW5kZXggKyAnXS5uYW1lXCI+PC9oMT4nXG4gICAgICAgICAgKyAnPGRpdiBjbGFzcz1cImltYWdlLXNsaWRlclwiIGRhdGEtYmluZD1cImZvcmVhY2g6IHZlbnVlTGlzdCgpWycgKyB2ZW51ZS5pbmRleCArICddLnBob3RvVXJsc1wiPidcbiAgICAgICAgICArICAgICc8ZGl2IGNsYXNzPVwiaW1hZ2Utc2xpZGVyX19pbWFnZS1jb250YWluZXJcIj4nXG4gICAgICAgICAgKyAgICAgICc8aW1nIHN0eWxlPVwibWF4LXdpZHRoOjMwMHB4O21heC1oZWlnaHQ6MjAwcHhcIiBjbGFzcz1cImltYWdlLXNsaWRlcl9faW1hZ2VcIiBkYXRhLWJpbmQ9XCJhdHRyOiB7c3JjOiAkZGF0YX1cIiBhbHQ9XCJcIj4nXG4gICAgICAgICAgKyAgICAnPC9kaXY+J1xuICAgICAgICAgICsgICc8L2Rpdj4nXG5cbiAgICAgICAgICArICc8L2Rpdj4nO1xuXG5cbiAgICAgIGluZm93aW5kb3cubWFya2VyID0gdmVudWUubWFya2VyO1xuICAgICAgaW5mb3dpbmRvdy5zZXRDb250ZW50KGNvbnRlbnQpO1xuICAgICAgaW5mb3dpbmRvdy5vcGVuKG1hcCwgdmVudWUubWFya2VyKTtcblxuICAgICAgLy8gTmVlZCB0byBhcHBseSBiaW5kaW5ncyBiZWNhdXNlIHRoZSBjb250ZW50IGdldHMgcmVtb3ZlZCBhbmQgYWRkZWRcbiAgICAgIC8vIHRvIHRoZSBET00gZWFjaCB0aW1lXG4gICAgICBrby5hcHBseUJpbmRpbmdzKGNpdHlFeHBsb3JlciwgZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ2NvbnRlbnQnKSk7XG4gICAgfVxuICB9XG5cbiAgLy8gQ3JlYXRlIGEgbWFwIGFuZCBjZW50ZXIgaXQgaW4gb3Nsb1xuICB2YXIgbWFwID0gbmV3IGdvb2dsZS5tYXBzLk1hcChkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnbWFwJyksIHtcbiAgICBjZW50ZXI6IG9zbG8sXG4gICAgem9vbTogMTUsXG4gICAgZnVsbHNjcmVlbkNvbnRyb2w6IHRydWVcbiAgfSk7XG5cbiAgLy8gQ3JlYXRlIHRoZSBzZWFyY2ggYm94IGFuZCBsaW5rIGl0IHRvIHRoZSBVSSBlbGVtZW50LlxuICB2YXIgaW5wdXQgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgncGFjLWlucHV0Jyk7XG4gIHZhciBzZWFyY2hCb3ggPSBuZXcgZ29vZ2xlLm1hcHMucGxhY2VzLlNlYXJjaEJveChpbnB1dCk7XG5cbiAgLy8gQmlhcyB0aGUgU2VhcmNoQm94IHJlc3VsdHMgdG93YXJkcyBjdXJyZW50IG1hcCdzIHZpZXdwb3J0LlxuICBtYXAuYWRkTGlzdGVuZXIoJ2JvdW5kc19jaGFuZ2VkJywgZnVuY3Rpb24oKSB7XG4gICAgc2VhcmNoQm94LnNldEJvdW5kcyhtYXAuZ2V0Qm91bmRzKCkpO1xuICB9KTtcblxuICAvLyBXaGVuIHRoZSB1c2VyIHNlbGVjdHMgYSBzZWFyY2ggb3B0aW9uXG4gIHNlYXJjaEJveC5hZGRMaXN0ZW5lcigncGxhY2VzX2NoYW5nZWQnLCBmdW5jdGlvbigpIHtcbiAgICB2YXIgcGxhY2VzID0gc2VhcmNoQm94LmdldFBsYWNlcygpO1xuXG4gICAgaWYgKHBsYWNlcy5sZW5ndGggPT09IDApIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICAvLyBjYWxjdWxhdGUgZGlzdGFuY2VcbiAgICB2YXIgZGlzdGFuY2UgPVxuICAgIGdvb2dsZS5tYXBzLmdlb21ldHJ5LnNwaGVyaWNhbC5cbiAgICBjb21wdXRlRGlzdGFuY2VCZXR3ZWVuKHBsYWNlc1swXS5nZW9tZXRyeS5sb2NhdGlvbiwgbWFwLmdldENlbnRlcigpKTtcblxuICAgIC8vIENvbnZlcnQgdG8gYSBMYXRMbmcgbGl0ZXJhbCBvYmplY3RcbiAgICB2YXIgbmV3Q2VudGVyID0gSlNPTi5zdHJpbmdpZnkocGxhY2VzWzBdLmdlb21ldHJ5LmxvY2F0aW9uKTtcbiAgICB2YXIgbmV3Q2l0eSA9IEpTT04ucGFyc2UobmV3Q2VudGVyKTtcblxuICAgIC8vIElmIHVzZXIgY2hvc2UgYSBwbGFjZSBmYXIgYXdheVxuICAgIC8vIHRoZXkgcHJvYmFibHkgd2FudCB0byBleHBsb3JlIGFub3RoZXIgY2l0eVxuICAgIGlmIChkaXN0YW5jZSA+IDYwMDApIHtcbiAgICAgIGNpdHlFeHBsb3Jlci5yZW1vdmVBbGxWZW51ZXMoKTtcbiAgICAgIGhleU5ld1BsYWNlKG5ld0NpdHkpO1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICB9KTtcblxuXG4gIHZhciBWaWV3TW9kZWwgPSBmdW5jdGlvbiAoKSB7XG4gICAgdGhpcy52ZW51ZUxpc3QgPSBrby5vYnNlcnZhYmxlQXJyYXkoKTtcblxuICAgIHRoaXMuYWRkVmVudWUgPSB0aGlzLmFkZFZlbnVlLmJpbmQodGhpcyk7XG4gICAgdGhpcy5yZW1vdmVBbGxWZW51ZXMgPSB0aGlzLnJlbW92ZUFsbFZlbnVlcy5iaW5kKHRoaXMpO1xuICAgIHRoaXMuY2FsbFNob3dJbmZvID0gdGhpcy5jYWxsU2hvd0luZm8uYmluZCh0aGlzKTtcbiAgfVxuXG4gIFZpZXdNb2RlbC5wcm90b3R5cGUuYWRkVmVudWUgPSBmdW5jdGlvbiAodmVudWUpIHtcbiAgICB0aGlzLnZlbnVlTGlzdC5wdXNoKHZlbnVlKTtcbiAgfVxuICBWaWV3TW9kZWwucHJvdG90eXBlLnJlbW92ZUFsbFZlbnVlcyA9IGZ1bmN0aW9uICgpIHtcbiAgICB0aGlzLnZlbnVlTGlzdCgpLmZvckVhY2goZnVuY3Rpb24gKHZlbnVlKSB7XG4gICAgICB2ZW51ZS5tYXJrZXIuc2V0TWFwKG51bGwpO1xuICAgIH0pO1xuICAgIHRoaXMudmVudWVMaXN0LnJlbW92ZUFsbCgpO1xuICB9XG4gIFZpZXdNb2RlbC5wcm90b3R5cGUuY2FsbFNob3dJbmZvID0gZnVuY3Rpb24gKHZlbnVlKSB7XG4gICAgc2hvd0luZm8odmVudWUsIGluZm9XaW5kb3cpO1xuICAgIG5hdi5oaWRlU2lkZU5hdigpO1xuICB9XG5cbiAgdmFyIGNpdHlFeHBsb3JlciA9ICBuZXcgVmlld01vZGVsKCk7XG5cbiAga28uYXBwbHlCaW5kaW5ncyhjaXR5RXhwbG9yZXIpO1xuICBoZXlOZXdQbGFjZShvc2xvKTtcbn1cbiIsIi8qIVxuICogS25vY2tvdXQgSmF2YVNjcmlwdCBsaWJyYXJ5IHYzLjQuMFxuICogKGMpIFN0ZXZlbiBTYW5kZXJzb24gLSBodHRwOi8va25vY2tvdXRqcy5jb20vXG4gKiBMaWNlbnNlOiBNSVQgKGh0dHA6Ly93d3cub3BlbnNvdXJjZS5vcmcvbGljZW5zZXMvbWl0LWxpY2Vuc2UucGhwKVxuICovXG5cbihmdW5jdGlvbigpe1xudmFyIERFQlVHPXRydWU7XG4oZnVuY3Rpb24odW5kZWZpbmVkKXtcbiAgICAvLyAoMCwgZXZhbCkoJ3RoaXMnKSBpcyBhIHJvYnVzdCB3YXkgb2YgZ2V0dGluZyBhIHJlZmVyZW5jZSB0byB0aGUgZ2xvYmFsIG9iamVjdFxuICAgIC8vIEZvciBkZXRhaWxzLCBzZWUgaHR0cDovL3N0YWNrb3ZlcmZsb3cuY29tL3F1ZXN0aW9ucy8xNDExOTk4OC9yZXR1cm4tdGhpcy0wLWV2YWx0aGlzLzE0MTIwMDIzIzE0MTIwMDIzXG4gICAgdmFyIHdpbmRvdyA9IHRoaXMgfHwgKDAsIGV2YWwpKCd0aGlzJyksXG4gICAgICAgIGRvY3VtZW50ID0gd2luZG93Wydkb2N1bWVudCddLFxuICAgICAgICBuYXZpZ2F0b3IgPSB3aW5kb3dbJ25hdmlnYXRvciddLFxuICAgICAgICBqUXVlcnlJbnN0YW5jZSA9IHdpbmRvd1tcImpRdWVyeVwiXSxcbiAgICAgICAgSlNPTiA9IHdpbmRvd1tcIkpTT05cIl07XG4oZnVuY3Rpb24oZmFjdG9yeSkge1xuICAgIC8vIFN1cHBvcnQgdGhyZWUgbW9kdWxlIGxvYWRpbmcgc2NlbmFyaW9zXG4gICAgaWYgKHR5cGVvZiBkZWZpbmUgPT09ICdmdW5jdGlvbicgJiYgZGVmaW5lWydhbWQnXSkge1xuICAgICAgICAvLyBbMV0gQU1EIGFub255bW91cyBtb2R1bGVcbiAgICAgICAgZGVmaW5lKFsnZXhwb3J0cycsICdyZXF1aXJlJ10sIGZhY3RvcnkpO1xuICAgIH0gZWxzZSBpZiAodHlwZW9mIGV4cG9ydHMgPT09ICdvYmplY3QnICYmIHR5cGVvZiBtb2R1bGUgPT09ICdvYmplY3QnKSB7XG4gICAgICAgIC8vIFsyXSBDb21tb25KUy9Ob2RlLmpzXG4gICAgICAgIGZhY3RvcnkobW9kdWxlWydleHBvcnRzJ10gfHwgZXhwb3J0cyk7ICAvLyBtb2R1bGUuZXhwb3J0cyBpcyBmb3IgTm9kZS5qc1xuICAgIH0gZWxzZSB7XG4gICAgICAgIC8vIFszXSBObyBtb2R1bGUgbG9hZGVyIChwbGFpbiA8c2NyaXB0PiB0YWcpIC0gcHV0IGRpcmVjdGx5IGluIGdsb2JhbCBuYW1lc3BhY2VcbiAgICAgICAgZmFjdG9yeSh3aW5kb3dbJ2tvJ10gPSB7fSk7XG4gICAgfVxufShmdW5jdGlvbihrb0V4cG9ydHMsIGFtZFJlcXVpcmUpe1xuLy8gSW50ZXJuYWxseSwgYWxsIEtPIG9iamVjdHMgYXJlIGF0dGFjaGVkIHRvIGtvRXhwb3J0cyAoZXZlbiB0aGUgbm9uLWV4cG9ydGVkIG9uZXMgd2hvc2UgbmFtZXMgd2lsbCBiZSBtaW5pZmllZCBieSB0aGUgY2xvc3VyZSBjb21waWxlcikuXG4vLyBJbiB0aGUgZnV0dXJlLCB0aGUgZm9sbG93aW5nIFwia29cIiB2YXJpYWJsZSBtYXkgYmUgbWFkZSBkaXN0aW5jdCBmcm9tIFwia29FeHBvcnRzXCIgc28gdGhhdCBwcml2YXRlIG9iamVjdHMgYXJlIG5vdCBleHRlcm5hbGx5IHJlYWNoYWJsZS5cbnZhciBrbyA9IHR5cGVvZiBrb0V4cG9ydHMgIT09ICd1bmRlZmluZWQnID8ga29FeHBvcnRzIDoge307XG4vLyBHb29nbGUgQ2xvc3VyZSBDb21waWxlciBoZWxwZXJzICh1c2VkIG9ubHkgdG8gbWFrZSB0aGUgbWluaWZpZWQgZmlsZSBzbWFsbGVyKVxua28uZXhwb3J0U3ltYm9sID0gZnVuY3Rpb24oa29QYXRoLCBvYmplY3QpIHtcbiAgICB2YXIgdG9rZW5zID0ga29QYXRoLnNwbGl0KFwiLlwiKTtcblxuICAgIC8vIEluIHRoZSBmdXR1cmUsIFwia29cIiBtYXkgYmVjb21lIGRpc3RpbmN0IGZyb20gXCJrb0V4cG9ydHNcIiAoc28gdGhhdCBub24tZXhwb3J0ZWQgb2JqZWN0cyBhcmUgbm90IHJlYWNoYWJsZSlcbiAgICAvLyBBdCB0aGF0IHBvaW50LCBcInRhcmdldFwiIHdvdWxkIGJlIHNldCB0bzogKHR5cGVvZiBrb0V4cG9ydHMgIT09IFwidW5kZWZpbmVkXCIgPyBrb0V4cG9ydHMgOiBrbylcbiAgICB2YXIgdGFyZ2V0ID0ga287XG5cbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IHRva2Vucy5sZW5ndGggLSAxOyBpKyspXG4gICAgICAgIHRhcmdldCA9IHRhcmdldFt0b2tlbnNbaV1dO1xuICAgIHRhcmdldFt0b2tlbnNbdG9rZW5zLmxlbmd0aCAtIDFdXSA9IG9iamVjdDtcbn07XG5rby5leHBvcnRQcm9wZXJ0eSA9IGZ1bmN0aW9uKG93bmVyLCBwdWJsaWNOYW1lLCBvYmplY3QpIHtcbiAgICBvd25lcltwdWJsaWNOYW1lXSA9IG9iamVjdDtcbn07XG5rby52ZXJzaW9uID0gXCIzLjQuMFwiO1xuXG5rby5leHBvcnRTeW1ib2woJ3ZlcnNpb24nLCBrby52ZXJzaW9uKTtcbi8vIEZvciBhbnkgb3B0aW9ucyB0aGF0IG1heSBhZmZlY3QgdmFyaW91cyBhcmVhcyBvZiBLbm9ja291dCBhbmQgYXJlbid0IGRpcmVjdGx5IGFzc29jaWF0ZWQgd2l0aCBkYXRhIGJpbmRpbmcuXG5rby5vcHRpb25zID0ge1xuICAgICdkZWZlclVwZGF0ZXMnOiBmYWxzZSxcbiAgICAndXNlT25seU5hdGl2ZUV2ZW50cyc6IGZhbHNlXG59O1xuXG4vL2tvLmV4cG9ydFN5bWJvbCgnb3B0aW9ucycsIGtvLm9wdGlvbnMpOyAgIC8vICdvcHRpb25zJyBpc24ndCBtaW5pZmllZFxua28udXRpbHMgPSAoZnVuY3Rpb24gKCkge1xuICAgIGZ1bmN0aW9uIG9iamVjdEZvckVhY2gob2JqLCBhY3Rpb24pIHtcbiAgICAgICAgZm9yICh2YXIgcHJvcCBpbiBvYmopIHtcbiAgICAgICAgICAgIGlmIChvYmouaGFzT3duUHJvcGVydHkocHJvcCkpIHtcbiAgICAgICAgICAgICAgICBhY3Rpb24ocHJvcCwgb2JqW3Byb3BdKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cblxuICAgIGZ1bmN0aW9uIGV4dGVuZCh0YXJnZXQsIHNvdXJjZSkge1xuICAgICAgICBpZiAoc291cmNlKSB7XG4gICAgICAgICAgICBmb3IodmFyIHByb3AgaW4gc291cmNlKSB7XG4gICAgICAgICAgICAgICAgaWYoc291cmNlLmhhc093blByb3BlcnR5KHByb3ApKSB7XG4gICAgICAgICAgICAgICAgICAgIHRhcmdldFtwcm9wXSA9IHNvdXJjZVtwcm9wXTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHRhcmdldDtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBzZXRQcm90b3R5cGVPZihvYmosIHByb3RvKSB7XG4gICAgICAgIG9iai5fX3Byb3RvX18gPSBwcm90bztcbiAgICAgICAgcmV0dXJuIG9iajtcbiAgICB9XG5cbiAgICB2YXIgY2FuU2V0UHJvdG90eXBlID0gKHsgX19wcm90b19fOiBbXSB9IGluc3RhbmNlb2YgQXJyYXkpO1xuICAgIHZhciBjYW5Vc2VTeW1ib2xzID0gIURFQlVHICYmIHR5cGVvZiBTeW1ib2wgPT09ICdmdW5jdGlvbic7XG5cbiAgICAvLyBSZXByZXNlbnQgdGhlIGtub3duIGV2ZW50IHR5cGVzIGluIGEgY29tcGFjdCB3YXksIHRoZW4gYXQgcnVudGltZSB0cmFuc2Zvcm0gaXQgaW50byBhIGhhc2ggd2l0aCBldmVudCBuYW1lIGFzIGtleSAoZm9yIGZhc3QgbG9va3VwKVxuICAgIHZhciBrbm93bkV2ZW50cyA9IHt9LCBrbm93bkV2ZW50VHlwZXNCeUV2ZW50TmFtZSA9IHt9O1xuICAgIHZhciBrZXlFdmVudFR5cGVOYW1lID0gKG5hdmlnYXRvciAmJiAvRmlyZWZveFxcLzIvaS50ZXN0KG5hdmlnYXRvci51c2VyQWdlbnQpKSA/ICdLZXlib2FyZEV2ZW50JyA6ICdVSUV2ZW50cyc7XG4gICAga25vd25FdmVudHNba2V5RXZlbnRUeXBlTmFtZV0gPSBbJ2tleXVwJywgJ2tleWRvd24nLCAna2V5cHJlc3MnXTtcbiAgICBrbm93bkV2ZW50c1snTW91c2VFdmVudHMnXSA9IFsnY2xpY2snLCAnZGJsY2xpY2snLCAnbW91c2Vkb3duJywgJ21vdXNldXAnLCAnbW91c2Vtb3ZlJywgJ21vdXNlb3ZlcicsICdtb3VzZW91dCcsICdtb3VzZWVudGVyJywgJ21vdXNlbGVhdmUnXTtcbiAgICBvYmplY3RGb3JFYWNoKGtub3duRXZlbnRzLCBmdW5jdGlvbihldmVudFR5cGUsIGtub3duRXZlbnRzRm9yVHlwZSkge1xuICAgICAgICBpZiAoa25vd25FdmVudHNGb3JUeXBlLmxlbmd0aCkge1xuICAgICAgICAgICAgZm9yICh2YXIgaSA9IDAsIGogPSBrbm93bkV2ZW50c0ZvclR5cGUubGVuZ3RoOyBpIDwgajsgaSsrKVxuICAgICAgICAgICAgICAgIGtub3duRXZlbnRUeXBlc0J5RXZlbnROYW1lW2tub3duRXZlbnRzRm9yVHlwZVtpXV0gPSBldmVudFR5cGU7XG4gICAgICAgIH1cbiAgICB9KTtcbiAgICB2YXIgZXZlbnRzVGhhdE11c3RCZVJlZ2lzdGVyZWRVc2luZ0F0dGFjaEV2ZW50ID0geyAncHJvcGVydHljaGFuZ2UnOiB0cnVlIH07IC8vIFdvcmthcm91bmQgZm9yIGFuIElFOSBpc3N1ZSAtIGh0dHBzOi8vZ2l0aHViLmNvbS9TdGV2ZVNhbmRlcnNvbi9rbm9ja291dC9pc3N1ZXMvNDA2XG5cbiAgICAvLyBEZXRlY3QgSUUgdmVyc2lvbnMgZm9yIGJ1ZyB3b3JrYXJvdW5kcyAodXNlcyBJRSBjb25kaXRpb25hbHMsIG5vdCBVQSBzdHJpbmcsIGZvciByb2J1c3RuZXNzKVxuICAgIC8vIE5vdGUgdGhhdCwgc2luY2UgSUUgMTAgZG9lcyBub3Qgc3VwcG9ydCBjb25kaXRpb25hbCBjb21tZW50cywgdGhlIGZvbGxvd2luZyBsb2dpYyBvbmx5IGRldGVjdHMgSUUgPCAxMC5cbiAgICAvLyBDdXJyZW50bHkgdGhpcyBpcyBieSBkZXNpZ24sIHNpbmNlIElFIDEwKyBiZWhhdmVzIGNvcnJlY3RseSB3aGVuIHRyZWF0ZWQgYXMgYSBzdGFuZGFyZCBicm93c2VyLlxuICAgIC8vIElmIHRoZXJlIGlzIGEgZnV0dXJlIG5lZWQgdG8gZGV0ZWN0IHNwZWNpZmljIHZlcnNpb25zIG9mIElFMTArLCB3ZSB3aWxsIGFtZW5kIHRoaXMuXG4gICAgdmFyIGllVmVyc2lvbiA9IGRvY3VtZW50ICYmIChmdW5jdGlvbigpIHtcbiAgICAgICAgdmFyIHZlcnNpb24gPSAzLCBkaXYgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKSwgaUVsZW1zID0gZGl2LmdldEVsZW1lbnRzQnlUYWdOYW1lKCdpJyk7XG5cbiAgICAgICAgLy8gS2VlcCBjb25zdHJ1Y3RpbmcgY29uZGl0aW9uYWwgSFRNTCBibG9ja3MgdW50aWwgd2UgaGl0IG9uZSB0aGF0IHJlc29sdmVzIHRvIGFuIGVtcHR5IGZyYWdtZW50XG4gICAgICAgIHdoaWxlIChcbiAgICAgICAgICAgIGRpdi5pbm5lckhUTUwgPSAnPCEtLVtpZiBndCBJRSAnICsgKCsrdmVyc2lvbikgKyAnXT48aT48L2k+PCFbZW5kaWZdLS0+JyxcbiAgICAgICAgICAgIGlFbGVtc1swXVxuICAgICAgICApIHt9XG4gICAgICAgIHJldHVybiB2ZXJzaW9uID4gNCA/IHZlcnNpb24gOiB1bmRlZmluZWQ7XG4gICAgfSgpKTtcbiAgICB2YXIgaXNJZTYgPSBpZVZlcnNpb24gPT09IDYsXG4gICAgICAgIGlzSWU3ID0gaWVWZXJzaW9uID09PSA3O1xuXG4gICAgZnVuY3Rpb24gaXNDbGlja09uQ2hlY2thYmxlRWxlbWVudChlbGVtZW50LCBldmVudFR5cGUpIHtcbiAgICAgICAgaWYgKChrby51dGlscy50YWdOYW1lTG93ZXIoZWxlbWVudCkgIT09IFwiaW5wdXRcIikgfHwgIWVsZW1lbnQudHlwZSkgcmV0dXJuIGZhbHNlO1xuICAgICAgICBpZiAoZXZlbnRUeXBlLnRvTG93ZXJDYXNlKCkgIT0gXCJjbGlja1wiKSByZXR1cm4gZmFsc2U7XG4gICAgICAgIHZhciBpbnB1dFR5cGUgPSBlbGVtZW50LnR5cGU7XG4gICAgICAgIHJldHVybiAoaW5wdXRUeXBlID09IFwiY2hlY2tib3hcIikgfHwgKGlucHV0VHlwZSA9PSBcInJhZGlvXCIpO1xuICAgIH1cblxuICAgIC8vIEZvciBkZXRhaWxzIG9uIHRoZSBwYXR0ZXJuIGZvciBjaGFuZ2luZyBub2RlIGNsYXNzZXNcbiAgICAvLyBzZWU6IGh0dHBzOi8vZ2l0aHViLmNvbS9rbm9ja291dC9rbm9ja291dC9pc3N1ZXMvMTU5N1xuICAgIHZhciBjc3NDbGFzc05hbWVSZWdleCA9IC9cXFMrL2c7XG5cbiAgICBmdW5jdGlvbiB0b2dnbGVEb21Ob2RlQ3NzQ2xhc3Mobm9kZSwgY2xhc3NOYW1lcywgc2hvdWxkSGF2ZUNsYXNzKSB7XG4gICAgICAgIHZhciBhZGRPclJlbW92ZUZuO1xuICAgICAgICBpZiAoY2xhc3NOYW1lcykge1xuICAgICAgICAgICAgaWYgKHR5cGVvZiBub2RlLmNsYXNzTGlzdCA9PT0gJ29iamVjdCcpIHtcbiAgICAgICAgICAgICAgICBhZGRPclJlbW92ZUZuID0gbm9kZS5jbGFzc0xpc3Rbc2hvdWxkSGF2ZUNsYXNzID8gJ2FkZCcgOiAncmVtb3ZlJ107XG4gICAgICAgICAgICAgICAga28udXRpbHMuYXJyYXlGb3JFYWNoKGNsYXNzTmFtZXMubWF0Y2goY3NzQ2xhc3NOYW1lUmVnZXgpLCBmdW5jdGlvbihjbGFzc05hbWUpIHtcbiAgICAgICAgICAgICAgICAgICAgYWRkT3JSZW1vdmVGbi5jYWxsKG5vZGUuY2xhc3NMaXN0LCBjbGFzc05hbWUpO1xuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfSBlbHNlIGlmICh0eXBlb2Ygbm9kZS5jbGFzc05hbWVbJ2Jhc2VWYWwnXSA9PT0gJ3N0cmluZycpIHtcbiAgICAgICAgICAgICAgICAvLyBTVkcgdGFnIC5jbGFzc05hbWVzIGlzIGFuIFNWR0FuaW1hdGVkU3RyaW5nIGluc3RhbmNlXG4gICAgICAgICAgICAgICAgdG9nZ2xlT2JqZWN0Q2xhc3NQcm9wZXJ0eVN0cmluZyhub2RlLmNsYXNzTmFtZSwgJ2Jhc2VWYWwnLCBjbGFzc05hbWVzLCBzaG91bGRIYXZlQ2xhc3MpO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAvLyBub2RlLmNsYXNzTmFtZSBvdWdodCB0byBiZSBhIHN0cmluZy5cbiAgICAgICAgICAgICAgICB0b2dnbGVPYmplY3RDbGFzc1Byb3BlcnR5U3RyaW5nKG5vZGUsICdjbGFzc05hbWUnLCBjbGFzc05hbWVzLCBzaG91bGRIYXZlQ2xhc3MpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gdG9nZ2xlT2JqZWN0Q2xhc3NQcm9wZXJ0eVN0cmluZyhvYmosIHByb3AsIGNsYXNzTmFtZXMsIHNob3VsZEhhdmVDbGFzcykge1xuICAgICAgICAvLyBvYmovcHJvcCBpcyBlaXRoZXIgYSBub2RlLydjbGFzc05hbWUnIG9yIGEgU1ZHQW5pbWF0ZWRTdHJpbmcvJ2Jhc2VWYWwnLlxuICAgICAgICB2YXIgY3VycmVudENsYXNzTmFtZXMgPSBvYmpbcHJvcF0ubWF0Y2goY3NzQ2xhc3NOYW1lUmVnZXgpIHx8IFtdO1xuICAgICAgICBrby51dGlscy5hcnJheUZvckVhY2goY2xhc3NOYW1lcy5tYXRjaChjc3NDbGFzc05hbWVSZWdleCksIGZ1bmN0aW9uKGNsYXNzTmFtZSkge1xuICAgICAgICAgICAga28udXRpbHMuYWRkT3JSZW1vdmVJdGVtKGN1cnJlbnRDbGFzc05hbWVzLCBjbGFzc05hbWUsIHNob3VsZEhhdmVDbGFzcyk7XG4gICAgICAgIH0pO1xuICAgICAgICBvYmpbcHJvcF0gPSBjdXJyZW50Q2xhc3NOYW1lcy5qb2luKFwiIFwiKTtcbiAgICB9XG5cbiAgICByZXR1cm4ge1xuICAgICAgICBmaWVsZHNJbmNsdWRlZFdpdGhKc29uUG9zdDogWydhdXRoZW50aWNpdHlfdG9rZW4nLCAvXl9fUmVxdWVzdFZlcmlmaWNhdGlvblRva2VuKF8uKik/JC9dLFxuXG4gICAgICAgIGFycmF5Rm9yRWFjaDogZnVuY3Rpb24gKGFycmF5LCBhY3Rpb24pIHtcbiAgICAgICAgICAgIGZvciAodmFyIGkgPSAwLCBqID0gYXJyYXkubGVuZ3RoOyBpIDwgajsgaSsrKVxuICAgICAgICAgICAgICAgIGFjdGlvbihhcnJheVtpXSwgaSk7XG4gICAgICAgIH0sXG5cbiAgICAgICAgYXJyYXlJbmRleE9mOiBmdW5jdGlvbiAoYXJyYXksIGl0ZW0pIHtcbiAgICAgICAgICAgIGlmICh0eXBlb2YgQXJyYXkucHJvdG90eXBlLmluZGV4T2YgPT0gXCJmdW5jdGlvblwiKVxuICAgICAgICAgICAgICAgIHJldHVybiBBcnJheS5wcm90b3R5cGUuaW5kZXhPZi5jYWxsKGFycmF5LCBpdGVtKTtcbiAgICAgICAgICAgIGZvciAodmFyIGkgPSAwLCBqID0gYXJyYXkubGVuZ3RoOyBpIDwgajsgaSsrKVxuICAgICAgICAgICAgICAgIGlmIChhcnJheVtpXSA9PT0gaXRlbSlcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGk7XG4gICAgICAgICAgICByZXR1cm4gLTE7XG4gICAgICAgIH0sXG5cbiAgICAgICAgYXJyYXlGaXJzdDogZnVuY3Rpb24gKGFycmF5LCBwcmVkaWNhdGUsIHByZWRpY2F0ZU93bmVyKSB7XG4gICAgICAgICAgICBmb3IgKHZhciBpID0gMCwgaiA9IGFycmF5Lmxlbmd0aDsgaSA8IGo7IGkrKylcbiAgICAgICAgICAgICAgICBpZiAocHJlZGljYXRlLmNhbGwocHJlZGljYXRlT3duZXIsIGFycmF5W2ldLCBpKSlcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGFycmF5W2ldO1xuICAgICAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICAgIH0sXG5cbiAgICAgICAgYXJyYXlSZW1vdmVJdGVtOiBmdW5jdGlvbiAoYXJyYXksIGl0ZW1Ub1JlbW92ZSkge1xuICAgICAgICAgICAgdmFyIGluZGV4ID0ga28udXRpbHMuYXJyYXlJbmRleE9mKGFycmF5LCBpdGVtVG9SZW1vdmUpO1xuICAgICAgICAgICAgaWYgKGluZGV4ID4gMCkge1xuICAgICAgICAgICAgICAgIGFycmF5LnNwbGljZShpbmRleCwgMSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIGlmIChpbmRleCA9PT0gMCkge1xuICAgICAgICAgICAgICAgIGFycmF5LnNoaWZ0KCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0sXG5cbiAgICAgICAgYXJyYXlHZXREaXN0aW5jdFZhbHVlczogZnVuY3Rpb24gKGFycmF5KSB7XG4gICAgICAgICAgICBhcnJheSA9IGFycmF5IHx8IFtdO1xuICAgICAgICAgICAgdmFyIHJlc3VsdCA9IFtdO1xuICAgICAgICAgICAgZm9yICh2YXIgaSA9IDAsIGogPSBhcnJheS5sZW5ndGg7IGkgPCBqOyBpKyspIHtcbiAgICAgICAgICAgICAgICBpZiAoa28udXRpbHMuYXJyYXlJbmRleE9mKHJlc3VsdCwgYXJyYXlbaV0pIDwgMClcbiAgICAgICAgICAgICAgICAgICAgcmVzdWx0LnB1c2goYXJyYXlbaV0pO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICAgICAgfSxcblxuICAgICAgICBhcnJheU1hcDogZnVuY3Rpb24gKGFycmF5LCBtYXBwaW5nKSB7XG4gICAgICAgICAgICBhcnJheSA9IGFycmF5IHx8IFtdO1xuICAgICAgICAgICAgdmFyIHJlc3VsdCA9IFtdO1xuICAgICAgICAgICAgZm9yICh2YXIgaSA9IDAsIGogPSBhcnJheS5sZW5ndGg7IGkgPCBqOyBpKyspXG4gICAgICAgICAgICAgICAgcmVzdWx0LnB1c2gobWFwcGluZyhhcnJheVtpXSwgaSkpO1xuICAgICAgICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICAgICAgfSxcblxuICAgICAgICBhcnJheUZpbHRlcjogZnVuY3Rpb24gKGFycmF5LCBwcmVkaWNhdGUpIHtcbiAgICAgICAgICAgIGFycmF5ID0gYXJyYXkgfHwgW107XG4gICAgICAgICAgICB2YXIgcmVzdWx0ID0gW107XG4gICAgICAgICAgICBmb3IgKHZhciBpID0gMCwgaiA9IGFycmF5Lmxlbmd0aDsgaSA8IGo7IGkrKylcbiAgICAgICAgICAgICAgICBpZiAocHJlZGljYXRlKGFycmF5W2ldLCBpKSlcbiAgICAgICAgICAgICAgICAgICAgcmVzdWx0LnB1c2goYXJyYXlbaV0pO1xuICAgICAgICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICAgICAgfSxcblxuICAgICAgICBhcnJheVB1c2hBbGw6IGZ1bmN0aW9uIChhcnJheSwgdmFsdWVzVG9QdXNoKSB7XG4gICAgICAgICAgICBpZiAodmFsdWVzVG9QdXNoIGluc3RhbmNlb2YgQXJyYXkpXG4gICAgICAgICAgICAgICAgYXJyYXkucHVzaC5hcHBseShhcnJheSwgdmFsdWVzVG9QdXNoKTtcbiAgICAgICAgICAgIGVsc2VcbiAgICAgICAgICAgICAgICBmb3IgKHZhciBpID0gMCwgaiA9IHZhbHVlc1RvUHVzaC5sZW5ndGg7IGkgPCBqOyBpKyspXG4gICAgICAgICAgICAgICAgICAgIGFycmF5LnB1c2godmFsdWVzVG9QdXNoW2ldKTtcbiAgICAgICAgICAgIHJldHVybiBhcnJheTtcbiAgICAgICAgfSxcblxuICAgICAgICBhZGRPclJlbW92ZUl0ZW06IGZ1bmN0aW9uKGFycmF5LCB2YWx1ZSwgaW5jbHVkZWQpIHtcbiAgICAgICAgICAgIHZhciBleGlzdGluZ0VudHJ5SW5kZXggPSBrby51dGlscy5hcnJheUluZGV4T2Yoa28udXRpbHMucGVla09ic2VydmFibGUoYXJyYXkpLCB2YWx1ZSk7XG4gICAgICAgICAgICBpZiAoZXhpc3RpbmdFbnRyeUluZGV4IDwgMCkge1xuICAgICAgICAgICAgICAgIGlmIChpbmNsdWRlZClcbiAgICAgICAgICAgICAgICAgICAgYXJyYXkucHVzaCh2YWx1ZSk7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIGlmICghaW5jbHVkZWQpXG4gICAgICAgICAgICAgICAgICAgIGFycmF5LnNwbGljZShleGlzdGluZ0VudHJ5SW5kZXgsIDEpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9LFxuXG4gICAgICAgIGNhblNldFByb3RvdHlwZTogY2FuU2V0UHJvdG90eXBlLFxuXG4gICAgICAgIGV4dGVuZDogZXh0ZW5kLFxuXG4gICAgICAgIHNldFByb3RvdHlwZU9mOiBzZXRQcm90b3R5cGVPZixcblxuICAgICAgICBzZXRQcm90b3R5cGVPZk9yRXh0ZW5kOiBjYW5TZXRQcm90b3R5cGUgPyBzZXRQcm90b3R5cGVPZiA6IGV4dGVuZCxcblxuICAgICAgICBvYmplY3RGb3JFYWNoOiBvYmplY3RGb3JFYWNoLFxuXG4gICAgICAgIG9iamVjdE1hcDogZnVuY3Rpb24oc291cmNlLCBtYXBwaW5nKSB7XG4gICAgICAgICAgICBpZiAoIXNvdXJjZSlcbiAgICAgICAgICAgICAgICByZXR1cm4gc291cmNlO1xuICAgICAgICAgICAgdmFyIHRhcmdldCA9IHt9O1xuICAgICAgICAgICAgZm9yICh2YXIgcHJvcCBpbiBzb3VyY2UpIHtcbiAgICAgICAgICAgICAgICBpZiAoc291cmNlLmhhc093blByb3BlcnR5KHByb3ApKSB7XG4gICAgICAgICAgICAgICAgICAgIHRhcmdldFtwcm9wXSA9IG1hcHBpbmcoc291cmNlW3Byb3BdLCBwcm9wLCBzb3VyY2UpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiB0YXJnZXQ7XG4gICAgICAgIH0sXG5cbiAgICAgICAgZW1wdHlEb21Ob2RlOiBmdW5jdGlvbiAoZG9tTm9kZSkge1xuICAgICAgICAgICAgd2hpbGUgKGRvbU5vZGUuZmlyc3RDaGlsZCkge1xuICAgICAgICAgICAgICAgIGtvLnJlbW92ZU5vZGUoZG9tTm9kZS5maXJzdENoaWxkKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSxcblxuICAgICAgICBtb3ZlQ2xlYW5lZE5vZGVzVG9Db250YWluZXJFbGVtZW50OiBmdW5jdGlvbihub2Rlcykge1xuICAgICAgICAgICAgLy8gRW5zdXJlIGl0J3MgYSByZWFsIGFycmF5LCBhcyB3ZSdyZSBhYm91dCB0byByZXBhcmVudCB0aGUgbm9kZXMgYW5kXG4gICAgICAgICAgICAvLyB3ZSBkb24ndCB3YW50IHRoZSB1bmRlcmx5aW5nIGNvbGxlY3Rpb24gdG8gY2hhbmdlIHdoaWxlIHdlJ3JlIGRvaW5nIHRoYXQuXG4gICAgICAgICAgICB2YXIgbm9kZXNBcnJheSA9IGtvLnV0aWxzLm1ha2VBcnJheShub2Rlcyk7XG4gICAgICAgICAgICB2YXIgdGVtcGxhdGVEb2N1bWVudCA9IChub2Rlc0FycmF5WzBdICYmIG5vZGVzQXJyYXlbMF0ub3duZXJEb2N1bWVudCkgfHwgZG9jdW1lbnQ7XG5cbiAgICAgICAgICAgIHZhciBjb250YWluZXIgPSB0ZW1wbGF0ZURvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpO1xuICAgICAgICAgICAgZm9yICh2YXIgaSA9IDAsIGogPSBub2Rlc0FycmF5Lmxlbmd0aDsgaSA8IGo7IGkrKykge1xuICAgICAgICAgICAgICAgIGNvbnRhaW5lci5hcHBlbmRDaGlsZChrby5jbGVhbk5vZGUobm9kZXNBcnJheVtpXSkpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIGNvbnRhaW5lcjtcbiAgICAgICAgfSxcblxuICAgICAgICBjbG9uZU5vZGVzOiBmdW5jdGlvbiAobm9kZXNBcnJheSwgc2hvdWxkQ2xlYW5Ob2Rlcykge1xuICAgICAgICAgICAgZm9yICh2YXIgaSA9IDAsIGogPSBub2Rlc0FycmF5Lmxlbmd0aCwgbmV3Tm9kZXNBcnJheSA9IFtdOyBpIDwgajsgaSsrKSB7XG4gICAgICAgICAgICAgICAgdmFyIGNsb25lZE5vZGUgPSBub2Rlc0FycmF5W2ldLmNsb25lTm9kZSh0cnVlKTtcbiAgICAgICAgICAgICAgICBuZXdOb2Rlc0FycmF5LnB1c2goc2hvdWxkQ2xlYW5Ob2RlcyA/IGtvLmNsZWFuTm9kZShjbG9uZWROb2RlKSA6IGNsb25lZE5vZGUpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIG5ld05vZGVzQXJyYXk7XG4gICAgICAgIH0sXG5cbiAgICAgICAgc2V0RG9tTm9kZUNoaWxkcmVuOiBmdW5jdGlvbiAoZG9tTm9kZSwgY2hpbGROb2Rlcykge1xuICAgICAgICAgICAga28udXRpbHMuZW1wdHlEb21Ob2RlKGRvbU5vZGUpO1xuICAgICAgICAgICAgaWYgKGNoaWxkTm9kZXMpIHtcbiAgICAgICAgICAgICAgICBmb3IgKHZhciBpID0gMCwgaiA9IGNoaWxkTm9kZXMubGVuZ3RoOyBpIDwgajsgaSsrKVxuICAgICAgICAgICAgICAgICAgICBkb21Ob2RlLmFwcGVuZENoaWxkKGNoaWxkTm9kZXNbaV0pO1xuICAgICAgICAgICAgfVxuICAgICAgICB9LFxuXG4gICAgICAgIHJlcGxhY2VEb21Ob2RlczogZnVuY3Rpb24gKG5vZGVUb1JlcGxhY2VPck5vZGVBcnJheSwgbmV3Tm9kZXNBcnJheSkge1xuICAgICAgICAgICAgdmFyIG5vZGVzVG9SZXBsYWNlQXJyYXkgPSBub2RlVG9SZXBsYWNlT3JOb2RlQXJyYXkubm9kZVR5cGUgPyBbbm9kZVRvUmVwbGFjZU9yTm9kZUFycmF5XSA6IG5vZGVUb1JlcGxhY2VPck5vZGVBcnJheTtcbiAgICAgICAgICAgIGlmIChub2Rlc1RvUmVwbGFjZUFycmF5Lmxlbmd0aCA+IDApIHtcbiAgICAgICAgICAgICAgICB2YXIgaW5zZXJ0aW9uUG9pbnQgPSBub2Rlc1RvUmVwbGFjZUFycmF5WzBdO1xuICAgICAgICAgICAgICAgIHZhciBwYXJlbnQgPSBpbnNlcnRpb25Qb2ludC5wYXJlbnROb2RlO1xuICAgICAgICAgICAgICAgIGZvciAodmFyIGkgPSAwLCBqID0gbmV3Tm9kZXNBcnJheS5sZW5ndGg7IGkgPCBqOyBpKyspXG4gICAgICAgICAgICAgICAgICAgIHBhcmVudC5pbnNlcnRCZWZvcmUobmV3Tm9kZXNBcnJheVtpXSwgaW5zZXJ0aW9uUG9pbnQpO1xuICAgICAgICAgICAgICAgIGZvciAodmFyIGkgPSAwLCBqID0gbm9kZXNUb1JlcGxhY2VBcnJheS5sZW5ndGg7IGkgPCBqOyBpKyspIHtcbiAgICAgICAgICAgICAgICAgICAga28ucmVtb3ZlTm9kZShub2Rlc1RvUmVwbGFjZUFycmF5W2ldKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH0sXG5cbiAgICAgICAgZml4VXBDb250aW51b3VzTm9kZUFycmF5OiBmdW5jdGlvbihjb250aW51b3VzTm9kZUFycmF5LCBwYXJlbnROb2RlKSB7XG4gICAgICAgICAgICAvLyBCZWZvcmUgYWN0aW5nIG9uIGEgc2V0IG9mIG5vZGVzIHRoYXQgd2VyZSBwcmV2aW91c2x5IG91dHB1dHRlZCBieSBhIHRlbXBsYXRlIGZ1bmN0aW9uLCB3ZSBoYXZlIHRvIHJlY29uY2lsZVxuICAgICAgICAgICAgLy8gdGhlbSBhZ2FpbnN0IHdoYXQgaXMgaW4gdGhlIERPTSByaWdodCBub3cuIEl0IG1heSBiZSB0aGF0IHNvbWUgb2YgdGhlIG5vZGVzIGhhdmUgYWxyZWFkeSBiZWVuIHJlbW92ZWQsIG9yIHRoYXRcbiAgICAgICAgICAgIC8vIG5ldyBub2RlcyBtaWdodCBoYXZlIGJlZW4gaW5zZXJ0ZWQgaW4gdGhlIG1pZGRsZSwgZm9yIGV4YW1wbGUgYnkgYSBiaW5kaW5nLiBBbHNvLCB0aGVyZSBtYXkgcHJldmlvdXNseSBoYXZlIGJlZW5cbiAgICAgICAgICAgIC8vIGxlYWRpbmcgY29tbWVudCBub2RlcyAoY3JlYXRlZCBieSByZXdyaXR0ZW4gc3RyaW5nLWJhc2VkIHRlbXBsYXRlcykgdGhhdCBoYXZlIHNpbmNlIGJlZW4gcmVtb3ZlZCBkdXJpbmcgYmluZGluZy5cbiAgICAgICAgICAgIC8vIFNvLCB0aGlzIGZ1bmN0aW9uIHRyYW5zbGF0ZXMgdGhlIG9sZCBcIm1hcFwiIG91dHB1dCBhcnJheSBpbnRvIGl0cyBiZXN0IGd1ZXNzIG9mIHRoZSBzZXQgb2YgY3VycmVudCBET00gbm9kZXMuXG4gICAgICAgICAgICAvL1xuICAgICAgICAgICAgLy8gUnVsZXM6XG4gICAgICAgICAgICAvLyAgIFtBXSBBbnkgbGVhZGluZyBub2RlcyB0aGF0IGhhdmUgYmVlbiByZW1vdmVkIHNob3VsZCBiZSBpZ25vcmVkXG4gICAgICAgICAgICAvLyAgICAgICBUaGVzZSBtb3N0IGxpa2VseSBjb3JyZXNwb25kIHRvIG1lbW9pemF0aW9uIG5vZGVzIHRoYXQgd2VyZSBhbHJlYWR5IHJlbW92ZWQgZHVyaW5nIGJpbmRpbmdcbiAgICAgICAgICAgIC8vICAgICAgIFNlZSBodHRwczovL2dpdGh1Yi5jb20va25vY2tvdXQva25vY2tvdXQvcHVsbC80NDBcbiAgICAgICAgICAgIC8vICAgW0JdIEFueSB0cmFpbGluZyBub2RlcyB0aGF0IGhhdmUgYmVlbiByZW1vdmUgc2hvdWxkIGJlIGlnbm9yZWRcbiAgICAgICAgICAgIC8vICAgICAgIFRoaXMgcHJldmVudHMgdGhlIGNvZGUgaGVyZSBmcm9tIGFkZGluZyB1bnJlbGF0ZWQgbm9kZXMgdG8gdGhlIGFycmF5IHdoaWxlIHByb2Nlc3NpbmcgcnVsZSBbQ11cbiAgICAgICAgICAgIC8vICAgICAgIFNlZSBodHRwczovL2dpdGh1Yi5jb20va25vY2tvdXQva25vY2tvdXQvcHVsbC8xOTAzXG4gICAgICAgICAgICAvLyAgIFtDXSBXZSB3YW50IHRvIG91dHB1dCBhIGNvbnRpbnVvdXMgc2VyaWVzIG9mIG5vZGVzLiBTbywgaWdub3JlIGFueSBub2RlcyB0aGF0IGhhdmUgYWxyZWFkeSBiZWVuIHJlbW92ZWQsXG4gICAgICAgICAgICAvLyAgICAgICBhbmQgaW5jbHVkZSBhbnkgbm9kZXMgdGhhdCBoYXZlIGJlZW4gaW5zZXJ0ZWQgYW1vbmcgdGhlIHByZXZpb3VzIGNvbGxlY3Rpb25cblxuICAgICAgICAgICAgaWYgKGNvbnRpbnVvdXNOb2RlQXJyYXkubGVuZ3RoKSB7XG4gICAgICAgICAgICAgICAgLy8gVGhlIHBhcmVudCBub2RlIGNhbiBiZSBhIHZpcnR1YWwgZWxlbWVudDsgc28gZ2V0IHRoZSByZWFsIHBhcmVudCBub2RlXG4gICAgICAgICAgICAgICAgcGFyZW50Tm9kZSA9IChwYXJlbnROb2RlLm5vZGVUeXBlID09PSA4ICYmIHBhcmVudE5vZGUucGFyZW50Tm9kZSkgfHwgcGFyZW50Tm9kZTtcblxuICAgICAgICAgICAgICAgIC8vIFJ1bGUgW0FdXG4gICAgICAgICAgICAgICAgd2hpbGUgKGNvbnRpbnVvdXNOb2RlQXJyYXkubGVuZ3RoICYmIGNvbnRpbnVvdXNOb2RlQXJyYXlbMF0ucGFyZW50Tm9kZSAhPT0gcGFyZW50Tm9kZSlcbiAgICAgICAgICAgICAgICAgICAgY29udGludW91c05vZGVBcnJheS5zcGxpY2UoMCwgMSk7XG5cbiAgICAgICAgICAgICAgICAvLyBSdWxlIFtCXVxuICAgICAgICAgICAgICAgIHdoaWxlIChjb250aW51b3VzTm9kZUFycmF5Lmxlbmd0aCA+IDEgJiYgY29udGludW91c05vZGVBcnJheVtjb250aW51b3VzTm9kZUFycmF5Lmxlbmd0aCAtIDFdLnBhcmVudE5vZGUgIT09IHBhcmVudE5vZGUpXG4gICAgICAgICAgICAgICAgICAgIGNvbnRpbnVvdXNOb2RlQXJyYXkubGVuZ3RoLS07XG5cbiAgICAgICAgICAgICAgICAvLyBSdWxlIFtDXVxuICAgICAgICAgICAgICAgIGlmIChjb250aW51b3VzTm9kZUFycmF5Lmxlbmd0aCA+IDEpIHtcbiAgICAgICAgICAgICAgICAgICAgdmFyIGN1cnJlbnQgPSBjb250aW51b3VzTm9kZUFycmF5WzBdLCBsYXN0ID0gY29udGludW91c05vZGVBcnJheVtjb250aW51b3VzTm9kZUFycmF5Lmxlbmd0aCAtIDFdO1xuICAgICAgICAgICAgICAgICAgICAvLyBSZXBsYWNlIHdpdGggdGhlIGFjdHVhbCBuZXcgY29udGludW91cyBub2RlIHNldFxuICAgICAgICAgICAgICAgICAgICBjb250aW51b3VzTm9kZUFycmF5Lmxlbmd0aCA9IDA7XG4gICAgICAgICAgICAgICAgICAgIHdoaWxlIChjdXJyZW50ICE9PSBsYXN0KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBjb250aW51b3VzTm9kZUFycmF5LnB1c2goY3VycmVudCk7XG4gICAgICAgICAgICAgICAgICAgICAgICBjdXJyZW50ID0gY3VycmVudC5uZXh0U2libGluZztcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBjb250aW51b3VzTm9kZUFycmF5LnB1c2gobGFzdCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIGNvbnRpbnVvdXNOb2RlQXJyYXk7XG4gICAgICAgIH0sXG5cbiAgICAgICAgc2V0T3B0aW9uTm9kZVNlbGVjdGlvblN0YXRlOiBmdW5jdGlvbiAob3B0aW9uTm9kZSwgaXNTZWxlY3RlZCkge1xuICAgICAgICAgICAgLy8gSUU2IHNvbWV0aW1lcyB0aHJvd3MgXCJ1bmtub3duIGVycm9yXCIgaWYgeW91IHRyeSB0byB3cml0ZSB0byAuc2VsZWN0ZWQgZGlyZWN0bHksIHdoZXJlYXMgRmlyZWZveCBzdHJ1Z2dsZXMgd2l0aCBzZXRBdHRyaWJ1dGUuIFBpY2sgb25lIGJhc2VkIG9uIGJyb3dzZXIuXG4gICAgICAgICAgICBpZiAoaWVWZXJzaW9uIDwgNylcbiAgICAgICAgICAgICAgICBvcHRpb25Ob2RlLnNldEF0dHJpYnV0ZShcInNlbGVjdGVkXCIsIGlzU2VsZWN0ZWQpO1xuICAgICAgICAgICAgZWxzZVxuICAgICAgICAgICAgICAgIG9wdGlvbk5vZGUuc2VsZWN0ZWQgPSBpc1NlbGVjdGVkO1xuICAgICAgICB9LFxuXG4gICAgICAgIHN0cmluZ1RyaW06IGZ1bmN0aW9uIChzdHJpbmcpIHtcbiAgICAgICAgICAgIHJldHVybiBzdHJpbmcgPT09IG51bGwgfHwgc3RyaW5nID09PSB1bmRlZmluZWQgPyAnJyA6XG4gICAgICAgICAgICAgICAgc3RyaW5nLnRyaW0gP1xuICAgICAgICAgICAgICAgICAgICBzdHJpbmcudHJpbSgpIDpcbiAgICAgICAgICAgICAgICAgICAgc3RyaW5nLnRvU3RyaW5nKCkucmVwbGFjZSgvXltcXHNcXHhhMF0rfFtcXHNcXHhhMF0rJC9nLCAnJyk7XG4gICAgICAgIH0sXG5cbiAgICAgICAgc3RyaW5nU3RhcnRzV2l0aDogZnVuY3Rpb24gKHN0cmluZywgc3RhcnRzV2l0aCkge1xuICAgICAgICAgICAgc3RyaW5nID0gc3RyaW5nIHx8IFwiXCI7XG4gICAgICAgICAgICBpZiAoc3RhcnRzV2l0aC5sZW5ndGggPiBzdHJpbmcubGVuZ3RoKVxuICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgICAgIHJldHVybiBzdHJpbmcuc3Vic3RyaW5nKDAsIHN0YXJ0c1dpdGgubGVuZ3RoKSA9PT0gc3RhcnRzV2l0aDtcbiAgICAgICAgfSxcblxuICAgICAgICBkb21Ob2RlSXNDb250YWluZWRCeTogZnVuY3Rpb24gKG5vZGUsIGNvbnRhaW5lZEJ5Tm9kZSkge1xuICAgICAgICAgICAgaWYgKG5vZGUgPT09IGNvbnRhaW5lZEJ5Tm9kZSlcbiAgICAgICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgICAgIGlmIChub2RlLm5vZGVUeXBlID09PSAxMSlcbiAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7IC8vIEZpeGVzIGlzc3VlICMxMTYyIC0gY2FuJ3QgdXNlIG5vZGUuY29udGFpbnMgZm9yIGRvY3VtZW50IGZyYWdtZW50cyBvbiBJRThcbiAgICAgICAgICAgIGlmIChjb250YWluZWRCeU5vZGUuY29udGFpbnMpXG4gICAgICAgICAgICAgICAgcmV0dXJuIGNvbnRhaW5lZEJ5Tm9kZS5jb250YWlucyhub2RlLm5vZGVUeXBlID09PSAzID8gbm9kZS5wYXJlbnROb2RlIDogbm9kZSk7XG4gICAgICAgICAgICBpZiAoY29udGFpbmVkQnlOb2RlLmNvbXBhcmVEb2N1bWVudFBvc2l0aW9uKVxuICAgICAgICAgICAgICAgIHJldHVybiAoY29udGFpbmVkQnlOb2RlLmNvbXBhcmVEb2N1bWVudFBvc2l0aW9uKG5vZGUpICYgMTYpID09IDE2O1xuICAgICAgICAgICAgd2hpbGUgKG5vZGUgJiYgbm9kZSAhPSBjb250YWluZWRCeU5vZGUpIHtcbiAgICAgICAgICAgICAgICBub2RlID0gbm9kZS5wYXJlbnROb2RlO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuICEhbm9kZTtcbiAgICAgICAgfSxcblxuICAgICAgICBkb21Ob2RlSXNBdHRhY2hlZFRvRG9jdW1lbnQ6IGZ1bmN0aW9uIChub2RlKSB7XG4gICAgICAgICAgICByZXR1cm4ga28udXRpbHMuZG9tTm9kZUlzQ29udGFpbmVkQnkobm9kZSwgbm9kZS5vd25lckRvY3VtZW50LmRvY3VtZW50RWxlbWVudCk7XG4gICAgICAgIH0sXG5cbiAgICAgICAgYW55RG9tTm9kZUlzQXR0YWNoZWRUb0RvY3VtZW50OiBmdW5jdGlvbihub2Rlcykge1xuICAgICAgICAgICAgcmV0dXJuICEha28udXRpbHMuYXJyYXlGaXJzdChub2Rlcywga28udXRpbHMuZG9tTm9kZUlzQXR0YWNoZWRUb0RvY3VtZW50KTtcbiAgICAgICAgfSxcblxuICAgICAgICB0YWdOYW1lTG93ZXI6IGZ1bmN0aW9uKGVsZW1lbnQpIHtcbiAgICAgICAgICAgIC8vIEZvciBIVE1MIGVsZW1lbnRzLCB0YWdOYW1lIHdpbGwgYWx3YXlzIGJlIHVwcGVyIGNhc2U7IGZvciBYSFRNTCBlbGVtZW50cywgaXQnbGwgYmUgbG93ZXIgY2FzZS5cbiAgICAgICAgICAgIC8vIFBvc3NpYmxlIGZ1dHVyZSBvcHRpbWl6YXRpb246IElmIHdlIGtub3cgaXQncyBhbiBlbGVtZW50IGZyb20gYW4gWEhUTUwgZG9jdW1lbnQgKG5vdCBIVE1MKSxcbiAgICAgICAgICAgIC8vIHdlIGRvbid0IG5lZWQgdG8gZG8gdGhlIC50b0xvd2VyQ2FzZSgpIGFzIGl0IHdpbGwgYWx3YXlzIGJlIGxvd2VyIGNhc2UgYW55d2F5LlxuICAgICAgICAgICAgcmV0dXJuIGVsZW1lbnQgJiYgZWxlbWVudC50YWdOYW1lICYmIGVsZW1lbnQudGFnTmFtZS50b0xvd2VyQ2FzZSgpO1xuICAgICAgICB9LFxuXG4gICAgICAgIGNhdGNoRnVuY3Rpb25FcnJvcnM6IGZ1bmN0aW9uIChkZWxlZ2F0ZSkge1xuICAgICAgICAgICAgcmV0dXJuIGtvWydvbkVycm9yJ10gPyBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGRlbGVnYXRlLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XG4gICAgICAgICAgICAgICAgfSBjYXRjaCAoZSkge1xuICAgICAgICAgICAgICAgICAgICBrb1snb25FcnJvciddICYmIGtvWydvbkVycm9yJ10oZSk7XG4gICAgICAgICAgICAgICAgICAgIHRocm93IGU7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSA6IGRlbGVnYXRlO1xuICAgICAgICB9LFxuXG4gICAgICAgIHNldFRpbWVvdXQ6IGZ1bmN0aW9uIChoYW5kbGVyLCB0aW1lb3V0KSB7XG4gICAgICAgICAgICByZXR1cm4gc2V0VGltZW91dChrby51dGlscy5jYXRjaEZ1bmN0aW9uRXJyb3JzKGhhbmRsZXIpLCB0aW1lb3V0KTtcbiAgICAgICAgfSxcblxuICAgICAgICBkZWZlckVycm9yOiBmdW5jdGlvbiAoZXJyb3IpIHtcbiAgICAgICAgICAgIHNldFRpbWVvdXQoZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgIGtvWydvbkVycm9yJ10gJiYga29bJ29uRXJyb3InXShlcnJvcik7XG4gICAgICAgICAgICAgICAgdGhyb3cgZXJyb3I7XG4gICAgICAgICAgICB9LCAwKTtcbiAgICAgICAgfSxcblxuICAgICAgICByZWdpc3RlckV2ZW50SGFuZGxlcjogZnVuY3Rpb24gKGVsZW1lbnQsIGV2ZW50VHlwZSwgaGFuZGxlcikge1xuICAgICAgICAgICAgdmFyIHdyYXBwZWRIYW5kbGVyID0ga28udXRpbHMuY2F0Y2hGdW5jdGlvbkVycm9ycyhoYW5kbGVyKTtcblxuICAgICAgICAgICAgdmFyIG11c3RVc2VBdHRhY2hFdmVudCA9IGllVmVyc2lvbiAmJiBldmVudHNUaGF0TXVzdEJlUmVnaXN0ZXJlZFVzaW5nQXR0YWNoRXZlbnRbZXZlbnRUeXBlXTtcbiAgICAgICAgICAgIGlmICgha28ub3B0aW9uc1sndXNlT25seU5hdGl2ZUV2ZW50cyddICYmICFtdXN0VXNlQXR0YWNoRXZlbnQgJiYgalF1ZXJ5SW5zdGFuY2UpIHtcbiAgICAgICAgICAgICAgICBqUXVlcnlJbnN0YW5jZShlbGVtZW50KVsnYmluZCddKGV2ZW50VHlwZSwgd3JhcHBlZEhhbmRsZXIpO1xuICAgICAgICAgICAgfSBlbHNlIGlmICghbXVzdFVzZUF0dGFjaEV2ZW50ICYmIHR5cGVvZiBlbGVtZW50LmFkZEV2ZW50TGlzdGVuZXIgPT0gXCJmdW5jdGlvblwiKVxuICAgICAgICAgICAgICAgIGVsZW1lbnQuYWRkRXZlbnRMaXN0ZW5lcihldmVudFR5cGUsIHdyYXBwZWRIYW5kbGVyLCBmYWxzZSk7XG4gICAgICAgICAgICBlbHNlIGlmICh0eXBlb2YgZWxlbWVudC5hdHRhY2hFdmVudCAhPSBcInVuZGVmaW5lZFwiKSB7XG4gICAgICAgICAgICAgICAgdmFyIGF0dGFjaEV2ZW50SGFuZGxlciA9IGZ1bmN0aW9uIChldmVudCkgeyB3cmFwcGVkSGFuZGxlci5jYWxsKGVsZW1lbnQsIGV2ZW50KTsgfSxcbiAgICAgICAgICAgICAgICAgICAgYXR0YWNoRXZlbnROYW1lID0gXCJvblwiICsgZXZlbnRUeXBlO1xuICAgICAgICAgICAgICAgIGVsZW1lbnQuYXR0YWNoRXZlbnQoYXR0YWNoRXZlbnROYW1lLCBhdHRhY2hFdmVudEhhbmRsZXIpO1xuXG4gICAgICAgICAgICAgICAgLy8gSUUgZG9lcyBub3QgZGlzcG9zZSBhdHRhY2hFdmVudCBoYW5kbGVycyBhdXRvbWF0aWNhbGx5ICh1bmxpa2Ugd2l0aCBhZGRFdmVudExpc3RlbmVyKVxuICAgICAgICAgICAgICAgIC8vIHNvIHRvIGF2b2lkIGxlYWtzLCB3ZSBoYXZlIHRvIHJlbW92ZSB0aGVtIG1hbnVhbGx5LiBTZWUgYnVnICM4NTZcbiAgICAgICAgICAgICAgICBrby51dGlscy5kb21Ob2RlRGlzcG9zYWwuYWRkRGlzcG9zZUNhbGxiYWNrKGVsZW1lbnQsIGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgICAgICAgICBlbGVtZW50LmRldGFjaEV2ZW50KGF0dGFjaEV2ZW50TmFtZSwgYXR0YWNoRXZlbnRIYW5kbGVyKTtcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH0gZWxzZVxuICAgICAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihcIkJyb3dzZXIgZG9lc24ndCBzdXBwb3J0IGFkZEV2ZW50TGlzdGVuZXIgb3IgYXR0YWNoRXZlbnRcIik7XG4gICAgICAgIH0sXG5cbiAgICAgICAgdHJpZ2dlckV2ZW50OiBmdW5jdGlvbiAoZWxlbWVudCwgZXZlbnRUeXBlKSB7XG4gICAgICAgICAgICBpZiAoIShlbGVtZW50ICYmIGVsZW1lbnQubm9kZVR5cGUpKVxuICAgICAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihcImVsZW1lbnQgbXVzdCBiZSBhIERPTSBub2RlIHdoZW4gY2FsbGluZyB0cmlnZ2VyRXZlbnRcIik7XG5cbiAgICAgICAgICAgIC8vIEZvciBjbGljayBldmVudHMgb24gY2hlY2tib3hlcyBhbmQgcmFkaW8gYnV0dG9ucywgalF1ZXJ5IHRvZ2dsZXMgdGhlIGVsZW1lbnQgY2hlY2tlZCBzdGF0ZSAqYWZ0ZXIqIHRoZVxuICAgICAgICAgICAgLy8gZXZlbnQgaGFuZGxlciBydW5zIGluc3RlYWQgb2YgKmJlZm9yZSouIChUaGlzIHdhcyBmaXhlZCBpbiAxLjkgZm9yIGNoZWNrYm94ZXMgYnV0IG5vdCBmb3IgcmFkaW8gYnV0dG9ucy4pXG4gICAgICAgICAgICAvLyBJRSBkb2Vzbid0IGNoYW5nZSB0aGUgY2hlY2tlZCBzdGF0ZSB3aGVuIHlvdSB0cmlnZ2VyIHRoZSBjbGljayBldmVudCB1c2luZyBcImZpcmVFdmVudFwiLlxuICAgICAgICAgICAgLy8gSW4gYm90aCBjYXNlcywgd2UnbGwgdXNlIHRoZSBjbGljayBtZXRob2QgaW5zdGVhZC5cbiAgICAgICAgICAgIHZhciB1c2VDbGlja1dvcmthcm91bmQgPSBpc0NsaWNrT25DaGVja2FibGVFbGVtZW50KGVsZW1lbnQsIGV2ZW50VHlwZSk7XG5cbiAgICAgICAgICAgIGlmICgha28ub3B0aW9uc1sndXNlT25seU5hdGl2ZUV2ZW50cyddICYmIGpRdWVyeUluc3RhbmNlICYmICF1c2VDbGlja1dvcmthcm91bmQpIHtcbiAgICAgICAgICAgICAgICBqUXVlcnlJbnN0YW5jZShlbGVtZW50KVsndHJpZ2dlciddKGV2ZW50VHlwZSk7XG4gICAgICAgICAgICB9IGVsc2UgaWYgKHR5cGVvZiBkb2N1bWVudC5jcmVhdGVFdmVudCA9PSBcImZ1bmN0aW9uXCIpIHtcbiAgICAgICAgICAgICAgICBpZiAodHlwZW9mIGVsZW1lbnQuZGlzcGF0Y2hFdmVudCA9PSBcImZ1bmN0aW9uXCIpIHtcbiAgICAgICAgICAgICAgICAgICAgdmFyIGV2ZW50Q2F0ZWdvcnkgPSBrbm93bkV2ZW50VHlwZXNCeUV2ZW50TmFtZVtldmVudFR5cGVdIHx8IFwiSFRNTEV2ZW50c1wiO1xuICAgICAgICAgICAgICAgICAgICB2YXIgZXZlbnQgPSBkb2N1bWVudC5jcmVhdGVFdmVudChldmVudENhdGVnb3J5KTtcbiAgICAgICAgICAgICAgICAgICAgZXZlbnQuaW5pdEV2ZW50KGV2ZW50VHlwZSwgdHJ1ZSwgdHJ1ZSwgd2luZG93LCAwLCAwLCAwLCAwLCAwLCBmYWxzZSwgZmFsc2UsIGZhbHNlLCBmYWxzZSwgMCwgZWxlbWVudCk7XG4gICAgICAgICAgICAgICAgICAgIGVsZW1lbnQuZGlzcGF0Y2hFdmVudChldmVudCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGVsc2VcbiAgICAgICAgICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiVGhlIHN1cHBsaWVkIGVsZW1lbnQgZG9lc24ndCBzdXBwb3J0IGRpc3BhdGNoRXZlbnRcIik7XG4gICAgICAgICAgICB9IGVsc2UgaWYgKHVzZUNsaWNrV29ya2Fyb3VuZCAmJiBlbGVtZW50LmNsaWNrKSB7XG4gICAgICAgICAgICAgICAgZWxlbWVudC5jbGljaygpO1xuICAgICAgICAgICAgfSBlbHNlIGlmICh0eXBlb2YgZWxlbWVudC5maXJlRXZlbnQgIT0gXCJ1bmRlZmluZWRcIikge1xuICAgICAgICAgICAgICAgIGVsZW1lbnQuZmlyZUV2ZW50KFwib25cIiArIGV2ZW50VHlwZSk7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihcIkJyb3dzZXIgZG9lc24ndCBzdXBwb3J0IHRyaWdnZXJpbmcgZXZlbnRzXCIpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9LFxuXG4gICAgICAgIHVud3JhcE9ic2VydmFibGU6IGZ1bmN0aW9uICh2YWx1ZSkge1xuICAgICAgICAgICAgcmV0dXJuIGtvLmlzT2JzZXJ2YWJsZSh2YWx1ZSkgPyB2YWx1ZSgpIDogdmFsdWU7XG4gICAgICAgIH0sXG5cbiAgICAgICAgcGVla09ic2VydmFibGU6IGZ1bmN0aW9uICh2YWx1ZSkge1xuICAgICAgICAgICAgcmV0dXJuIGtvLmlzT2JzZXJ2YWJsZSh2YWx1ZSkgPyB2YWx1ZS5wZWVrKCkgOiB2YWx1ZTtcbiAgICAgICAgfSxcblxuICAgICAgICB0b2dnbGVEb21Ob2RlQ3NzQ2xhc3M6IHRvZ2dsZURvbU5vZGVDc3NDbGFzcyxcblxuICAgICAgICBzZXRUZXh0Q29udGVudDogZnVuY3Rpb24oZWxlbWVudCwgdGV4dENvbnRlbnQpIHtcbiAgICAgICAgICAgIHZhciB2YWx1ZSA9IGtvLnV0aWxzLnVud3JhcE9ic2VydmFibGUodGV4dENvbnRlbnQpO1xuICAgICAgICAgICAgaWYgKCh2YWx1ZSA9PT0gbnVsbCkgfHwgKHZhbHVlID09PSB1bmRlZmluZWQpKVxuICAgICAgICAgICAgICAgIHZhbHVlID0gXCJcIjtcblxuICAgICAgICAgICAgLy8gV2UgbmVlZCB0aGVyZSB0byBiZSBleGFjdGx5IG9uZSBjaGlsZDogYSB0ZXh0IG5vZGUuXG4gICAgICAgICAgICAvLyBJZiB0aGVyZSBhcmUgbm8gY2hpbGRyZW4sIG1vcmUgdGhhbiBvbmUsIG9yIGlmIGl0J3Mgbm90IGEgdGV4dCBub2RlLFxuICAgICAgICAgICAgLy8gd2UnbGwgY2xlYXIgZXZlcnl0aGluZyBhbmQgY3JlYXRlIGEgc2luZ2xlIHRleHQgbm9kZS5cbiAgICAgICAgICAgIHZhciBpbm5lclRleHROb2RlID0ga28udmlydHVhbEVsZW1lbnRzLmZpcnN0Q2hpbGQoZWxlbWVudCk7XG4gICAgICAgICAgICBpZiAoIWlubmVyVGV4dE5vZGUgfHwgaW5uZXJUZXh0Tm9kZS5ub2RlVHlwZSAhPSAzIHx8IGtvLnZpcnR1YWxFbGVtZW50cy5uZXh0U2libGluZyhpbm5lclRleHROb2RlKSkge1xuICAgICAgICAgICAgICAgIGtvLnZpcnR1YWxFbGVtZW50cy5zZXREb21Ob2RlQ2hpbGRyZW4oZWxlbWVudCwgW2VsZW1lbnQub3duZXJEb2N1bWVudC5jcmVhdGVUZXh0Tm9kZSh2YWx1ZSldKTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgaW5uZXJUZXh0Tm9kZS5kYXRhID0gdmFsdWU7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGtvLnV0aWxzLmZvcmNlUmVmcmVzaChlbGVtZW50KTtcbiAgICAgICAgfSxcblxuICAgICAgICBzZXRFbGVtZW50TmFtZTogZnVuY3Rpb24oZWxlbWVudCwgbmFtZSkge1xuICAgICAgICAgICAgZWxlbWVudC5uYW1lID0gbmFtZTtcblxuICAgICAgICAgICAgLy8gV29ya2Fyb3VuZCBJRSA2LzcgaXNzdWVcbiAgICAgICAgICAgIC8vIC0gaHR0cHM6Ly9naXRodWIuY29tL1N0ZXZlU2FuZGVyc29uL2tub2Nrb3V0L2lzc3Vlcy8xOTdcbiAgICAgICAgICAgIC8vIC0gaHR0cDovL3d3dy5tYXR0czQxMS5jb20vcG9zdC9zZXR0aW5nX3RoZV9uYW1lX2F0dHJpYnV0ZV9pbl9pZV9kb20vXG4gICAgICAgICAgICBpZiAoaWVWZXJzaW9uIDw9IDcpIHtcbiAgICAgICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgICAgICBlbGVtZW50Lm1lcmdlQXR0cmlidXRlcyhkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiPGlucHV0IG5hbWU9J1wiICsgZWxlbWVudC5uYW1lICsgXCInLz5cIiksIGZhbHNlKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgY2F0Y2goZSkge30gLy8gRm9yIElFOSB3aXRoIGRvYyBtb2RlIFwiSUU5IFN0YW5kYXJkc1wiIGFuZCBicm93c2VyIG1vZGUgXCJJRTkgQ29tcGF0aWJpbGl0eSBWaWV3XCJcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSxcblxuICAgICAgICBmb3JjZVJlZnJlc2g6IGZ1bmN0aW9uKG5vZGUpIHtcbiAgICAgICAgICAgIC8vIFdvcmthcm91bmQgZm9yIGFuIElFOSByZW5kZXJpbmcgYnVnIC0gaHR0cHM6Ly9naXRodWIuY29tL1N0ZXZlU2FuZGVyc29uL2tub2Nrb3V0L2lzc3Vlcy8yMDlcbiAgICAgICAgICAgIGlmIChpZVZlcnNpb24gPj0gOSkge1xuICAgICAgICAgICAgICAgIC8vIEZvciB0ZXh0IG5vZGVzIGFuZCBjb21tZW50IG5vZGVzIChtb3N0IGxpa2VseSB2aXJ0dWFsIGVsZW1lbnRzKSwgd2Ugd2lsbCBoYXZlIHRvIHJlZnJlc2ggdGhlIGNvbnRhaW5lclxuICAgICAgICAgICAgICAgIHZhciBlbGVtID0gbm9kZS5ub2RlVHlwZSA9PSAxID8gbm9kZSA6IG5vZGUucGFyZW50Tm9kZTtcbiAgICAgICAgICAgICAgICBpZiAoZWxlbS5zdHlsZSlcbiAgICAgICAgICAgICAgICAgICAgZWxlbS5zdHlsZS56b29tID0gZWxlbS5zdHlsZS56b29tO1xuICAgICAgICAgICAgfVxuICAgICAgICB9LFxuXG4gICAgICAgIGVuc3VyZVNlbGVjdEVsZW1lbnRJc1JlbmRlcmVkQ29ycmVjdGx5OiBmdW5jdGlvbihzZWxlY3RFbGVtZW50KSB7XG4gICAgICAgICAgICAvLyBXb3JrYXJvdW5kIGZvciBJRTkgcmVuZGVyaW5nIGJ1ZyAtIGl0IGRvZXNuJ3QgcmVsaWFibHkgZGlzcGxheSBhbGwgdGhlIHRleHQgaW4gZHluYW1pY2FsbHktYWRkZWQgc2VsZWN0IGJveGVzIHVubGVzcyB5b3UgZm9yY2UgaXQgdG8gcmUtcmVuZGVyIGJ5IHVwZGF0aW5nIHRoZSB3aWR0aC5cbiAgICAgICAgICAgIC8vIChTZWUgaHR0cHM6Ly9naXRodWIuY29tL1N0ZXZlU2FuZGVyc29uL2tub2Nrb3V0L2lzc3Vlcy8zMTIsIGh0dHA6Ly9zdGFja292ZXJmbG93LmNvbS9xdWVzdGlvbnMvNTkwODQ5NC9zZWxlY3Qtb25seS1zaG93cy1maXJzdC1jaGFyLW9mLXNlbGVjdGVkLW9wdGlvbilcbiAgICAgICAgICAgIC8vIEFsc28gZml4ZXMgSUU3IGFuZCBJRTggYnVnIHRoYXQgY2F1c2VzIHNlbGVjdHMgdG8gYmUgemVybyB3aWR0aCBpZiBlbmNsb3NlZCBieSAnaWYnIG9yICd3aXRoJy4gKFNlZSBpc3N1ZSAjODM5KVxuICAgICAgICAgICAgaWYgKGllVmVyc2lvbikge1xuICAgICAgICAgICAgICAgIHZhciBvcmlnaW5hbFdpZHRoID0gc2VsZWN0RWxlbWVudC5zdHlsZS53aWR0aDtcbiAgICAgICAgICAgICAgICBzZWxlY3RFbGVtZW50LnN0eWxlLndpZHRoID0gMDtcbiAgICAgICAgICAgICAgICBzZWxlY3RFbGVtZW50LnN0eWxlLndpZHRoID0gb3JpZ2luYWxXaWR0aDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSxcblxuICAgICAgICByYW5nZTogZnVuY3Rpb24gKG1pbiwgbWF4KSB7XG4gICAgICAgICAgICBtaW4gPSBrby51dGlscy51bndyYXBPYnNlcnZhYmxlKG1pbik7XG4gICAgICAgICAgICBtYXggPSBrby51dGlscy51bndyYXBPYnNlcnZhYmxlKG1heCk7XG4gICAgICAgICAgICB2YXIgcmVzdWx0ID0gW107XG4gICAgICAgICAgICBmb3IgKHZhciBpID0gbWluOyBpIDw9IG1heDsgaSsrKVxuICAgICAgICAgICAgICAgIHJlc3VsdC5wdXNoKGkpO1xuICAgICAgICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICAgICAgfSxcblxuICAgICAgICBtYWtlQXJyYXk6IGZ1bmN0aW9uKGFycmF5TGlrZU9iamVjdCkge1xuICAgICAgICAgICAgdmFyIHJlc3VsdCA9IFtdO1xuICAgICAgICAgICAgZm9yICh2YXIgaSA9IDAsIGogPSBhcnJheUxpa2VPYmplY3QubGVuZ3RoOyBpIDwgajsgaSsrKSB7XG4gICAgICAgICAgICAgICAgcmVzdWx0LnB1c2goYXJyYXlMaWtlT2JqZWN0W2ldKTtcbiAgICAgICAgICAgIH07XG4gICAgICAgICAgICByZXR1cm4gcmVzdWx0O1xuICAgICAgICB9LFxuXG4gICAgICAgIGNyZWF0ZVN5bWJvbE9yU3RyaW5nOiBmdW5jdGlvbihpZGVudGlmaWVyKSB7XG4gICAgICAgICAgICByZXR1cm4gY2FuVXNlU3ltYm9scyA/IFN5bWJvbChpZGVudGlmaWVyKSA6IGlkZW50aWZpZXI7XG4gICAgICAgIH0sXG5cbiAgICAgICAgaXNJZTYgOiBpc0llNixcbiAgICAgICAgaXNJZTcgOiBpc0llNyxcbiAgICAgICAgaWVWZXJzaW9uIDogaWVWZXJzaW9uLFxuXG4gICAgICAgIGdldEZvcm1GaWVsZHM6IGZ1bmN0aW9uKGZvcm0sIGZpZWxkTmFtZSkge1xuICAgICAgICAgICAgdmFyIGZpZWxkcyA9IGtvLnV0aWxzLm1ha2VBcnJheShmb3JtLmdldEVsZW1lbnRzQnlUYWdOYW1lKFwiaW5wdXRcIikpLmNvbmNhdChrby51dGlscy5tYWtlQXJyYXkoZm9ybS5nZXRFbGVtZW50c0J5VGFnTmFtZShcInRleHRhcmVhXCIpKSk7XG4gICAgICAgICAgICB2YXIgaXNNYXRjaGluZ0ZpZWxkID0gKHR5cGVvZiBmaWVsZE5hbWUgPT0gJ3N0cmluZycpXG4gICAgICAgICAgICAgICAgPyBmdW5jdGlvbihmaWVsZCkgeyByZXR1cm4gZmllbGQubmFtZSA9PT0gZmllbGROYW1lIH1cbiAgICAgICAgICAgICAgICA6IGZ1bmN0aW9uKGZpZWxkKSB7IHJldHVybiBmaWVsZE5hbWUudGVzdChmaWVsZC5uYW1lKSB9OyAvLyBUcmVhdCBmaWVsZE5hbWUgYXMgcmVnZXggb3Igb2JqZWN0IGNvbnRhaW5pbmcgcHJlZGljYXRlXG4gICAgICAgICAgICB2YXIgbWF0Y2hlcyA9IFtdO1xuICAgICAgICAgICAgZm9yICh2YXIgaSA9IGZpZWxkcy5sZW5ndGggLSAxOyBpID49IDA7IGktLSkge1xuICAgICAgICAgICAgICAgIGlmIChpc01hdGNoaW5nRmllbGQoZmllbGRzW2ldKSlcbiAgICAgICAgICAgICAgICAgICAgbWF0Y2hlcy5wdXNoKGZpZWxkc1tpXSk7XG4gICAgICAgICAgICB9O1xuICAgICAgICAgICAgcmV0dXJuIG1hdGNoZXM7XG4gICAgICAgIH0sXG5cbiAgICAgICAgcGFyc2VKc29uOiBmdW5jdGlvbiAoanNvblN0cmluZykge1xuICAgICAgICAgICAgaWYgKHR5cGVvZiBqc29uU3RyaW5nID09IFwic3RyaW5nXCIpIHtcbiAgICAgICAgICAgICAgICBqc29uU3RyaW5nID0ga28udXRpbHMuc3RyaW5nVHJpbShqc29uU3RyaW5nKTtcbiAgICAgICAgICAgICAgICBpZiAoanNvblN0cmluZykge1xuICAgICAgICAgICAgICAgICAgICBpZiAoSlNPTiAmJiBKU09OLnBhcnNlKSAvLyBVc2UgbmF0aXZlIHBhcnNpbmcgd2hlcmUgYXZhaWxhYmxlXG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gSlNPTi5wYXJzZShqc29uU3RyaW5nKTtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIChuZXcgRnVuY3Rpb24oXCJyZXR1cm4gXCIgKyBqc29uU3RyaW5nKSkoKTsgLy8gRmFsbGJhY2sgb24gbGVzcyBzYWZlIHBhcnNpbmcgZm9yIG9sZGVyIGJyb3dzZXJzXG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICAgIH0sXG5cbiAgICAgICAgc3RyaW5naWZ5SnNvbjogZnVuY3Rpb24gKGRhdGEsIHJlcGxhY2VyLCBzcGFjZSkgeyAgIC8vIHJlcGxhY2VyIGFuZCBzcGFjZSBhcmUgb3B0aW9uYWxcbiAgICAgICAgICAgIGlmICghSlNPTiB8fCAhSlNPTi5zdHJpbmdpZnkpXG4gICAgICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiQ2Fubm90IGZpbmQgSlNPTi5zdHJpbmdpZnkoKS4gU29tZSBicm93c2VycyAoZS5nLiwgSUUgPCA4KSBkb24ndCBzdXBwb3J0IGl0IG5hdGl2ZWx5LCBidXQgeW91IGNhbiBvdmVyY29tZSB0aGlzIGJ5IGFkZGluZyBhIHNjcmlwdCByZWZlcmVuY2UgdG8ganNvbjIuanMsIGRvd25sb2FkYWJsZSBmcm9tIGh0dHA6Ly93d3cuanNvbi5vcmcvanNvbjIuanNcIik7XG4gICAgICAgICAgICByZXR1cm4gSlNPTi5zdHJpbmdpZnkoa28udXRpbHMudW53cmFwT2JzZXJ2YWJsZShkYXRhKSwgcmVwbGFjZXIsIHNwYWNlKTtcbiAgICAgICAgfSxcblxuICAgICAgICBwb3N0SnNvbjogZnVuY3Rpb24gKHVybE9yRm9ybSwgZGF0YSwgb3B0aW9ucykge1xuICAgICAgICAgICAgb3B0aW9ucyA9IG9wdGlvbnMgfHwge307XG4gICAgICAgICAgICB2YXIgcGFyYW1zID0gb3B0aW9uc1sncGFyYW1zJ10gfHwge307XG4gICAgICAgICAgICB2YXIgaW5jbHVkZUZpZWxkcyA9IG9wdGlvbnNbJ2luY2x1ZGVGaWVsZHMnXSB8fCB0aGlzLmZpZWxkc0luY2x1ZGVkV2l0aEpzb25Qb3N0O1xuICAgICAgICAgICAgdmFyIHVybCA9IHVybE9yRm9ybTtcblxuICAgICAgICAgICAgLy8gSWYgd2Ugd2VyZSBnaXZlbiBhIGZvcm0sIHVzZSBpdHMgJ2FjdGlvbicgVVJMIGFuZCBwaWNrIG91dCBhbnkgcmVxdWVzdGVkIGZpZWxkIHZhbHVlc1xuICAgICAgICAgICAgaWYoKHR5cGVvZiB1cmxPckZvcm0gPT0gJ29iamVjdCcpICYmIChrby51dGlscy50YWdOYW1lTG93ZXIodXJsT3JGb3JtKSA9PT0gXCJmb3JtXCIpKSB7XG4gICAgICAgICAgICAgICAgdmFyIG9yaWdpbmFsRm9ybSA9IHVybE9yRm9ybTtcbiAgICAgICAgICAgICAgICB1cmwgPSBvcmlnaW5hbEZvcm0uYWN0aW9uO1xuICAgICAgICAgICAgICAgIGZvciAodmFyIGkgPSBpbmNsdWRlRmllbGRzLmxlbmd0aCAtIDE7IGkgPj0gMDsgaS0tKSB7XG4gICAgICAgICAgICAgICAgICAgIHZhciBmaWVsZHMgPSBrby51dGlscy5nZXRGb3JtRmllbGRzKG9yaWdpbmFsRm9ybSwgaW5jbHVkZUZpZWxkc1tpXSk7XG4gICAgICAgICAgICAgICAgICAgIGZvciAodmFyIGogPSBmaWVsZHMubGVuZ3RoIC0gMTsgaiA+PSAwOyBqLS0pXG4gICAgICAgICAgICAgICAgICAgICAgICBwYXJhbXNbZmllbGRzW2pdLm5hbWVdID0gZmllbGRzW2pdLnZhbHVlO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgZGF0YSA9IGtvLnV0aWxzLnVud3JhcE9ic2VydmFibGUoZGF0YSk7XG4gICAgICAgICAgICB2YXIgZm9ybSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJmb3JtXCIpO1xuICAgICAgICAgICAgZm9ybS5zdHlsZS5kaXNwbGF5ID0gXCJub25lXCI7XG4gICAgICAgICAgICBmb3JtLmFjdGlvbiA9IHVybDtcbiAgICAgICAgICAgIGZvcm0ubWV0aG9kID0gXCJwb3N0XCI7XG4gICAgICAgICAgICBmb3IgKHZhciBrZXkgaW4gZGF0YSkge1xuICAgICAgICAgICAgICAgIC8vIFNpbmNlICdkYXRhJyB0aGlzIGlzIGEgbW9kZWwgb2JqZWN0LCB3ZSBpbmNsdWRlIGFsbCBwcm9wZXJ0aWVzIGluY2x1ZGluZyB0aG9zZSBpbmhlcml0ZWQgZnJvbSBpdHMgcHJvdG90eXBlXG4gICAgICAgICAgICAgICAgdmFyIGlucHV0ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImlucHV0XCIpO1xuICAgICAgICAgICAgICAgIGlucHV0LnR5cGUgPSBcImhpZGRlblwiO1xuICAgICAgICAgICAgICAgIGlucHV0Lm5hbWUgPSBrZXk7XG4gICAgICAgICAgICAgICAgaW5wdXQudmFsdWUgPSBrby51dGlscy5zdHJpbmdpZnlKc29uKGtvLnV0aWxzLnVud3JhcE9ic2VydmFibGUoZGF0YVtrZXldKSk7XG4gICAgICAgICAgICAgICAgZm9ybS5hcHBlbmRDaGlsZChpbnB1dCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBvYmplY3RGb3JFYWNoKHBhcmFtcywgZnVuY3Rpb24oa2V5LCB2YWx1ZSkge1xuICAgICAgICAgICAgICAgIHZhciBpbnB1dCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJpbnB1dFwiKTtcbiAgICAgICAgICAgICAgICBpbnB1dC50eXBlID0gXCJoaWRkZW5cIjtcbiAgICAgICAgICAgICAgICBpbnB1dC5uYW1lID0ga2V5O1xuICAgICAgICAgICAgICAgIGlucHV0LnZhbHVlID0gdmFsdWU7XG4gICAgICAgICAgICAgICAgZm9ybS5hcHBlbmRDaGlsZChpbnB1dCk7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIGRvY3VtZW50LmJvZHkuYXBwZW5kQ2hpbGQoZm9ybSk7XG4gICAgICAgICAgICBvcHRpb25zWydzdWJtaXR0ZXInXSA/IG9wdGlvbnNbJ3N1Ym1pdHRlciddKGZvcm0pIDogZm9ybS5zdWJtaXQoKTtcbiAgICAgICAgICAgIHNldFRpbWVvdXQoZnVuY3Rpb24gKCkgeyBmb3JtLnBhcmVudE5vZGUucmVtb3ZlQ2hpbGQoZm9ybSk7IH0sIDApO1xuICAgICAgICB9XG4gICAgfVxufSgpKTtcblxua28uZXhwb3J0U3ltYm9sKCd1dGlscycsIGtvLnV0aWxzKTtcbmtvLmV4cG9ydFN5bWJvbCgndXRpbHMuYXJyYXlGb3JFYWNoJywga28udXRpbHMuYXJyYXlGb3JFYWNoKTtcbmtvLmV4cG9ydFN5bWJvbCgndXRpbHMuYXJyYXlGaXJzdCcsIGtvLnV0aWxzLmFycmF5Rmlyc3QpO1xua28uZXhwb3J0U3ltYm9sKCd1dGlscy5hcnJheUZpbHRlcicsIGtvLnV0aWxzLmFycmF5RmlsdGVyKTtcbmtvLmV4cG9ydFN5bWJvbCgndXRpbHMuYXJyYXlHZXREaXN0aW5jdFZhbHVlcycsIGtvLnV0aWxzLmFycmF5R2V0RGlzdGluY3RWYWx1ZXMpO1xua28uZXhwb3J0U3ltYm9sKCd1dGlscy5hcnJheUluZGV4T2YnLCBrby51dGlscy5hcnJheUluZGV4T2YpO1xua28uZXhwb3J0U3ltYm9sKCd1dGlscy5hcnJheU1hcCcsIGtvLnV0aWxzLmFycmF5TWFwKTtcbmtvLmV4cG9ydFN5bWJvbCgndXRpbHMuYXJyYXlQdXNoQWxsJywga28udXRpbHMuYXJyYXlQdXNoQWxsKTtcbmtvLmV4cG9ydFN5bWJvbCgndXRpbHMuYXJyYXlSZW1vdmVJdGVtJywga28udXRpbHMuYXJyYXlSZW1vdmVJdGVtKTtcbmtvLmV4cG9ydFN5bWJvbCgndXRpbHMuZXh0ZW5kJywga28udXRpbHMuZXh0ZW5kKTtcbmtvLmV4cG9ydFN5bWJvbCgndXRpbHMuZmllbGRzSW5jbHVkZWRXaXRoSnNvblBvc3QnLCBrby51dGlscy5maWVsZHNJbmNsdWRlZFdpdGhKc29uUG9zdCk7XG5rby5leHBvcnRTeW1ib2woJ3V0aWxzLmdldEZvcm1GaWVsZHMnLCBrby51dGlscy5nZXRGb3JtRmllbGRzKTtcbmtvLmV4cG9ydFN5bWJvbCgndXRpbHMucGVla09ic2VydmFibGUnLCBrby51dGlscy5wZWVrT2JzZXJ2YWJsZSk7XG5rby5leHBvcnRTeW1ib2woJ3V0aWxzLnBvc3RKc29uJywga28udXRpbHMucG9zdEpzb24pO1xua28uZXhwb3J0U3ltYm9sKCd1dGlscy5wYXJzZUpzb24nLCBrby51dGlscy5wYXJzZUpzb24pO1xua28uZXhwb3J0U3ltYm9sKCd1dGlscy5yZWdpc3RlckV2ZW50SGFuZGxlcicsIGtvLnV0aWxzLnJlZ2lzdGVyRXZlbnRIYW5kbGVyKTtcbmtvLmV4cG9ydFN5bWJvbCgndXRpbHMuc3RyaW5naWZ5SnNvbicsIGtvLnV0aWxzLnN0cmluZ2lmeUpzb24pO1xua28uZXhwb3J0U3ltYm9sKCd1dGlscy5yYW5nZScsIGtvLnV0aWxzLnJhbmdlKTtcbmtvLmV4cG9ydFN5bWJvbCgndXRpbHMudG9nZ2xlRG9tTm9kZUNzc0NsYXNzJywga28udXRpbHMudG9nZ2xlRG9tTm9kZUNzc0NsYXNzKTtcbmtvLmV4cG9ydFN5bWJvbCgndXRpbHMudHJpZ2dlckV2ZW50Jywga28udXRpbHMudHJpZ2dlckV2ZW50KTtcbmtvLmV4cG9ydFN5bWJvbCgndXRpbHMudW53cmFwT2JzZXJ2YWJsZScsIGtvLnV0aWxzLnVud3JhcE9ic2VydmFibGUpO1xua28uZXhwb3J0U3ltYm9sKCd1dGlscy5vYmplY3RGb3JFYWNoJywga28udXRpbHMub2JqZWN0Rm9yRWFjaCk7XG5rby5leHBvcnRTeW1ib2woJ3V0aWxzLmFkZE9yUmVtb3ZlSXRlbScsIGtvLnV0aWxzLmFkZE9yUmVtb3ZlSXRlbSk7XG5rby5leHBvcnRTeW1ib2woJ3V0aWxzLnNldFRleHRDb250ZW50Jywga28udXRpbHMuc2V0VGV4dENvbnRlbnQpO1xua28uZXhwb3J0U3ltYm9sKCd1bndyYXAnLCBrby51dGlscy51bndyYXBPYnNlcnZhYmxlKTsgLy8gQ29udmVuaWVudCBzaG9ydGhhbmQsIGJlY2F1c2UgdGhpcyBpcyB1c2VkIHNvIGNvbW1vbmx5XG5cbmlmICghRnVuY3Rpb24ucHJvdG90eXBlWydiaW5kJ10pIHtcbiAgICAvLyBGdW5jdGlvbi5wcm90b3R5cGUuYmluZCBpcyBhIHN0YW5kYXJkIHBhcnQgb2YgRUNNQVNjcmlwdCA1dGggRWRpdGlvbiAoRGVjZW1iZXIgMjAwOSwgaHR0cDovL3d3dy5lY21hLWludGVybmF0aW9uYWwub3JnL3B1YmxpY2F0aW9ucy9maWxlcy9FQ01BLVNUL0VDTUEtMjYyLnBkZilcbiAgICAvLyBJbiBjYXNlIHRoZSBicm93c2VyIGRvZXNuJ3QgaW1wbGVtZW50IGl0IG5hdGl2ZWx5LCBwcm92aWRlIGEgSmF2YVNjcmlwdCBpbXBsZW1lbnRhdGlvbi4gVGhpcyBpbXBsZW1lbnRhdGlvbiBpcyBiYXNlZCBvbiB0aGUgb25lIGluIHByb3RvdHlwZS5qc1xuICAgIEZ1bmN0aW9uLnByb3RvdHlwZVsnYmluZCddID0gZnVuY3Rpb24gKG9iamVjdCkge1xuICAgICAgICB2YXIgb3JpZ2luYWxGdW5jdGlvbiA9IHRoaXM7XG4gICAgICAgIGlmIChhcmd1bWVudHMubGVuZ3RoID09PSAxKSB7XG4gICAgICAgICAgICByZXR1cm4gZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgIHJldHVybiBvcmlnaW5hbEZ1bmN0aW9uLmFwcGx5KG9iamVjdCwgYXJndW1lbnRzKTtcbiAgICAgICAgICAgIH07XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICB2YXIgcGFydGlhbEFyZ3MgPSBBcnJheS5wcm90b3R5cGUuc2xpY2UuY2FsbChhcmd1bWVudHMsIDEpO1xuICAgICAgICAgICAgcmV0dXJuIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICB2YXIgYXJncyA9IHBhcnRpYWxBcmdzLnNsaWNlKDApO1xuICAgICAgICAgICAgICAgIGFyZ3MucHVzaC5hcHBseShhcmdzLCBhcmd1bWVudHMpO1xuICAgICAgICAgICAgICAgIHJldHVybiBvcmlnaW5hbEZ1bmN0aW9uLmFwcGx5KG9iamVjdCwgYXJncyk7XG4gICAgICAgICAgICB9O1xuICAgICAgICB9XG4gICAgfTtcbn1cblxua28udXRpbHMuZG9tRGF0YSA9IG5ldyAoZnVuY3Rpb24gKCkge1xuICAgIHZhciB1bmlxdWVJZCA9IDA7XG4gICAgdmFyIGRhdGFTdG9yZUtleUV4cGFuZG9Qcm9wZXJ0eU5hbWUgPSBcIl9fa29fX1wiICsgKG5ldyBEYXRlKS5nZXRUaW1lKCk7XG4gICAgdmFyIGRhdGFTdG9yZSA9IHt9O1xuXG4gICAgZnVuY3Rpb24gZ2V0QWxsKG5vZGUsIGNyZWF0ZUlmTm90Rm91bmQpIHtcbiAgICAgICAgdmFyIGRhdGFTdG9yZUtleSA9IG5vZGVbZGF0YVN0b3JlS2V5RXhwYW5kb1Byb3BlcnR5TmFtZV07XG4gICAgICAgIHZhciBoYXNFeGlzdGluZ0RhdGFTdG9yZSA9IGRhdGFTdG9yZUtleSAmJiAoZGF0YVN0b3JlS2V5ICE9PSBcIm51bGxcIikgJiYgZGF0YVN0b3JlW2RhdGFTdG9yZUtleV07XG4gICAgICAgIGlmICghaGFzRXhpc3RpbmdEYXRhU3RvcmUpIHtcbiAgICAgICAgICAgIGlmICghY3JlYXRlSWZOb3RGb3VuZClcbiAgICAgICAgICAgICAgICByZXR1cm4gdW5kZWZpbmVkO1xuICAgICAgICAgICAgZGF0YVN0b3JlS2V5ID0gbm9kZVtkYXRhU3RvcmVLZXlFeHBhbmRvUHJvcGVydHlOYW1lXSA9IFwia29cIiArIHVuaXF1ZUlkKys7XG4gICAgICAgICAgICBkYXRhU3RvcmVbZGF0YVN0b3JlS2V5XSA9IHt9O1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBkYXRhU3RvcmVbZGF0YVN0b3JlS2V5XTtcbiAgICB9XG5cbiAgICByZXR1cm4ge1xuICAgICAgICBnZXQ6IGZ1bmN0aW9uIChub2RlLCBrZXkpIHtcbiAgICAgICAgICAgIHZhciBhbGxEYXRhRm9yTm9kZSA9IGdldEFsbChub2RlLCBmYWxzZSk7XG4gICAgICAgICAgICByZXR1cm4gYWxsRGF0YUZvck5vZGUgPT09IHVuZGVmaW5lZCA/IHVuZGVmaW5lZCA6IGFsbERhdGFGb3JOb2RlW2tleV07XG4gICAgICAgIH0sXG4gICAgICAgIHNldDogZnVuY3Rpb24gKG5vZGUsIGtleSwgdmFsdWUpIHtcbiAgICAgICAgICAgIGlmICh2YWx1ZSA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICAgICAgLy8gTWFrZSBzdXJlIHdlIGRvbid0IGFjdHVhbGx5IGNyZWF0ZSBhIG5ldyBkb21EYXRhIGtleSBpZiB3ZSBhcmUgYWN0dWFsbHkgZGVsZXRpbmcgYSB2YWx1ZVxuICAgICAgICAgICAgICAgIGlmIChnZXRBbGwobm9kZSwgZmFsc2UpID09PSB1bmRlZmluZWQpXG4gICAgICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHZhciBhbGxEYXRhRm9yTm9kZSA9IGdldEFsbChub2RlLCB0cnVlKTtcbiAgICAgICAgICAgIGFsbERhdGFGb3JOb2RlW2tleV0gPSB2YWx1ZTtcbiAgICAgICAgfSxcbiAgICAgICAgY2xlYXI6IGZ1bmN0aW9uIChub2RlKSB7XG4gICAgICAgICAgICB2YXIgZGF0YVN0b3JlS2V5ID0gbm9kZVtkYXRhU3RvcmVLZXlFeHBhbmRvUHJvcGVydHlOYW1lXTtcbiAgICAgICAgICAgIGlmIChkYXRhU3RvcmVLZXkpIHtcbiAgICAgICAgICAgICAgICBkZWxldGUgZGF0YVN0b3JlW2RhdGFTdG9yZUtleV07XG4gICAgICAgICAgICAgICAgbm9kZVtkYXRhU3RvcmVLZXlFeHBhbmRvUHJvcGVydHlOYW1lXSA9IG51bGw7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHRydWU7IC8vIEV4cG9zaW5nIFwiZGlkIGNsZWFuXCIgZmxhZyBwdXJlbHkgc28gc3BlY3MgY2FuIGluZmVyIHdoZXRoZXIgdGhpbmdzIGhhdmUgYmVlbiBjbGVhbmVkIHVwIGFzIGludGVuZGVkXG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgIH0sXG5cbiAgICAgICAgbmV4dEtleTogZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgcmV0dXJuICh1bmlxdWVJZCsrKSArIGRhdGFTdG9yZUtleUV4cGFuZG9Qcm9wZXJ0eU5hbWU7XG4gICAgICAgIH1cbiAgICB9O1xufSkoKTtcblxua28uZXhwb3J0U3ltYm9sKCd1dGlscy5kb21EYXRhJywga28udXRpbHMuZG9tRGF0YSk7XG5rby5leHBvcnRTeW1ib2woJ3V0aWxzLmRvbURhdGEuY2xlYXInLCBrby51dGlscy5kb21EYXRhLmNsZWFyKTsgLy8gRXhwb3J0aW5nIG9ubHkgc28gc3BlY3MgY2FuIGNsZWFyIHVwIGFmdGVyIHRoZW1zZWx2ZXMgZnVsbHlcblxua28udXRpbHMuZG9tTm9kZURpc3Bvc2FsID0gbmV3IChmdW5jdGlvbiAoKSB7XG4gICAgdmFyIGRvbURhdGFLZXkgPSBrby51dGlscy5kb21EYXRhLm5leHRLZXkoKTtcbiAgICB2YXIgY2xlYW5hYmxlTm9kZVR5cGVzID0geyAxOiB0cnVlLCA4OiB0cnVlLCA5OiB0cnVlIH07ICAgICAgIC8vIEVsZW1lbnQsIENvbW1lbnQsIERvY3VtZW50XG4gICAgdmFyIGNsZWFuYWJsZU5vZGVUeXBlc1dpdGhEZXNjZW5kYW50cyA9IHsgMTogdHJ1ZSwgOTogdHJ1ZSB9OyAvLyBFbGVtZW50LCBEb2N1bWVudFxuXG4gICAgZnVuY3Rpb24gZ2V0RGlzcG9zZUNhbGxiYWNrc0NvbGxlY3Rpb24obm9kZSwgY3JlYXRlSWZOb3RGb3VuZCkge1xuICAgICAgICB2YXIgYWxsRGlzcG9zZUNhbGxiYWNrcyA9IGtvLnV0aWxzLmRvbURhdGEuZ2V0KG5vZGUsIGRvbURhdGFLZXkpO1xuICAgICAgICBpZiAoKGFsbERpc3Bvc2VDYWxsYmFja3MgPT09IHVuZGVmaW5lZCkgJiYgY3JlYXRlSWZOb3RGb3VuZCkge1xuICAgICAgICAgICAgYWxsRGlzcG9zZUNhbGxiYWNrcyA9IFtdO1xuICAgICAgICAgICAga28udXRpbHMuZG9tRGF0YS5zZXQobm9kZSwgZG9tRGF0YUtleSwgYWxsRGlzcG9zZUNhbGxiYWNrcyk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGFsbERpc3Bvc2VDYWxsYmFja3M7XG4gICAgfVxuICAgIGZ1bmN0aW9uIGRlc3Ryb3lDYWxsYmFja3NDb2xsZWN0aW9uKG5vZGUpIHtcbiAgICAgICAga28udXRpbHMuZG9tRGF0YS5zZXQobm9kZSwgZG9tRGF0YUtleSwgdW5kZWZpbmVkKTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBjbGVhblNpbmdsZU5vZGUobm9kZSkge1xuICAgICAgICAvLyBSdW4gYWxsIHRoZSBkaXNwb3NlIGNhbGxiYWNrc1xuICAgICAgICB2YXIgY2FsbGJhY2tzID0gZ2V0RGlzcG9zZUNhbGxiYWNrc0NvbGxlY3Rpb24obm9kZSwgZmFsc2UpO1xuICAgICAgICBpZiAoY2FsbGJhY2tzKSB7XG4gICAgICAgICAgICBjYWxsYmFja3MgPSBjYWxsYmFja3Muc2xpY2UoMCk7IC8vIENsb25lLCBhcyB0aGUgYXJyYXkgbWF5IGJlIG1vZGlmaWVkIGR1cmluZyBpdGVyYXRpb24gKHR5cGljYWxseSwgY2FsbGJhY2tzIHdpbGwgcmVtb3ZlIHRoZW1zZWx2ZXMpXG4gICAgICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IGNhbGxiYWNrcy5sZW5ndGg7IGkrKylcbiAgICAgICAgICAgICAgICBjYWxsYmFja3NbaV0obm9kZSk7XG4gICAgICAgIH1cblxuICAgICAgICAvLyBFcmFzZSB0aGUgRE9NIGRhdGFcbiAgICAgICAga28udXRpbHMuZG9tRGF0YS5jbGVhcihub2RlKTtcblxuICAgICAgICAvLyBQZXJmb3JtIGNsZWFudXAgbmVlZGVkIGJ5IGV4dGVybmFsIGxpYnJhcmllcyAoY3VycmVudGx5IG9ubHkgalF1ZXJ5LCBidXQgY2FuIGJlIGV4dGVuZGVkKVxuICAgICAgICBrby51dGlscy5kb21Ob2RlRGlzcG9zYWxbXCJjbGVhbkV4dGVybmFsRGF0YVwiXShub2RlKTtcblxuICAgICAgICAvLyBDbGVhciBhbnkgaW1tZWRpYXRlLWNoaWxkIGNvbW1lbnQgbm9kZXMsIGFzIHRoZXNlIHdvdWxkbid0IGhhdmUgYmVlbiBmb3VuZCBieVxuICAgICAgICAvLyBub2RlLmdldEVsZW1lbnRzQnlUYWdOYW1lKFwiKlwiKSBpbiBjbGVhbk5vZGUoKSAoY29tbWVudCBub2RlcyBhcmVuJ3QgZWxlbWVudHMpXG4gICAgICAgIGlmIChjbGVhbmFibGVOb2RlVHlwZXNXaXRoRGVzY2VuZGFudHNbbm9kZS5ub2RlVHlwZV0pXG4gICAgICAgICAgICBjbGVhbkltbWVkaWF0ZUNvbW1lbnRUeXBlQ2hpbGRyZW4obm9kZSk7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gY2xlYW5JbW1lZGlhdGVDb21tZW50VHlwZUNoaWxkcmVuKG5vZGVXaXRoQ2hpbGRyZW4pIHtcbiAgICAgICAgdmFyIGNoaWxkLCBuZXh0Q2hpbGQgPSBub2RlV2l0aENoaWxkcmVuLmZpcnN0Q2hpbGQ7XG4gICAgICAgIHdoaWxlIChjaGlsZCA9IG5leHRDaGlsZCkge1xuICAgICAgICAgICAgbmV4dENoaWxkID0gY2hpbGQubmV4dFNpYmxpbmc7XG4gICAgICAgICAgICBpZiAoY2hpbGQubm9kZVR5cGUgPT09IDgpXG4gICAgICAgICAgICAgICAgY2xlYW5TaW5nbGVOb2RlKGNoaWxkKTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiB7XG4gICAgICAgIGFkZERpc3Bvc2VDYWxsYmFjayA6IGZ1bmN0aW9uKG5vZGUsIGNhbGxiYWNrKSB7XG4gICAgICAgICAgICBpZiAodHlwZW9mIGNhbGxiYWNrICE9IFwiZnVuY3Rpb25cIilcbiAgICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJDYWxsYmFjayBtdXN0IGJlIGEgZnVuY3Rpb25cIik7XG4gICAgICAgICAgICBnZXREaXNwb3NlQ2FsbGJhY2tzQ29sbGVjdGlvbihub2RlLCB0cnVlKS5wdXNoKGNhbGxiYWNrKTtcbiAgICAgICAgfSxcblxuICAgICAgICByZW1vdmVEaXNwb3NlQ2FsbGJhY2sgOiBmdW5jdGlvbihub2RlLCBjYWxsYmFjaykge1xuICAgICAgICAgICAgdmFyIGNhbGxiYWNrc0NvbGxlY3Rpb24gPSBnZXREaXNwb3NlQ2FsbGJhY2tzQ29sbGVjdGlvbihub2RlLCBmYWxzZSk7XG4gICAgICAgICAgICBpZiAoY2FsbGJhY2tzQ29sbGVjdGlvbikge1xuICAgICAgICAgICAgICAgIGtvLnV0aWxzLmFycmF5UmVtb3ZlSXRlbShjYWxsYmFja3NDb2xsZWN0aW9uLCBjYWxsYmFjayk7XG4gICAgICAgICAgICAgICAgaWYgKGNhbGxiYWNrc0NvbGxlY3Rpb24ubGVuZ3RoID09IDApXG4gICAgICAgICAgICAgICAgICAgIGRlc3Ryb3lDYWxsYmFja3NDb2xsZWN0aW9uKG5vZGUpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9LFxuXG4gICAgICAgIGNsZWFuTm9kZSA6IGZ1bmN0aW9uKG5vZGUpIHtcbiAgICAgICAgICAgIC8vIEZpcnN0IGNsZWFuIHRoaXMgbm9kZSwgd2hlcmUgYXBwbGljYWJsZVxuICAgICAgICAgICAgaWYgKGNsZWFuYWJsZU5vZGVUeXBlc1tub2RlLm5vZGVUeXBlXSkge1xuICAgICAgICAgICAgICAgIGNsZWFuU2luZ2xlTm9kZShub2RlKTtcblxuICAgICAgICAgICAgICAgIC8vIC4uLiB0aGVuIGl0cyBkZXNjZW5kYW50cywgd2hlcmUgYXBwbGljYWJsZVxuICAgICAgICAgICAgICAgIGlmIChjbGVhbmFibGVOb2RlVHlwZXNXaXRoRGVzY2VuZGFudHNbbm9kZS5ub2RlVHlwZV0pIHtcbiAgICAgICAgICAgICAgICAgICAgLy8gQ2xvbmUgdGhlIGRlc2NlbmRhbnRzIGxpc3QgaW4gY2FzZSBpdCBjaGFuZ2VzIGR1cmluZyBpdGVyYXRpb25cbiAgICAgICAgICAgICAgICAgICAgdmFyIGRlc2NlbmRhbnRzID0gW107XG4gICAgICAgICAgICAgICAgICAgIGtvLnV0aWxzLmFycmF5UHVzaEFsbChkZXNjZW5kYW50cywgbm9kZS5nZXRFbGVtZW50c0J5VGFnTmFtZShcIipcIikpO1xuICAgICAgICAgICAgICAgICAgICBmb3IgKHZhciBpID0gMCwgaiA9IGRlc2NlbmRhbnRzLmxlbmd0aDsgaSA8IGo7IGkrKylcbiAgICAgICAgICAgICAgICAgICAgICAgIGNsZWFuU2luZ2xlTm9kZShkZXNjZW5kYW50c1tpXSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIG5vZGU7XG4gICAgICAgIH0sXG5cbiAgICAgICAgcmVtb3ZlTm9kZSA6IGZ1bmN0aW9uKG5vZGUpIHtcbiAgICAgICAgICAgIGtvLmNsZWFuTm9kZShub2RlKTtcbiAgICAgICAgICAgIGlmIChub2RlLnBhcmVudE5vZGUpXG4gICAgICAgICAgICAgICAgbm9kZS5wYXJlbnROb2RlLnJlbW92ZUNoaWxkKG5vZGUpO1xuICAgICAgICB9LFxuXG4gICAgICAgIFwiY2xlYW5FeHRlcm5hbERhdGFcIiA6IGZ1bmN0aW9uIChub2RlKSB7XG4gICAgICAgICAgICAvLyBTcGVjaWFsIHN1cHBvcnQgZm9yIGpRdWVyeSBoZXJlIGJlY2F1c2UgaXQncyBzbyBjb21tb25seSB1c2VkLlxuICAgICAgICAgICAgLy8gTWFueSBqUXVlcnkgcGx1Z2lucyAoaW5jbHVkaW5nIGpxdWVyeS50bXBsKSBzdG9yZSBkYXRhIHVzaW5nIGpRdWVyeSdzIGVxdWl2YWxlbnQgb2YgZG9tRGF0YVxuICAgICAgICAgICAgLy8gc28gbm90aWZ5IGl0IHRvIHRlYXIgZG93biBhbnkgcmVzb3VyY2VzIGFzc29jaWF0ZWQgd2l0aCB0aGUgbm9kZSAmIGRlc2NlbmRhbnRzIGhlcmUuXG4gICAgICAgICAgICBpZiAoalF1ZXJ5SW5zdGFuY2UgJiYgKHR5cGVvZiBqUXVlcnlJbnN0YW5jZVsnY2xlYW5EYXRhJ10gPT0gXCJmdW5jdGlvblwiKSlcbiAgICAgICAgICAgICAgICBqUXVlcnlJbnN0YW5jZVsnY2xlYW5EYXRhJ10oW25vZGVdKTtcbiAgICAgICAgfVxuICAgIH07XG59KSgpO1xua28uY2xlYW5Ob2RlID0ga28udXRpbHMuZG9tTm9kZURpc3Bvc2FsLmNsZWFuTm9kZTsgLy8gU2hvcnRoYW5kIG5hbWUgZm9yIGNvbnZlbmllbmNlXG5rby5yZW1vdmVOb2RlID0ga28udXRpbHMuZG9tTm9kZURpc3Bvc2FsLnJlbW92ZU5vZGU7IC8vIFNob3J0aGFuZCBuYW1lIGZvciBjb252ZW5pZW5jZVxua28uZXhwb3J0U3ltYm9sKCdjbGVhbk5vZGUnLCBrby5jbGVhbk5vZGUpO1xua28uZXhwb3J0U3ltYm9sKCdyZW1vdmVOb2RlJywga28ucmVtb3ZlTm9kZSk7XG5rby5leHBvcnRTeW1ib2woJ3V0aWxzLmRvbU5vZGVEaXNwb3NhbCcsIGtvLnV0aWxzLmRvbU5vZGVEaXNwb3NhbCk7XG5rby5leHBvcnRTeW1ib2woJ3V0aWxzLmRvbU5vZGVEaXNwb3NhbC5hZGREaXNwb3NlQ2FsbGJhY2snLCBrby51dGlscy5kb21Ob2RlRGlzcG9zYWwuYWRkRGlzcG9zZUNhbGxiYWNrKTtcbmtvLmV4cG9ydFN5bWJvbCgndXRpbHMuZG9tTm9kZURpc3Bvc2FsLnJlbW92ZURpc3Bvc2VDYWxsYmFjaycsIGtvLnV0aWxzLmRvbU5vZGVEaXNwb3NhbC5yZW1vdmVEaXNwb3NlQ2FsbGJhY2spO1xuKGZ1bmN0aW9uICgpIHtcbiAgICB2YXIgbm9uZSA9IFswLCBcIlwiLCBcIlwiXSxcbiAgICAgICAgdGFibGUgPSBbMSwgXCI8dGFibGU+XCIsIFwiPC90YWJsZT5cIl0sXG4gICAgICAgIHRib2R5ID0gWzIsIFwiPHRhYmxlPjx0Ym9keT5cIiwgXCI8L3Rib2R5PjwvdGFibGU+XCJdLFxuICAgICAgICB0ciA9IFszLCBcIjx0YWJsZT48dGJvZHk+PHRyPlwiLCBcIjwvdHI+PC90Ym9keT48L3RhYmxlPlwiXSxcbiAgICAgICAgc2VsZWN0ID0gWzEsIFwiPHNlbGVjdCBtdWx0aXBsZT0nbXVsdGlwbGUnPlwiLCBcIjwvc2VsZWN0PlwiXSxcbiAgICAgICAgbG9va3VwID0ge1xuICAgICAgICAgICAgJ3RoZWFkJzogdGFibGUsXG4gICAgICAgICAgICAndGJvZHknOiB0YWJsZSxcbiAgICAgICAgICAgICd0Zm9vdCc6IHRhYmxlLFxuICAgICAgICAgICAgJ3RyJzogdGJvZHksXG4gICAgICAgICAgICAndGQnOiB0cixcbiAgICAgICAgICAgICd0aCc6IHRyLFxuICAgICAgICAgICAgJ29wdGlvbic6IHNlbGVjdCxcbiAgICAgICAgICAgICdvcHRncm91cCc6IHNlbGVjdFxuICAgICAgICB9LFxuXG4gICAgICAgIC8vIFRoaXMgaXMgbmVlZGVkIGZvciBvbGQgSUUgaWYgeW91J3JlICpub3QqIHVzaW5nIGVpdGhlciBqUXVlcnkgb3IgaW5uZXJTaGl2LiBEb2Vzbid0IGFmZmVjdCBvdGhlciBjYXNlcy5cbiAgICAgICAgbWF5UmVxdWlyZUNyZWF0ZUVsZW1lbnRIYWNrID0ga28udXRpbHMuaWVWZXJzaW9uIDw9IDg7XG5cbiAgICBmdW5jdGlvbiBnZXRXcmFwKHRhZ3MpIHtcbiAgICAgICAgdmFyIG0gPSB0YWdzLm1hdGNoKC9ePChbYS16XSspWyA+XS8pO1xuICAgICAgICByZXR1cm4gKG0gJiYgbG9va3VwW21bMV1dKSB8fCBub25lO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIHNpbXBsZUh0bWxQYXJzZShodG1sLCBkb2N1bWVudENvbnRleHQpIHtcbiAgICAgICAgZG9jdW1lbnRDb250ZXh0IHx8IChkb2N1bWVudENvbnRleHQgPSBkb2N1bWVudCk7XG4gICAgICAgIHZhciB3aW5kb3dDb250ZXh0ID0gZG9jdW1lbnRDb250ZXh0WydwYXJlbnRXaW5kb3cnXSB8fCBkb2N1bWVudENvbnRleHRbJ2RlZmF1bHRWaWV3J10gfHwgd2luZG93O1xuXG4gICAgICAgIC8vIEJhc2VkIG9uIGpRdWVyeSdzIFwiY2xlYW5cIiBmdW5jdGlvbiwgYnV0IG9ubHkgYWNjb3VudGluZyBmb3IgdGFibGUtcmVsYXRlZCBlbGVtZW50cy5cbiAgICAgICAgLy8gSWYgeW91IGhhdmUgcmVmZXJlbmNlZCBqUXVlcnksIHRoaXMgd29uJ3QgYmUgdXNlZCBhbnl3YXkgLSBLTyB3aWxsIHVzZSBqUXVlcnkncyBcImNsZWFuXCIgZnVuY3Rpb24gZGlyZWN0bHlcblxuICAgICAgICAvLyBOb3RlIHRoYXQgdGhlcmUncyBzdGlsbCBhbiBpc3N1ZSBpbiBJRSA8IDkgd2hlcmVieSBpdCB3aWxsIGRpc2NhcmQgY29tbWVudCBub2RlcyB0aGF0IGFyZSB0aGUgZmlyc3QgY2hpbGQgb2ZcbiAgICAgICAgLy8gYSBkZXNjZW5kYW50IG5vZGUuIEZvciBleGFtcGxlOiBcIjxkaXY+PCEtLSBteWNvbW1lbnQgLS0+YWJjPC9kaXY+XCIgd2lsbCBnZXQgcGFyc2VkIGFzIFwiPGRpdj5hYmM8L2Rpdj5cIlxuICAgICAgICAvLyBUaGlzIHdvbid0IGFmZmVjdCBhbnlvbmUgd2hvIGhhcyByZWZlcmVuY2VkIGpRdWVyeSwgYW5kIHRoZXJlJ3MgYWx3YXlzIHRoZSB3b3JrYXJvdW5kIG9mIGluc2VydGluZyBhIGR1bW15IG5vZGVcbiAgICAgICAgLy8gKHBvc3NpYmx5IGEgdGV4dCBub2RlKSBpbiBmcm9udCBvZiB0aGUgY29tbWVudC4gU28sIEtPIGRvZXMgbm90IGF0dGVtcHQgdG8gd29ya2Fyb3VuZCB0aGlzIElFIGlzc3VlIGF1dG9tYXRpY2FsbHkgYXQgcHJlc2VudC5cblxuICAgICAgICAvLyBUcmltIHdoaXRlc3BhY2UsIG90aGVyd2lzZSBpbmRleE9mIHdvbid0IHdvcmsgYXMgZXhwZWN0ZWRcbiAgICAgICAgdmFyIHRhZ3MgPSBrby51dGlscy5zdHJpbmdUcmltKGh0bWwpLnRvTG93ZXJDYXNlKCksIGRpdiA9IGRvY3VtZW50Q29udGV4dC5jcmVhdGVFbGVtZW50KFwiZGl2XCIpLFxuICAgICAgICAgICAgd3JhcCA9IGdldFdyYXAodGFncyksXG4gICAgICAgICAgICBkZXB0aCA9IHdyYXBbMF07XG5cbiAgICAgICAgLy8gR28gdG8gaHRtbCBhbmQgYmFjaywgdGhlbiBwZWVsIG9mZiBleHRyYSB3cmFwcGVyc1xuICAgICAgICAvLyBOb3RlIHRoYXQgd2UgYWx3YXlzIHByZWZpeCB3aXRoIHNvbWUgZHVtbXkgdGV4dCwgYmVjYXVzZSBvdGhlcndpc2UsIElFPDkgd2lsbCBzdHJpcCBvdXQgbGVhZGluZyBjb21tZW50IG5vZGVzIGluIGRlc2NlbmRhbnRzLiBUb3RhbCBtYWRuZXNzLlxuICAgICAgICB2YXIgbWFya3VwID0gXCJpZ25vcmVkPGRpdj5cIiArIHdyYXBbMV0gKyBodG1sICsgd3JhcFsyXSArIFwiPC9kaXY+XCI7XG4gICAgICAgIGlmICh0eXBlb2Ygd2luZG93Q29udGV4dFsnaW5uZXJTaGl2J10gPT0gXCJmdW5jdGlvblwiKSB7XG4gICAgICAgICAgICAvLyBOb3RlIHRoYXQgaW5uZXJTaGl2IGlzIGRlcHJlY2F0ZWQgaW4gZmF2b3VyIG9mIGh0bWw1c2hpdi4gV2Ugc2hvdWxkIGNvbnNpZGVyIGFkZGluZ1xuICAgICAgICAgICAgLy8gc3VwcG9ydCBmb3IgaHRtbDVzaGl2IChleGNlcHQgaWYgbm8gZXhwbGljaXQgc3VwcG9ydCBpcyBuZWVkZWQsIGUuZy4sIGlmIGh0bWw1c2hpdlxuICAgICAgICAgICAgLy8gc29tZWhvdyBzaGltcyB0aGUgbmF0aXZlIEFQSXMgc28gaXQganVzdCB3b3JrcyBhbnl3YXkpXG4gICAgICAgICAgICBkaXYuYXBwZW5kQ2hpbGQod2luZG93Q29udGV4dFsnaW5uZXJTaGl2J10obWFya3VwKSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBpZiAobWF5UmVxdWlyZUNyZWF0ZUVsZW1lbnRIYWNrKSB7XG4gICAgICAgICAgICAgICAgLy8gVGhlIGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ215LWVsZW1lbnQnKSB0cmljayB0byBlbmFibGUgY3VzdG9tIGVsZW1lbnRzIGluIElFNi04XG4gICAgICAgICAgICAgICAgLy8gb25seSB3b3JrcyBpZiB3ZSBhc3NpZ24gaW5uZXJIVE1MIG9uIGFuIGVsZW1lbnQgYXNzb2NpYXRlZCB3aXRoIHRoYXQgZG9jdW1lbnQuXG4gICAgICAgICAgICAgICAgZG9jdW1lbnRDb250ZXh0LmFwcGVuZENoaWxkKGRpdik7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGRpdi5pbm5lckhUTUwgPSBtYXJrdXA7XG5cbiAgICAgICAgICAgIGlmIChtYXlSZXF1aXJlQ3JlYXRlRWxlbWVudEhhY2spIHtcbiAgICAgICAgICAgICAgICBkaXYucGFyZW50Tm9kZS5yZW1vdmVDaGlsZChkaXYpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgLy8gTW92ZSB0byB0aGUgcmlnaHQgZGVwdGhcbiAgICAgICAgd2hpbGUgKGRlcHRoLS0pXG4gICAgICAgICAgICBkaXYgPSBkaXYubGFzdENoaWxkO1xuXG4gICAgICAgIHJldHVybiBrby51dGlscy5tYWtlQXJyYXkoZGl2Lmxhc3RDaGlsZC5jaGlsZE5vZGVzKTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBqUXVlcnlIdG1sUGFyc2UoaHRtbCwgZG9jdW1lbnRDb250ZXh0KSB7XG4gICAgICAgIC8vIGpRdWVyeSdzIFwicGFyc2VIVE1MXCIgZnVuY3Rpb24gd2FzIGludHJvZHVjZWQgaW4galF1ZXJ5IDEuOC4wIGFuZCBpcyBhIGRvY3VtZW50ZWQgcHVibGljIEFQSS5cbiAgICAgICAgaWYgKGpRdWVyeUluc3RhbmNlWydwYXJzZUhUTUwnXSkge1xuICAgICAgICAgICAgcmV0dXJuIGpRdWVyeUluc3RhbmNlWydwYXJzZUhUTUwnXShodG1sLCBkb2N1bWVudENvbnRleHQpIHx8IFtdOyAvLyBFbnN1cmUgd2UgYWx3YXlzIHJldHVybiBhbiBhcnJheSBhbmQgbmV2ZXIgbnVsbFxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgLy8gRm9yIGpRdWVyeSA8IDEuOC4wLCB3ZSBmYWxsIGJhY2sgb24gdGhlIHVuZG9jdW1lbnRlZCBpbnRlcm5hbCBcImNsZWFuXCIgZnVuY3Rpb24uXG4gICAgICAgICAgICB2YXIgZWxlbXMgPSBqUXVlcnlJbnN0YW5jZVsnY2xlYW4nXShbaHRtbF0sIGRvY3VtZW50Q29udGV4dCk7XG5cbiAgICAgICAgICAgIC8vIEFzIG9mIGpRdWVyeSAxLjcuMSwgalF1ZXJ5IHBhcnNlcyB0aGUgSFRNTCBieSBhcHBlbmRpbmcgaXQgdG8gc29tZSBkdW1teSBwYXJlbnQgbm9kZXMgaGVsZCBpbiBhbiBpbi1tZW1vcnkgZG9jdW1lbnQgZnJhZ21lbnQuXG4gICAgICAgICAgICAvLyBVbmZvcnR1bmF0ZWx5LCBpdCBuZXZlciBjbGVhcnMgdGhlIGR1bW15IHBhcmVudCBub2RlcyBmcm9tIHRoZSBkb2N1bWVudCBmcmFnbWVudCwgc28gaXQgbGVha3MgbWVtb3J5IG92ZXIgdGltZS5cbiAgICAgICAgICAgIC8vIEZpeCB0aGlzIGJ5IGZpbmRpbmcgdGhlIHRvcC1tb3N0IGR1bW15IHBhcmVudCBlbGVtZW50LCBhbmQgZGV0YWNoaW5nIGl0IGZyb20gaXRzIG93bmVyIGZyYWdtZW50LlxuICAgICAgICAgICAgaWYgKGVsZW1zICYmIGVsZW1zWzBdKSB7XG4gICAgICAgICAgICAgICAgLy8gRmluZCB0aGUgdG9wLW1vc3QgcGFyZW50IGVsZW1lbnQgdGhhdCdzIGEgZGlyZWN0IGNoaWxkIG9mIGEgZG9jdW1lbnQgZnJhZ21lbnRcbiAgICAgICAgICAgICAgICB2YXIgZWxlbSA9IGVsZW1zWzBdO1xuICAgICAgICAgICAgICAgIHdoaWxlIChlbGVtLnBhcmVudE5vZGUgJiYgZWxlbS5wYXJlbnROb2RlLm5vZGVUeXBlICE9PSAxMSAvKiBpLmUuLCBEb2N1bWVudEZyYWdtZW50ICovKVxuICAgICAgICAgICAgICAgICAgICBlbGVtID0gZWxlbS5wYXJlbnROb2RlO1xuICAgICAgICAgICAgICAgIC8vIC4uLiB0aGVuIGRldGFjaCBpdFxuICAgICAgICAgICAgICAgIGlmIChlbGVtLnBhcmVudE5vZGUpXG4gICAgICAgICAgICAgICAgICAgIGVsZW0ucGFyZW50Tm9kZS5yZW1vdmVDaGlsZChlbGVtKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgcmV0dXJuIGVsZW1zO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAga28udXRpbHMucGFyc2VIdG1sRnJhZ21lbnQgPSBmdW5jdGlvbihodG1sLCBkb2N1bWVudENvbnRleHQpIHtcbiAgICAgICAgcmV0dXJuIGpRdWVyeUluc3RhbmNlID9cbiAgICAgICAgICAgIGpRdWVyeUh0bWxQYXJzZShodG1sLCBkb2N1bWVudENvbnRleHQpIDogICAvLyBBcyBiZWxvdywgYmVuZWZpdCBmcm9tIGpRdWVyeSdzIG9wdGltaXNhdGlvbnMgd2hlcmUgcG9zc2libGVcbiAgICAgICAgICAgIHNpbXBsZUh0bWxQYXJzZShodG1sLCBkb2N1bWVudENvbnRleHQpOyAgLy8gLi4uIG90aGVyd2lzZSwgdGhpcyBzaW1wbGUgbG9naWMgd2lsbCBkbyBpbiBtb3N0IGNvbW1vbiBjYXNlcy5cbiAgICB9O1xuXG4gICAga28udXRpbHMuc2V0SHRtbCA9IGZ1bmN0aW9uKG5vZGUsIGh0bWwpIHtcbiAgICAgICAga28udXRpbHMuZW1wdHlEb21Ob2RlKG5vZGUpO1xuXG4gICAgICAgIC8vIFRoZXJlJ3Mgbm8gbGVnaXRpbWF0ZSByZWFzb24gdG8gZGlzcGxheSBhIHN0cmluZ2lmaWVkIG9ic2VydmFibGUgd2l0aG91dCB1bndyYXBwaW5nIGl0LCBzbyB3ZSdsbCB1bndyYXAgaXRcbiAgICAgICAgaHRtbCA9IGtvLnV0aWxzLnVud3JhcE9ic2VydmFibGUoaHRtbCk7XG5cbiAgICAgICAgaWYgKChodG1sICE9PSBudWxsKSAmJiAoaHRtbCAhPT0gdW5kZWZpbmVkKSkge1xuICAgICAgICAgICAgaWYgKHR5cGVvZiBodG1sICE9ICdzdHJpbmcnKVxuICAgICAgICAgICAgICAgIGh0bWwgPSBodG1sLnRvU3RyaW5nKCk7XG5cbiAgICAgICAgICAgIC8vIGpRdWVyeSBjb250YWlucyBhIGxvdCBvZiBzb3BoaXN0aWNhdGVkIGNvZGUgdG8gcGFyc2UgYXJiaXRyYXJ5IEhUTUwgZnJhZ21lbnRzLFxuICAgICAgICAgICAgLy8gZm9yIGV4YW1wbGUgPHRyPiBlbGVtZW50cyB3aGljaCBhcmUgbm90IG5vcm1hbGx5IGFsbG93ZWQgdG8gZXhpc3Qgb24gdGhlaXIgb3duLlxuICAgICAgICAgICAgLy8gSWYgeW91J3ZlIHJlZmVyZW5jZWQgalF1ZXJ5IHdlJ2xsIHVzZSB0aGF0IHJhdGhlciB0aGFuIGR1cGxpY2F0aW5nIGl0cyBjb2RlLlxuICAgICAgICAgICAgaWYgKGpRdWVyeUluc3RhbmNlKSB7XG4gICAgICAgICAgICAgICAgalF1ZXJ5SW5zdGFuY2Uobm9kZSlbJ2h0bWwnXShodG1sKTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgLy8gLi4uIG90aGVyd2lzZSwgdXNlIEtPJ3Mgb3duIHBhcnNpbmcgbG9naWMuXG4gICAgICAgICAgICAgICAgdmFyIHBhcnNlZE5vZGVzID0ga28udXRpbHMucGFyc2VIdG1sRnJhZ21lbnQoaHRtbCwgbm9kZS5vd25lckRvY3VtZW50KTtcbiAgICAgICAgICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IHBhcnNlZE5vZGVzLmxlbmd0aDsgaSsrKVxuICAgICAgICAgICAgICAgICAgICBub2RlLmFwcGVuZENoaWxkKHBhcnNlZE5vZGVzW2ldKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH07XG59KSgpO1xuXG5rby5leHBvcnRTeW1ib2woJ3V0aWxzLnBhcnNlSHRtbEZyYWdtZW50Jywga28udXRpbHMucGFyc2VIdG1sRnJhZ21lbnQpO1xua28uZXhwb3J0U3ltYm9sKCd1dGlscy5zZXRIdG1sJywga28udXRpbHMuc2V0SHRtbCk7XG5cbmtvLm1lbW9pemF0aW9uID0gKGZ1bmN0aW9uICgpIHtcbiAgICB2YXIgbWVtb3MgPSB7fTtcblxuICAgIGZ1bmN0aW9uIHJhbmRvbU1heDhIZXhDaGFycygpIHtcbiAgICAgICAgcmV0dXJuICgoKDEgKyBNYXRoLnJhbmRvbSgpKSAqIDB4MTAwMDAwMDAwKSB8IDApLnRvU3RyaW5nKDE2KS5zdWJzdHJpbmcoMSk7XG4gICAgfVxuICAgIGZ1bmN0aW9uIGdlbmVyYXRlUmFuZG9tSWQoKSB7XG4gICAgICAgIHJldHVybiByYW5kb21NYXg4SGV4Q2hhcnMoKSArIHJhbmRvbU1heDhIZXhDaGFycygpO1xuICAgIH1cbiAgICBmdW5jdGlvbiBmaW5kTWVtb05vZGVzKHJvb3ROb2RlLCBhcHBlbmRUb0FycmF5KSB7XG4gICAgICAgIGlmICghcm9vdE5vZGUpXG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIGlmIChyb290Tm9kZS5ub2RlVHlwZSA9PSA4KSB7XG4gICAgICAgICAgICB2YXIgbWVtb0lkID0ga28ubWVtb2l6YXRpb24ucGFyc2VNZW1vVGV4dChyb290Tm9kZS5ub2RlVmFsdWUpO1xuICAgICAgICAgICAgaWYgKG1lbW9JZCAhPSBudWxsKVxuICAgICAgICAgICAgICAgIGFwcGVuZFRvQXJyYXkucHVzaCh7IGRvbU5vZGU6IHJvb3ROb2RlLCBtZW1vSWQ6IG1lbW9JZCB9KTtcbiAgICAgICAgfSBlbHNlIGlmIChyb290Tm9kZS5ub2RlVHlwZSA9PSAxKSB7XG4gICAgICAgICAgICBmb3IgKHZhciBpID0gMCwgY2hpbGROb2RlcyA9IHJvb3ROb2RlLmNoaWxkTm9kZXMsIGogPSBjaGlsZE5vZGVzLmxlbmd0aDsgaSA8IGo7IGkrKylcbiAgICAgICAgICAgICAgICBmaW5kTWVtb05vZGVzKGNoaWxkTm9kZXNbaV0sIGFwcGVuZFRvQXJyYXkpO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIHtcbiAgICAgICAgbWVtb2l6ZTogZnVuY3Rpb24gKGNhbGxiYWNrKSB7XG4gICAgICAgICAgICBpZiAodHlwZW9mIGNhbGxiYWNrICE9IFwiZnVuY3Rpb25cIilcbiAgICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJZb3UgY2FuIG9ubHkgcGFzcyBhIGZ1bmN0aW9uIHRvIGtvLm1lbW9pemF0aW9uLm1lbW9pemUoKVwiKTtcbiAgICAgICAgICAgIHZhciBtZW1vSWQgPSBnZW5lcmF0ZVJhbmRvbUlkKCk7XG4gICAgICAgICAgICBtZW1vc1ttZW1vSWRdID0gY2FsbGJhY2s7XG4gICAgICAgICAgICByZXR1cm4gXCI8IS0tW2tvX21lbW86XCIgKyBtZW1vSWQgKyBcIl0tLT5cIjtcbiAgICAgICAgfSxcblxuICAgICAgICB1bm1lbW9pemU6IGZ1bmN0aW9uIChtZW1vSWQsIGNhbGxiYWNrUGFyYW1zKSB7XG4gICAgICAgICAgICB2YXIgY2FsbGJhY2sgPSBtZW1vc1ttZW1vSWRdO1xuICAgICAgICAgICAgaWYgKGNhbGxiYWNrID09PSB1bmRlZmluZWQpXG4gICAgICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiQ291bGRuJ3QgZmluZCBhbnkgbWVtbyB3aXRoIElEIFwiICsgbWVtb0lkICsgXCIuIFBlcmhhcHMgaXQncyBhbHJlYWR5IGJlZW4gdW5tZW1vaXplZC5cIik7XG4gICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgIGNhbGxiYWNrLmFwcGx5KG51bGwsIGNhbGxiYWNrUGFyYW1zIHx8IFtdKTtcbiAgICAgICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGZpbmFsbHkgeyBkZWxldGUgbWVtb3NbbWVtb0lkXTsgfVxuICAgICAgICB9LFxuXG4gICAgICAgIHVubWVtb2l6ZURvbU5vZGVBbmREZXNjZW5kYW50czogZnVuY3Rpb24gKGRvbU5vZGUsIGV4dHJhQ2FsbGJhY2tQYXJhbXNBcnJheSkge1xuICAgICAgICAgICAgdmFyIG1lbW9zID0gW107XG4gICAgICAgICAgICBmaW5kTWVtb05vZGVzKGRvbU5vZGUsIG1lbW9zKTtcbiAgICAgICAgICAgIGZvciAodmFyIGkgPSAwLCBqID0gbWVtb3MubGVuZ3RoOyBpIDwgajsgaSsrKSB7XG4gICAgICAgICAgICAgICAgdmFyIG5vZGUgPSBtZW1vc1tpXS5kb21Ob2RlO1xuICAgICAgICAgICAgICAgIHZhciBjb21iaW5lZFBhcmFtcyA9IFtub2RlXTtcbiAgICAgICAgICAgICAgICBpZiAoZXh0cmFDYWxsYmFja1BhcmFtc0FycmF5KVxuICAgICAgICAgICAgICAgICAgICBrby51dGlscy5hcnJheVB1c2hBbGwoY29tYmluZWRQYXJhbXMsIGV4dHJhQ2FsbGJhY2tQYXJhbXNBcnJheSk7XG4gICAgICAgICAgICAgICAga28ubWVtb2l6YXRpb24udW5tZW1vaXplKG1lbW9zW2ldLm1lbW9JZCwgY29tYmluZWRQYXJhbXMpO1xuICAgICAgICAgICAgICAgIG5vZGUubm9kZVZhbHVlID0gXCJcIjsgLy8gTmV1dGVyIHRoaXMgbm9kZSBzbyB3ZSBkb24ndCB0cnkgdG8gdW5tZW1vaXplIGl0IGFnYWluXG4gICAgICAgICAgICAgICAgaWYgKG5vZGUucGFyZW50Tm9kZSlcbiAgICAgICAgICAgICAgICAgICAgbm9kZS5wYXJlbnROb2RlLnJlbW92ZUNoaWxkKG5vZGUpOyAvLyBJZiBwb3NzaWJsZSwgZXJhc2UgaXQgdG90YWxseSAobm90IGFsd2F5cyBwb3NzaWJsZSAtIHNvbWVvbmUgZWxzZSBtaWdodCBqdXN0IGhvbGQgYSByZWZlcmVuY2UgdG8gaXQgdGhlbiBjYWxsIHVubWVtb2l6ZURvbU5vZGVBbmREZXNjZW5kYW50cyBhZ2FpbilcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSxcblxuICAgICAgICBwYXJzZU1lbW9UZXh0OiBmdW5jdGlvbiAobWVtb1RleHQpIHtcbiAgICAgICAgICAgIHZhciBtYXRjaCA9IG1lbW9UZXh0Lm1hdGNoKC9eXFxba29fbWVtb1xcOiguKj8pXFxdJC8pO1xuICAgICAgICAgICAgcmV0dXJuIG1hdGNoID8gbWF0Y2hbMV0gOiBudWxsO1xuICAgICAgICB9XG4gICAgfTtcbn0pKCk7XG5cbmtvLmV4cG9ydFN5bWJvbCgnbWVtb2l6YXRpb24nLCBrby5tZW1vaXphdGlvbik7XG5rby5leHBvcnRTeW1ib2woJ21lbW9pemF0aW9uLm1lbW9pemUnLCBrby5tZW1vaXphdGlvbi5tZW1vaXplKTtcbmtvLmV4cG9ydFN5bWJvbCgnbWVtb2l6YXRpb24udW5tZW1vaXplJywga28ubWVtb2l6YXRpb24udW5tZW1vaXplKTtcbmtvLmV4cG9ydFN5bWJvbCgnbWVtb2l6YXRpb24ucGFyc2VNZW1vVGV4dCcsIGtvLm1lbW9pemF0aW9uLnBhcnNlTWVtb1RleHQpO1xua28uZXhwb3J0U3ltYm9sKCdtZW1vaXphdGlvbi51bm1lbW9pemVEb21Ob2RlQW5kRGVzY2VuZGFudHMnLCBrby5tZW1vaXphdGlvbi51bm1lbW9pemVEb21Ob2RlQW5kRGVzY2VuZGFudHMpO1xua28udGFza3MgPSAoZnVuY3Rpb24gKCkge1xuICAgIHZhciBzY2hlZHVsZXIsXG4gICAgICAgIHRhc2tRdWV1ZSA9IFtdLFxuICAgICAgICB0YXNrUXVldWVMZW5ndGggPSAwLFxuICAgICAgICBuZXh0SGFuZGxlID0gMSxcbiAgICAgICAgbmV4dEluZGV4VG9Qcm9jZXNzID0gMDtcblxuICAgIGlmICh3aW5kb3dbJ011dGF0aW9uT2JzZXJ2ZXInXSkge1xuICAgICAgICAvLyBDaHJvbWUgMjcrLCBGaXJlZm94IDE0KywgSUUgMTErLCBPcGVyYSAxNSssIFNhZmFyaSA2LjErXG4gICAgICAgIC8vIEZyb20gaHR0cHM6Ly9naXRodWIuY29tL3BldGthYW50b25vdi9ibHVlYmlyZCAqIENvcHlyaWdodCAoYykgMjAxNCBQZXRrYSBBbnRvbm92ICogTGljZW5zZTogTUlUXG4gICAgICAgIHNjaGVkdWxlciA9IChmdW5jdGlvbiAoY2FsbGJhY2spIHtcbiAgICAgICAgICAgIHZhciBkaXYgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiZGl2XCIpO1xuICAgICAgICAgICAgbmV3IE11dGF0aW9uT2JzZXJ2ZXIoY2FsbGJhY2spLm9ic2VydmUoZGl2LCB7YXR0cmlidXRlczogdHJ1ZX0pO1xuICAgICAgICAgICAgcmV0dXJuIGZ1bmN0aW9uICgpIHsgZGl2LmNsYXNzTGlzdC50b2dnbGUoXCJmb29cIik7IH07XG4gICAgICAgIH0pKHNjaGVkdWxlZFByb2Nlc3MpO1xuICAgIH0gZWxzZSBpZiAoZG9jdW1lbnQgJiYgXCJvbnJlYWR5c3RhdGVjaGFuZ2VcIiBpbiBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwic2NyaXB0XCIpKSB7XG4gICAgICAgIC8vIElFIDYtMTBcbiAgICAgICAgLy8gRnJvbSBodHRwczovL2dpdGh1Yi5jb20vWXV6dUpTL3NldEltbWVkaWF0ZSAqIENvcHlyaWdodCAoYykgMjAxMiBCYXJuZXNhbmRub2JsZS5jb20sIGxsYywgRG9uYXZvbiBXZXN0LCBhbmQgRG9tZW5pYyBEZW5pY29sYSAqIExpY2Vuc2U6IE1JVFxuICAgICAgICBzY2hlZHVsZXIgPSBmdW5jdGlvbiAoY2FsbGJhY2spIHtcbiAgICAgICAgICAgIHZhciBzY3JpcHQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwic2NyaXB0XCIpO1xuICAgICAgICAgICAgc2NyaXB0Lm9ucmVhZHlzdGF0ZWNoYW5nZSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICBzY3JpcHQub25yZWFkeXN0YXRlY2hhbmdlID0gbnVsbDtcbiAgICAgICAgICAgICAgICBkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQucmVtb3ZlQ2hpbGQoc2NyaXB0KTtcbiAgICAgICAgICAgICAgICBzY3JpcHQgPSBudWxsO1xuICAgICAgICAgICAgICAgIGNhbGxiYWNrKCk7XG4gICAgICAgICAgICB9O1xuICAgICAgICAgICAgZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50LmFwcGVuZENoaWxkKHNjcmlwdCk7XG4gICAgICAgIH07XG4gICAgfSBlbHNlIHtcbiAgICAgICAgc2NoZWR1bGVyID0gZnVuY3Rpb24gKGNhbGxiYWNrKSB7XG4gICAgICAgICAgICBzZXRUaW1lb3V0KGNhbGxiYWNrLCAwKTtcbiAgICAgICAgfTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBwcm9jZXNzVGFza3MoKSB7XG4gICAgICAgIGlmICh0YXNrUXVldWVMZW5ndGgpIHtcbiAgICAgICAgICAgIC8vIEVhY2ggbWFyayByZXByZXNlbnRzIHRoZSBlbmQgb2YgYSBsb2dpY2FsIGdyb3VwIG9mIHRhc2tzIGFuZCB0aGUgbnVtYmVyIG9mIHRoZXNlIGdyb3VwcyBpc1xuICAgICAgICAgICAgLy8gbGltaXRlZCB0byBwcmV2ZW50IHVuY2hlY2tlZCByZWN1cnNpb24uXG4gICAgICAgICAgICB2YXIgbWFyayA9IHRhc2tRdWV1ZUxlbmd0aCwgY291bnRNYXJrcyA9IDA7XG5cbiAgICAgICAgICAgIC8vIG5leHRJbmRleFRvUHJvY2VzcyBrZWVwcyB0cmFjayBvZiB3aGVyZSB3ZSBhcmUgaW4gdGhlIHF1ZXVlOyBwcm9jZXNzVGFza3MgY2FuIGJlIGNhbGxlZCByZWN1cnNpdmVseSB3aXRob3V0IGlzc3VlXG4gICAgICAgICAgICBmb3IgKHZhciB0YXNrOyBuZXh0SW5kZXhUb1Byb2Nlc3MgPCB0YXNrUXVldWVMZW5ndGg7ICkge1xuICAgICAgICAgICAgICAgIGlmICh0YXNrID0gdGFza1F1ZXVlW25leHRJbmRleFRvUHJvY2VzcysrXSkge1xuICAgICAgICAgICAgICAgICAgICBpZiAobmV4dEluZGV4VG9Qcm9jZXNzID4gbWFyaykge1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCsrY291bnRNYXJrcyA+PSA1MDAwKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbmV4dEluZGV4VG9Qcm9jZXNzID0gdGFza1F1ZXVlTGVuZ3RoOyAgIC8vIHNraXAgYWxsIHRhc2tzIHJlbWFpbmluZyBpbiB0aGUgcXVldWUgc2luY2UgYW55IG9mIHRoZW0gY291bGQgYmUgY2F1c2luZyB0aGUgcmVjdXJzaW9uXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAga28udXRpbHMuZGVmZXJFcnJvcihFcnJvcihcIidUb28gbXVjaCByZWN1cnNpb24nIGFmdGVyIHByb2Nlc3NpbmcgXCIgKyBjb3VudE1hcmtzICsgXCIgdGFzayBncm91cHMuXCIpKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIG1hcmsgPSB0YXNrUXVldWVMZW5ndGg7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRhc2soKTtcbiAgICAgICAgICAgICAgICAgICAgfSBjYXRjaCAoZXgpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGtvLnV0aWxzLmRlZmVyRXJyb3IoZXgpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gc2NoZWR1bGVkUHJvY2VzcygpIHtcbiAgICAgICAgcHJvY2Vzc1Rhc2tzKCk7XG5cbiAgICAgICAgLy8gUmVzZXQgdGhlIHF1ZXVlXG4gICAgICAgIG5leHRJbmRleFRvUHJvY2VzcyA9IHRhc2tRdWV1ZUxlbmd0aCA9IHRhc2tRdWV1ZS5sZW5ndGggPSAwO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIHNjaGVkdWxlVGFza1Byb2Nlc3NpbmcoKSB7XG4gICAgICAgIGtvLnRhc2tzWydzY2hlZHVsZXInXShzY2hlZHVsZWRQcm9jZXNzKTtcbiAgICB9XG5cbiAgICB2YXIgdGFza3MgPSB7XG4gICAgICAgICdzY2hlZHVsZXInOiBzY2hlZHVsZXIsICAgICAvLyBBbGxvdyBvdmVycmlkaW5nIHRoZSBzY2hlZHVsZXJcblxuICAgICAgICBzY2hlZHVsZTogZnVuY3Rpb24gKGZ1bmMpIHtcbiAgICAgICAgICAgIGlmICghdGFza1F1ZXVlTGVuZ3RoKSB7XG4gICAgICAgICAgICAgICAgc2NoZWR1bGVUYXNrUHJvY2Vzc2luZygpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICB0YXNrUXVldWVbdGFza1F1ZXVlTGVuZ3RoKytdID0gZnVuYztcbiAgICAgICAgICAgIHJldHVybiBuZXh0SGFuZGxlKys7XG4gICAgICAgIH0sXG5cbiAgICAgICAgY2FuY2VsOiBmdW5jdGlvbiAoaGFuZGxlKSB7XG4gICAgICAgICAgICB2YXIgaW5kZXggPSBoYW5kbGUgLSAobmV4dEhhbmRsZSAtIHRhc2tRdWV1ZUxlbmd0aCk7XG4gICAgICAgICAgICBpZiAoaW5kZXggPj0gbmV4dEluZGV4VG9Qcm9jZXNzICYmIGluZGV4IDwgdGFza1F1ZXVlTGVuZ3RoKSB7XG4gICAgICAgICAgICAgICAgdGFza1F1ZXVlW2luZGV4XSA9IG51bGw7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0sXG5cbiAgICAgICAgLy8gRm9yIHRlc3Rpbmcgb25seTogcmVzZXQgdGhlIHF1ZXVlIGFuZCByZXR1cm4gdGhlIHByZXZpb3VzIHF1ZXVlIGxlbmd0aFxuICAgICAgICAncmVzZXRGb3JUZXN0aW5nJzogZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgdmFyIGxlbmd0aCA9IHRhc2tRdWV1ZUxlbmd0aCAtIG5leHRJbmRleFRvUHJvY2VzcztcbiAgICAgICAgICAgIG5leHRJbmRleFRvUHJvY2VzcyA9IHRhc2tRdWV1ZUxlbmd0aCA9IHRhc2tRdWV1ZS5sZW5ndGggPSAwO1xuICAgICAgICAgICAgcmV0dXJuIGxlbmd0aDtcbiAgICAgICAgfSxcblxuICAgICAgICBydW5FYXJseTogcHJvY2Vzc1Rhc2tzXG4gICAgfTtcblxuICAgIHJldHVybiB0YXNrcztcbn0pKCk7XG5cbmtvLmV4cG9ydFN5bWJvbCgndGFza3MnLCBrby50YXNrcyk7XG5rby5leHBvcnRTeW1ib2woJ3Rhc2tzLnNjaGVkdWxlJywga28udGFza3Muc2NoZWR1bGUpO1xuLy9rby5leHBvcnRTeW1ib2woJ3Rhc2tzLmNhbmNlbCcsIGtvLnRhc2tzLmNhbmNlbCk7ICBcImNhbmNlbFwiIGlzbid0IG1pbmlmaWVkXG5rby5leHBvcnRTeW1ib2woJ3Rhc2tzLnJ1bkVhcmx5Jywga28udGFza3MucnVuRWFybHkpO1xua28uZXh0ZW5kZXJzID0ge1xuICAgICd0aHJvdHRsZSc6IGZ1bmN0aW9uKHRhcmdldCwgdGltZW91dCkge1xuICAgICAgICAvLyBUaHJvdHRsaW5nIG1lYW5zIHR3byB0aGluZ3M6XG5cbiAgICAgICAgLy8gKDEpIEZvciBkZXBlbmRlbnQgb2JzZXJ2YWJsZXMsIHdlIHRocm90dGxlICpldmFsdWF0aW9ucyogc28gdGhhdCwgbm8gbWF0dGVyIGhvdyBmYXN0IGl0cyBkZXBlbmRlbmNpZXNcbiAgICAgICAgLy8gICAgIG5vdGlmeSB1cGRhdGVzLCB0aGUgdGFyZ2V0IGRvZXNuJ3QgcmUtZXZhbHVhdGUgKGFuZCBoZW5jZSBkb2Vzbid0IG5vdGlmeSkgZmFzdGVyIHRoYW4gYSBjZXJ0YWluIHJhdGVcbiAgICAgICAgdGFyZ2V0Wyd0aHJvdHRsZUV2YWx1YXRpb24nXSA9IHRpbWVvdXQ7XG5cbiAgICAgICAgLy8gKDIpIEZvciB3cml0YWJsZSB0YXJnZXRzIChvYnNlcnZhYmxlcywgb3Igd3JpdGFibGUgZGVwZW5kZW50IG9ic2VydmFibGVzKSwgd2UgdGhyb3R0bGUgKndyaXRlcypcbiAgICAgICAgLy8gICAgIHNvIHRoZSB0YXJnZXQgY2Fubm90IGNoYW5nZSB2YWx1ZSBzeW5jaHJvbm91c2x5IG9yIGZhc3RlciB0aGFuIGEgY2VydGFpbiByYXRlXG4gICAgICAgIHZhciB3cml0ZVRpbWVvdXRJbnN0YW5jZSA9IG51bGw7XG4gICAgICAgIHJldHVybiBrby5kZXBlbmRlbnRPYnNlcnZhYmxlKHtcbiAgICAgICAgICAgICdyZWFkJzogdGFyZ2V0LFxuICAgICAgICAgICAgJ3dyaXRlJzogZnVuY3Rpb24odmFsdWUpIHtcbiAgICAgICAgICAgICAgICBjbGVhclRpbWVvdXQod3JpdGVUaW1lb3V0SW5zdGFuY2UpO1xuICAgICAgICAgICAgICAgIHdyaXRlVGltZW91dEluc3RhbmNlID0ga28udXRpbHMuc2V0VGltZW91dChmdW5jdGlvbigpIHtcbiAgICAgICAgICAgICAgICAgICAgdGFyZ2V0KHZhbHVlKTtcbiAgICAgICAgICAgICAgICB9LCB0aW1lb3V0KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgfSxcblxuICAgICdyYXRlTGltaXQnOiBmdW5jdGlvbih0YXJnZXQsIG9wdGlvbnMpIHtcbiAgICAgICAgdmFyIHRpbWVvdXQsIG1ldGhvZCwgbGltaXRGdW5jdGlvbjtcblxuICAgICAgICBpZiAodHlwZW9mIG9wdGlvbnMgPT0gJ251bWJlcicpIHtcbiAgICAgICAgICAgIHRpbWVvdXQgPSBvcHRpb25zO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgdGltZW91dCA9IG9wdGlvbnNbJ3RpbWVvdXQnXTtcbiAgICAgICAgICAgIG1ldGhvZCA9IG9wdGlvbnNbJ21ldGhvZCddO1xuICAgICAgICB9XG5cbiAgICAgICAgLy8gcmF0ZUxpbWl0IHN1cGVyc2VkZXMgZGVmZXJyZWQgdXBkYXRlc1xuICAgICAgICB0YXJnZXQuX2RlZmVyVXBkYXRlcyA9IGZhbHNlO1xuXG4gICAgICAgIGxpbWl0RnVuY3Rpb24gPSBtZXRob2QgPT0gJ25vdGlmeVdoZW5DaGFuZ2VzU3RvcCcgPyAgZGVib3VuY2UgOiB0aHJvdHRsZTtcbiAgICAgICAgdGFyZ2V0LmxpbWl0KGZ1bmN0aW9uKGNhbGxiYWNrKSB7XG4gICAgICAgICAgICByZXR1cm4gbGltaXRGdW5jdGlvbihjYWxsYmFjaywgdGltZW91dCk7XG4gICAgICAgIH0pO1xuICAgIH0sXG5cbiAgICAnZGVmZXJyZWQnOiBmdW5jdGlvbih0YXJnZXQsIG9wdGlvbnMpIHtcbiAgICAgICAgaWYgKG9wdGlvbnMgIT09IHRydWUpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcignVGhlIFxcJ2RlZmVycmVkXFwnIGV4dGVuZGVyIG9ubHkgYWNjZXB0cyB0aGUgdmFsdWUgXFwndHJ1ZVxcJywgYmVjYXVzZSBpdCBpcyBub3Qgc3VwcG9ydGVkIHRvIHR1cm4gZGVmZXJyYWwgb2ZmIG9uY2UgZW5hYmxlZC4nKVxuICAgICAgICB9XG5cbiAgICAgICAgaWYgKCF0YXJnZXQuX2RlZmVyVXBkYXRlcykge1xuICAgICAgICAgICAgdGFyZ2V0Ll9kZWZlclVwZGF0ZXMgPSB0cnVlO1xuICAgICAgICAgICAgdGFyZ2V0LmxpbWl0KGZ1bmN0aW9uIChjYWxsYmFjaykge1xuICAgICAgICAgICAgICAgIHZhciBoYW5kbGU7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICAgICAga28udGFza3MuY2FuY2VsKGhhbmRsZSk7XG4gICAgICAgICAgICAgICAgICAgIGhhbmRsZSA9IGtvLnRhc2tzLnNjaGVkdWxlKGNhbGxiYWNrKTtcbiAgICAgICAgICAgICAgICAgICAgdGFyZ2V0Wydub3RpZnlTdWJzY3JpYmVycyddKHVuZGVmaW5lZCwgJ2RpcnR5Jyk7XG4gICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgfSxcblxuICAgICdub3RpZnknOiBmdW5jdGlvbih0YXJnZXQsIG5vdGlmeVdoZW4pIHtcbiAgICAgICAgdGFyZ2V0W1wiZXF1YWxpdHlDb21wYXJlclwiXSA9IG5vdGlmeVdoZW4gPT0gXCJhbHdheXNcIiA/XG4gICAgICAgICAgICBudWxsIDogIC8vIG51bGwgZXF1YWxpdHlDb21wYXJlciBtZWFucyB0byBhbHdheXMgbm90aWZ5XG4gICAgICAgICAgICB2YWx1ZXNBcmVQcmltaXRpdmVBbmRFcXVhbDtcbiAgICB9XG59O1xuXG52YXIgcHJpbWl0aXZlVHlwZXMgPSB7ICd1bmRlZmluZWQnOjEsICdib29sZWFuJzoxLCAnbnVtYmVyJzoxLCAnc3RyaW5nJzoxIH07XG5mdW5jdGlvbiB2YWx1ZXNBcmVQcmltaXRpdmVBbmRFcXVhbChhLCBiKSB7XG4gICAgdmFyIG9sZFZhbHVlSXNQcmltaXRpdmUgPSAoYSA9PT0gbnVsbCkgfHwgKHR5cGVvZihhKSBpbiBwcmltaXRpdmVUeXBlcyk7XG4gICAgcmV0dXJuIG9sZFZhbHVlSXNQcmltaXRpdmUgPyAoYSA9PT0gYikgOiBmYWxzZTtcbn1cblxuZnVuY3Rpb24gdGhyb3R0bGUoY2FsbGJhY2ssIHRpbWVvdXQpIHtcbiAgICB2YXIgdGltZW91dEluc3RhbmNlO1xuICAgIHJldHVybiBmdW5jdGlvbiAoKSB7XG4gICAgICAgIGlmICghdGltZW91dEluc3RhbmNlKSB7XG4gICAgICAgICAgICB0aW1lb3V0SW5zdGFuY2UgPSBrby51dGlscy5zZXRUaW1lb3V0KGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICB0aW1lb3V0SW5zdGFuY2UgPSB1bmRlZmluZWQ7XG4gICAgICAgICAgICAgICAgY2FsbGJhY2soKTtcbiAgICAgICAgICAgIH0sIHRpbWVvdXQpO1xuICAgICAgICB9XG4gICAgfTtcbn1cblxuZnVuY3Rpb24gZGVib3VuY2UoY2FsbGJhY2ssIHRpbWVvdXQpIHtcbiAgICB2YXIgdGltZW91dEluc3RhbmNlO1xuICAgIHJldHVybiBmdW5jdGlvbiAoKSB7XG4gICAgICAgIGNsZWFyVGltZW91dCh0aW1lb3V0SW5zdGFuY2UpO1xuICAgICAgICB0aW1lb3V0SW5zdGFuY2UgPSBrby51dGlscy5zZXRUaW1lb3V0KGNhbGxiYWNrLCB0aW1lb3V0KTtcbiAgICB9O1xufVxuXG5mdW5jdGlvbiBhcHBseUV4dGVuZGVycyhyZXF1ZXN0ZWRFeHRlbmRlcnMpIHtcbiAgICB2YXIgdGFyZ2V0ID0gdGhpcztcbiAgICBpZiAocmVxdWVzdGVkRXh0ZW5kZXJzKSB7XG4gICAgICAgIGtvLnV0aWxzLm9iamVjdEZvckVhY2gocmVxdWVzdGVkRXh0ZW5kZXJzLCBmdW5jdGlvbihrZXksIHZhbHVlKSB7XG4gICAgICAgICAgICB2YXIgZXh0ZW5kZXJIYW5kbGVyID0ga28uZXh0ZW5kZXJzW2tleV07XG4gICAgICAgICAgICBpZiAodHlwZW9mIGV4dGVuZGVySGFuZGxlciA9PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgICAgICAgICAgdGFyZ2V0ID0gZXh0ZW5kZXJIYW5kbGVyKHRhcmdldCwgdmFsdWUpIHx8IHRhcmdldDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgfVxuICAgIHJldHVybiB0YXJnZXQ7XG59XG5cbmtvLmV4cG9ydFN5bWJvbCgnZXh0ZW5kZXJzJywga28uZXh0ZW5kZXJzKTtcblxua28uc3Vic2NyaXB0aW9uID0gZnVuY3Rpb24gKHRhcmdldCwgY2FsbGJhY2ssIGRpc3Bvc2VDYWxsYmFjaykge1xuICAgIHRoaXMuX3RhcmdldCA9IHRhcmdldDtcbiAgICB0aGlzLmNhbGxiYWNrID0gY2FsbGJhY2s7XG4gICAgdGhpcy5kaXNwb3NlQ2FsbGJhY2sgPSBkaXNwb3NlQ2FsbGJhY2s7XG4gICAgdGhpcy5pc0Rpc3Bvc2VkID0gZmFsc2U7XG4gICAga28uZXhwb3J0UHJvcGVydHkodGhpcywgJ2Rpc3Bvc2UnLCB0aGlzLmRpc3Bvc2UpO1xufTtcbmtvLnN1YnNjcmlwdGlvbi5wcm90b3R5cGUuZGlzcG9zZSA9IGZ1bmN0aW9uICgpIHtcbiAgICB0aGlzLmlzRGlzcG9zZWQgPSB0cnVlO1xuICAgIHRoaXMuZGlzcG9zZUNhbGxiYWNrKCk7XG59O1xuXG5rby5zdWJzY3JpYmFibGUgPSBmdW5jdGlvbiAoKSB7XG4gICAga28udXRpbHMuc2V0UHJvdG90eXBlT2ZPckV4dGVuZCh0aGlzLCBrb19zdWJzY3JpYmFibGVfZm4pO1xuICAgIGtvX3N1YnNjcmliYWJsZV9mbi5pbml0KHRoaXMpO1xufVxuXG52YXIgZGVmYXVsdEV2ZW50ID0gXCJjaGFuZ2VcIjtcblxuLy8gTW92ZWQgb3V0IG9mIFwibGltaXRcIiB0byBhdm9pZCB0aGUgZXh0cmEgY2xvc3VyZVxuZnVuY3Rpb24gbGltaXROb3RpZnlTdWJzY3JpYmVycyh2YWx1ZSwgZXZlbnQpIHtcbiAgICBpZiAoIWV2ZW50IHx8IGV2ZW50ID09PSBkZWZhdWx0RXZlbnQpIHtcbiAgICAgICAgdGhpcy5fbGltaXRDaGFuZ2UodmFsdWUpO1xuICAgIH0gZWxzZSBpZiAoZXZlbnQgPT09ICdiZWZvcmVDaGFuZ2UnKSB7XG4gICAgICAgIHRoaXMuX2xpbWl0QmVmb3JlQ2hhbmdlKHZhbHVlKTtcbiAgICB9IGVsc2Uge1xuICAgICAgICB0aGlzLl9vcmlnTm90aWZ5U3Vic2NyaWJlcnModmFsdWUsIGV2ZW50KTtcbiAgICB9XG59XG5cbnZhciBrb19zdWJzY3JpYmFibGVfZm4gPSB7XG4gICAgaW5pdDogZnVuY3Rpb24oaW5zdGFuY2UpIHtcbiAgICAgICAgaW5zdGFuY2UuX3N1YnNjcmlwdGlvbnMgPSB7fTtcbiAgICAgICAgaW5zdGFuY2UuX3ZlcnNpb25OdW1iZXIgPSAxO1xuICAgIH0sXG5cbiAgICBzdWJzY3JpYmU6IGZ1bmN0aW9uIChjYWxsYmFjaywgY2FsbGJhY2tUYXJnZXQsIGV2ZW50KSB7XG4gICAgICAgIHZhciBzZWxmID0gdGhpcztcblxuICAgICAgICBldmVudCA9IGV2ZW50IHx8IGRlZmF1bHRFdmVudDtcbiAgICAgICAgdmFyIGJvdW5kQ2FsbGJhY2sgPSBjYWxsYmFja1RhcmdldCA/IGNhbGxiYWNrLmJpbmQoY2FsbGJhY2tUYXJnZXQpIDogY2FsbGJhY2s7XG5cbiAgICAgICAgdmFyIHN1YnNjcmlwdGlvbiA9IG5ldyBrby5zdWJzY3JpcHRpb24oc2VsZiwgYm91bmRDYWxsYmFjaywgZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAga28udXRpbHMuYXJyYXlSZW1vdmVJdGVtKHNlbGYuX3N1YnNjcmlwdGlvbnNbZXZlbnRdLCBzdWJzY3JpcHRpb24pO1xuICAgICAgICAgICAgaWYgKHNlbGYuYWZ0ZXJTdWJzY3JpcHRpb25SZW1vdmUpXG4gICAgICAgICAgICAgICAgc2VsZi5hZnRlclN1YnNjcmlwdGlvblJlbW92ZShldmVudCk7XG4gICAgICAgIH0pO1xuXG4gICAgICAgIGlmIChzZWxmLmJlZm9yZVN1YnNjcmlwdGlvbkFkZClcbiAgICAgICAgICAgIHNlbGYuYmVmb3JlU3Vic2NyaXB0aW9uQWRkKGV2ZW50KTtcblxuICAgICAgICBpZiAoIXNlbGYuX3N1YnNjcmlwdGlvbnNbZXZlbnRdKVxuICAgICAgICAgICAgc2VsZi5fc3Vic2NyaXB0aW9uc1tldmVudF0gPSBbXTtcbiAgICAgICAgc2VsZi5fc3Vic2NyaXB0aW9uc1tldmVudF0ucHVzaChzdWJzY3JpcHRpb24pO1xuXG4gICAgICAgIHJldHVybiBzdWJzY3JpcHRpb247XG4gICAgfSxcblxuICAgIFwibm90aWZ5U3Vic2NyaWJlcnNcIjogZnVuY3Rpb24gKHZhbHVlVG9Ob3RpZnksIGV2ZW50KSB7XG4gICAgICAgIGV2ZW50ID0gZXZlbnQgfHwgZGVmYXVsdEV2ZW50O1xuICAgICAgICBpZiAoZXZlbnQgPT09IGRlZmF1bHRFdmVudCkge1xuICAgICAgICAgICAgdGhpcy51cGRhdGVWZXJzaW9uKCk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHRoaXMuaGFzU3Vic2NyaXB0aW9uc0ZvckV2ZW50KGV2ZW50KSkge1xuICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICBrby5kZXBlbmRlbmN5RGV0ZWN0aW9uLmJlZ2luKCk7IC8vIEJlZ2luIHN1cHByZXNzaW5nIGRlcGVuZGVuY3kgZGV0ZWN0aW9uIChieSBzZXR0aW5nIHRoZSB0b3AgZnJhbWUgdG8gdW5kZWZpbmVkKVxuICAgICAgICAgICAgICAgIGZvciAodmFyIGEgPSB0aGlzLl9zdWJzY3JpcHRpb25zW2V2ZW50XS5zbGljZSgwKSwgaSA9IDAsIHN1YnNjcmlwdGlvbjsgc3Vic2NyaXB0aW9uID0gYVtpXTsgKytpKSB7XG4gICAgICAgICAgICAgICAgICAgIC8vIEluIGNhc2UgYSBzdWJzY3JpcHRpb24gd2FzIGRpc3Bvc2VkIGR1cmluZyB0aGUgYXJyYXlGb3JFYWNoIGN5Y2xlLCBjaGVja1xuICAgICAgICAgICAgICAgICAgICAvLyBmb3IgaXNEaXNwb3NlZCBvbiBlYWNoIHN1YnNjcmlwdGlvbiBiZWZvcmUgaW52b2tpbmcgaXRzIGNhbGxiYWNrXG4gICAgICAgICAgICAgICAgICAgIGlmICghc3Vic2NyaXB0aW9uLmlzRGlzcG9zZWQpXG4gICAgICAgICAgICAgICAgICAgICAgICBzdWJzY3JpcHRpb24uY2FsbGJhY2sodmFsdWVUb05vdGlmeSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSBmaW5hbGx5IHtcbiAgICAgICAgICAgICAgICBrby5kZXBlbmRlbmN5RGV0ZWN0aW9uLmVuZCgpOyAvLyBFbmQgc3VwcHJlc3NpbmcgZGVwZW5kZW5jeSBkZXRlY3Rpb25cbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH0sXG5cbiAgICBnZXRWZXJzaW9uOiBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl92ZXJzaW9uTnVtYmVyO1xuICAgIH0sXG5cbiAgICBoYXNDaGFuZ2VkOiBmdW5jdGlvbiAodmVyc2lvblRvQ2hlY2spIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuZ2V0VmVyc2lvbigpICE9PSB2ZXJzaW9uVG9DaGVjaztcbiAgICB9LFxuXG4gICAgdXBkYXRlVmVyc2lvbjogZnVuY3Rpb24gKCkge1xuICAgICAgICArK3RoaXMuX3ZlcnNpb25OdW1iZXI7XG4gICAgfSxcblxuICAgIGxpbWl0OiBmdW5jdGlvbihsaW1pdEZ1bmN0aW9uKSB7XG4gICAgICAgIHZhciBzZWxmID0gdGhpcywgc2VsZklzT2JzZXJ2YWJsZSA9IGtvLmlzT2JzZXJ2YWJsZShzZWxmKSxcbiAgICAgICAgICAgIGlnbm9yZUJlZm9yZUNoYW5nZSwgcHJldmlvdXNWYWx1ZSwgcGVuZGluZ1ZhbHVlLCBiZWZvcmVDaGFuZ2UgPSAnYmVmb3JlQ2hhbmdlJztcblxuICAgICAgICBpZiAoIXNlbGYuX29yaWdOb3RpZnlTdWJzY3JpYmVycykge1xuICAgICAgICAgICAgc2VsZi5fb3JpZ05vdGlmeVN1YnNjcmliZXJzID0gc2VsZltcIm5vdGlmeVN1YnNjcmliZXJzXCJdO1xuICAgICAgICAgICAgc2VsZltcIm5vdGlmeVN1YnNjcmliZXJzXCJdID0gbGltaXROb3RpZnlTdWJzY3JpYmVycztcbiAgICAgICAgfVxuXG4gICAgICAgIHZhciBmaW5pc2ggPSBsaW1pdEZ1bmN0aW9uKGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgc2VsZi5fbm90aWZpY2F0aW9uSXNQZW5kaW5nID0gZmFsc2U7XG5cbiAgICAgICAgICAgIC8vIElmIGFuIG9ic2VydmFibGUgcHJvdmlkZWQgYSByZWZlcmVuY2UgdG8gaXRzZWxmLCBhY2Nlc3MgaXQgdG8gZ2V0IHRoZSBsYXRlc3QgdmFsdWUuXG4gICAgICAgICAgICAvLyBUaGlzIGFsbG93cyBjb21wdXRlZCBvYnNlcnZhYmxlcyB0byBkZWxheSBjYWxjdWxhdGluZyB0aGVpciB2YWx1ZSB1bnRpbCBuZWVkZWQuXG4gICAgICAgICAgICBpZiAoc2VsZklzT2JzZXJ2YWJsZSAmJiBwZW5kaW5nVmFsdWUgPT09IHNlbGYpIHtcbiAgICAgICAgICAgICAgICBwZW5kaW5nVmFsdWUgPSBzZWxmKCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZ25vcmVCZWZvcmVDaGFuZ2UgPSBmYWxzZTtcbiAgICAgICAgICAgIGlmIChzZWxmLmlzRGlmZmVyZW50KHByZXZpb3VzVmFsdWUsIHBlbmRpbmdWYWx1ZSkpIHtcbiAgICAgICAgICAgICAgICBzZWxmLl9vcmlnTm90aWZ5U3Vic2NyaWJlcnMocHJldmlvdXNWYWx1ZSA9IHBlbmRpbmdWYWx1ZSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0pO1xuXG4gICAgICAgIHNlbGYuX2xpbWl0Q2hhbmdlID0gZnVuY3Rpb24odmFsdWUpIHtcbiAgICAgICAgICAgIHNlbGYuX25vdGlmaWNhdGlvbklzUGVuZGluZyA9IGlnbm9yZUJlZm9yZUNoYW5nZSA9IHRydWU7XG4gICAgICAgICAgICBwZW5kaW5nVmFsdWUgPSB2YWx1ZTtcbiAgICAgICAgICAgIGZpbmlzaCgpO1xuICAgICAgICB9O1xuICAgICAgICBzZWxmLl9saW1pdEJlZm9yZUNoYW5nZSA9IGZ1bmN0aW9uKHZhbHVlKSB7XG4gICAgICAgICAgICBpZiAoIWlnbm9yZUJlZm9yZUNoYW5nZSkge1xuICAgICAgICAgICAgICAgIHByZXZpb3VzVmFsdWUgPSB2YWx1ZTtcbiAgICAgICAgICAgICAgICBzZWxmLl9vcmlnTm90aWZ5U3Vic2NyaWJlcnModmFsdWUsIGJlZm9yZUNoYW5nZSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH07XG4gICAgfSxcblxuICAgIGhhc1N1YnNjcmlwdGlvbnNGb3JFdmVudDogZnVuY3Rpb24oZXZlbnQpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX3N1YnNjcmlwdGlvbnNbZXZlbnRdICYmIHRoaXMuX3N1YnNjcmlwdGlvbnNbZXZlbnRdLmxlbmd0aDtcbiAgICB9LFxuXG4gICAgZ2V0U3Vic2NyaXB0aW9uc0NvdW50OiBmdW5jdGlvbiAoZXZlbnQpIHtcbiAgICAgICAgaWYgKGV2ZW50KSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5fc3Vic2NyaXB0aW9uc1tldmVudF0gJiYgdGhpcy5fc3Vic2NyaXB0aW9uc1tldmVudF0ubGVuZ3RoIHx8IDA7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICB2YXIgdG90YWwgPSAwO1xuICAgICAgICAgICAga28udXRpbHMub2JqZWN0Rm9yRWFjaCh0aGlzLl9zdWJzY3JpcHRpb25zLCBmdW5jdGlvbihldmVudE5hbWUsIHN1YnNjcmlwdGlvbnMpIHtcbiAgICAgICAgICAgICAgICBpZiAoZXZlbnROYW1lICE9PSAnZGlydHknKVxuICAgICAgICAgICAgICAgICAgICB0b3RhbCArPSBzdWJzY3JpcHRpb25zLmxlbmd0aDtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgcmV0dXJuIHRvdGFsO1xuICAgICAgICB9XG4gICAgfSxcblxuICAgIGlzRGlmZmVyZW50OiBmdW5jdGlvbihvbGRWYWx1ZSwgbmV3VmFsdWUpIHtcbiAgICAgICAgcmV0dXJuICF0aGlzWydlcXVhbGl0eUNvbXBhcmVyJ10gfHwgIXRoaXNbJ2VxdWFsaXR5Q29tcGFyZXInXShvbGRWYWx1ZSwgbmV3VmFsdWUpO1xuICAgIH0sXG5cbiAgICBleHRlbmQ6IGFwcGx5RXh0ZW5kZXJzXG59O1xuXG5rby5leHBvcnRQcm9wZXJ0eShrb19zdWJzY3JpYmFibGVfZm4sICdzdWJzY3JpYmUnLCBrb19zdWJzY3JpYmFibGVfZm4uc3Vic2NyaWJlKTtcbmtvLmV4cG9ydFByb3BlcnR5KGtvX3N1YnNjcmliYWJsZV9mbiwgJ2V4dGVuZCcsIGtvX3N1YnNjcmliYWJsZV9mbi5leHRlbmQpO1xua28uZXhwb3J0UHJvcGVydHkoa29fc3Vic2NyaWJhYmxlX2ZuLCAnZ2V0U3Vic2NyaXB0aW9uc0NvdW50Jywga29fc3Vic2NyaWJhYmxlX2ZuLmdldFN1YnNjcmlwdGlvbnNDb3VudCk7XG5cbi8vIEZvciBicm93c2VycyB0aGF0IHN1cHBvcnQgcHJvdG8gYXNzaWdubWVudCwgd2Ugb3ZlcndyaXRlIHRoZSBwcm90b3R5cGUgb2YgZWFjaFxuLy8gb2JzZXJ2YWJsZSBpbnN0YW5jZS4gU2luY2Ugb2JzZXJ2YWJsZXMgYXJlIGZ1bmN0aW9ucywgd2UgbmVlZCBGdW5jdGlvbi5wcm90b3R5cGVcbi8vIHRvIHN0aWxsIGJlIGluIHRoZSBwcm90b3R5cGUgY2hhaW4uXG5pZiAoa28udXRpbHMuY2FuU2V0UHJvdG90eXBlKSB7XG4gICAga28udXRpbHMuc2V0UHJvdG90eXBlT2Yoa29fc3Vic2NyaWJhYmxlX2ZuLCBGdW5jdGlvbi5wcm90b3R5cGUpO1xufVxuXG5rby5zdWJzY3JpYmFibGVbJ2ZuJ10gPSBrb19zdWJzY3JpYmFibGVfZm47XG5cblxua28uaXNTdWJzY3JpYmFibGUgPSBmdW5jdGlvbiAoaW5zdGFuY2UpIHtcbiAgICByZXR1cm4gaW5zdGFuY2UgIT0gbnVsbCAmJiB0eXBlb2YgaW5zdGFuY2Uuc3Vic2NyaWJlID09IFwiZnVuY3Rpb25cIiAmJiB0eXBlb2YgaW5zdGFuY2VbXCJub3RpZnlTdWJzY3JpYmVyc1wiXSA9PSBcImZ1bmN0aW9uXCI7XG59O1xuXG5rby5leHBvcnRTeW1ib2woJ3N1YnNjcmliYWJsZScsIGtvLnN1YnNjcmliYWJsZSk7XG5rby5leHBvcnRTeW1ib2woJ2lzU3Vic2NyaWJhYmxlJywga28uaXNTdWJzY3JpYmFibGUpO1xuXG5rby5jb21wdXRlZENvbnRleHQgPSBrby5kZXBlbmRlbmN5RGV0ZWN0aW9uID0gKGZ1bmN0aW9uICgpIHtcbiAgICB2YXIgb3V0ZXJGcmFtZXMgPSBbXSxcbiAgICAgICAgY3VycmVudEZyYW1lLFxuICAgICAgICBsYXN0SWQgPSAwO1xuXG4gICAgLy8gUmV0dXJuIGEgdW5pcXVlIElEIHRoYXQgY2FuIGJlIGFzc2lnbmVkIHRvIGFuIG9ic2VydmFibGUgZm9yIGRlcGVuZGVuY3kgdHJhY2tpbmcuXG4gICAgLy8gVGhlb3JldGljYWxseSwgeW91IGNvdWxkIGV2ZW50dWFsbHkgb3ZlcmZsb3cgdGhlIG51bWJlciBzdG9yYWdlIHNpemUsIHJlc3VsdGluZ1xuICAgIC8vIGluIGR1cGxpY2F0ZSBJRHMuIEJ1dCBpbiBKYXZhU2NyaXB0LCB0aGUgbGFyZ2VzdCBleGFjdCBpbnRlZ3JhbCB2YWx1ZSBpcyAyXjUzXG4gICAgLy8gb3IgOSwwMDcsMTk5LDI1NCw3NDAsOTkyLiBJZiB5b3UgY3JlYXRlZCAxLDAwMCwwMDAgSURzIHBlciBzZWNvbmQsIGl0IHdvdWxkXG4gICAgLy8gdGFrZSBvdmVyIDI4NSB5ZWFycyB0byByZWFjaCB0aGF0IG51bWJlci5cbiAgICAvLyBSZWZlcmVuY2UgaHR0cDovL2Jsb2cudmpldXguY29tLzIwMTAvamF2YXNjcmlwdC9qYXZhc2NyaXB0LW1heF9pbnQtbnVtYmVyLWxpbWl0cy5odG1sXG4gICAgZnVuY3Rpb24gZ2V0SWQoKSB7XG4gICAgICAgIHJldHVybiArK2xhc3RJZDtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBiZWdpbihvcHRpb25zKSB7XG4gICAgICAgIG91dGVyRnJhbWVzLnB1c2goY3VycmVudEZyYW1lKTtcbiAgICAgICAgY3VycmVudEZyYW1lID0gb3B0aW9ucztcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBlbmQoKSB7XG4gICAgICAgIGN1cnJlbnRGcmFtZSA9IG91dGVyRnJhbWVzLnBvcCgpO1xuICAgIH1cblxuICAgIHJldHVybiB7XG4gICAgICAgIGJlZ2luOiBiZWdpbixcblxuICAgICAgICBlbmQ6IGVuZCxcblxuICAgICAgICByZWdpc3RlckRlcGVuZGVuY3k6IGZ1bmN0aW9uIChzdWJzY3JpYmFibGUpIHtcbiAgICAgICAgICAgIGlmIChjdXJyZW50RnJhbWUpIHtcbiAgICAgICAgICAgICAgICBpZiAoIWtvLmlzU3Vic2NyaWJhYmxlKHN1YnNjcmliYWJsZSkpXG4gICAgICAgICAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihcIk9ubHkgc3Vic2NyaWJhYmxlIHRoaW5ncyBjYW4gYWN0IGFzIGRlcGVuZGVuY2llc1wiKTtcbiAgICAgICAgICAgICAgICBjdXJyZW50RnJhbWUuY2FsbGJhY2suY2FsbChjdXJyZW50RnJhbWUuY2FsbGJhY2tUYXJnZXQsIHN1YnNjcmliYWJsZSwgc3Vic2NyaWJhYmxlLl9pZCB8fCAoc3Vic2NyaWJhYmxlLl9pZCA9IGdldElkKCkpKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSxcblxuICAgICAgICBpZ25vcmU6IGZ1bmN0aW9uIChjYWxsYmFjaywgY2FsbGJhY2tUYXJnZXQsIGNhbGxiYWNrQXJncykge1xuICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICBiZWdpbigpO1xuICAgICAgICAgICAgICAgIHJldHVybiBjYWxsYmFjay5hcHBseShjYWxsYmFja1RhcmdldCwgY2FsbGJhY2tBcmdzIHx8IFtdKTtcbiAgICAgICAgICAgIH0gZmluYWxseSB7XG4gICAgICAgICAgICAgICAgZW5kKCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0sXG5cbiAgICAgICAgZ2V0RGVwZW5kZW5jaWVzQ291bnQ6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIGlmIChjdXJyZW50RnJhbWUpXG4gICAgICAgICAgICAgICAgcmV0dXJuIGN1cnJlbnRGcmFtZS5jb21wdXRlZC5nZXREZXBlbmRlbmNpZXNDb3VudCgpO1xuICAgICAgICB9LFxuXG4gICAgICAgIGlzSW5pdGlhbDogZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICBpZiAoY3VycmVudEZyYW1lKVxuICAgICAgICAgICAgICAgIHJldHVybiBjdXJyZW50RnJhbWUuaXNJbml0aWFsO1xuICAgICAgICB9XG4gICAgfTtcbn0pKCk7XG5cbmtvLmV4cG9ydFN5bWJvbCgnY29tcHV0ZWRDb250ZXh0Jywga28uY29tcHV0ZWRDb250ZXh0KTtcbmtvLmV4cG9ydFN5bWJvbCgnY29tcHV0ZWRDb250ZXh0LmdldERlcGVuZGVuY2llc0NvdW50Jywga28uY29tcHV0ZWRDb250ZXh0LmdldERlcGVuZGVuY2llc0NvdW50KTtcbmtvLmV4cG9ydFN5bWJvbCgnY29tcHV0ZWRDb250ZXh0LmlzSW5pdGlhbCcsIGtvLmNvbXB1dGVkQ29udGV4dC5pc0luaXRpYWwpO1xuXG5rby5leHBvcnRTeW1ib2woJ2lnbm9yZURlcGVuZGVuY2llcycsIGtvLmlnbm9yZURlcGVuZGVuY2llcyA9IGtvLmRlcGVuZGVuY3lEZXRlY3Rpb24uaWdub3JlKTtcbnZhciBvYnNlcnZhYmxlTGF0ZXN0VmFsdWUgPSBrby51dGlscy5jcmVhdGVTeW1ib2xPclN0cmluZygnX2xhdGVzdFZhbHVlJyk7XG5cbmtvLm9ic2VydmFibGUgPSBmdW5jdGlvbiAoaW5pdGlhbFZhbHVlKSB7XG4gICAgZnVuY3Rpb24gb2JzZXJ2YWJsZSgpIHtcbiAgICAgICAgaWYgKGFyZ3VtZW50cy5sZW5ndGggPiAwKSB7XG4gICAgICAgICAgICAvLyBXcml0ZVxuXG4gICAgICAgICAgICAvLyBJZ25vcmUgd3JpdGVzIGlmIHRoZSB2YWx1ZSBoYXNuJ3QgY2hhbmdlZFxuICAgICAgICAgICAgaWYgKG9ic2VydmFibGUuaXNEaWZmZXJlbnQob2JzZXJ2YWJsZVtvYnNlcnZhYmxlTGF0ZXN0VmFsdWVdLCBhcmd1bWVudHNbMF0pKSB7XG4gICAgICAgICAgICAgICAgb2JzZXJ2YWJsZS52YWx1ZVdpbGxNdXRhdGUoKTtcbiAgICAgICAgICAgICAgICBvYnNlcnZhYmxlW29ic2VydmFibGVMYXRlc3RWYWx1ZV0gPSBhcmd1bWVudHNbMF07XG4gICAgICAgICAgICAgICAgb2JzZXJ2YWJsZS52YWx1ZUhhc011dGF0ZWQoKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiB0aGlzOyAvLyBQZXJtaXRzIGNoYWluZWQgYXNzaWdubWVudHNcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIC8vIFJlYWRcbiAgICAgICAgICAgIGtvLmRlcGVuZGVuY3lEZXRlY3Rpb24ucmVnaXN0ZXJEZXBlbmRlbmN5KG9ic2VydmFibGUpOyAvLyBUaGUgY2FsbGVyIG9ubHkgbmVlZHMgdG8gYmUgbm90aWZpZWQgb2YgY2hhbmdlcyBpZiB0aGV5IGRpZCBhIFwicmVhZFwiIG9wZXJhdGlvblxuICAgICAgICAgICAgcmV0dXJuIG9ic2VydmFibGVbb2JzZXJ2YWJsZUxhdGVzdFZhbHVlXTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIG9ic2VydmFibGVbb2JzZXJ2YWJsZUxhdGVzdFZhbHVlXSA9IGluaXRpYWxWYWx1ZTtcblxuICAgIC8vIEluaGVyaXQgZnJvbSAnc3Vic2NyaWJhYmxlJ1xuICAgIGlmICgha28udXRpbHMuY2FuU2V0UHJvdG90eXBlKSB7XG4gICAgICAgIC8vICdzdWJzY3JpYmFibGUnIHdvbid0IGJlIG9uIHRoZSBwcm90b3R5cGUgY2hhaW4gdW5sZXNzIHdlIHB1dCBpdCB0aGVyZSBkaXJlY3RseVxuICAgICAgICBrby51dGlscy5leHRlbmQob2JzZXJ2YWJsZSwga28uc3Vic2NyaWJhYmxlWydmbiddKTtcbiAgICB9XG4gICAga28uc3Vic2NyaWJhYmxlWydmbiddLmluaXQob2JzZXJ2YWJsZSk7XG5cbiAgICAvLyBJbmhlcml0IGZyb20gJ29ic2VydmFibGUnXG4gICAga28udXRpbHMuc2V0UHJvdG90eXBlT2ZPckV4dGVuZChvYnNlcnZhYmxlLCBvYnNlcnZhYmxlRm4pO1xuXG4gICAgaWYgKGtvLm9wdGlvbnNbJ2RlZmVyVXBkYXRlcyddKSB7XG4gICAgICAgIGtvLmV4dGVuZGVyc1snZGVmZXJyZWQnXShvYnNlcnZhYmxlLCB0cnVlKTtcbiAgICB9XG5cbiAgICByZXR1cm4gb2JzZXJ2YWJsZTtcbn1cblxuLy8gRGVmaW5lIHByb3RvdHlwZSBmb3Igb2JzZXJ2YWJsZXNcbnZhciBvYnNlcnZhYmxlRm4gPSB7XG4gICAgJ2VxdWFsaXR5Q29tcGFyZXInOiB2YWx1ZXNBcmVQcmltaXRpdmVBbmRFcXVhbCxcbiAgICBwZWVrOiBmdW5jdGlvbigpIHsgcmV0dXJuIHRoaXNbb2JzZXJ2YWJsZUxhdGVzdFZhbHVlXTsgfSxcbiAgICB2YWx1ZUhhc011dGF0ZWQ6IGZ1bmN0aW9uICgpIHsgdGhpc1snbm90aWZ5U3Vic2NyaWJlcnMnXSh0aGlzW29ic2VydmFibGVMYXRlc3RWYWx1ZV0pOyB9LFxuICAgIHZhbHVlV2lsbE11dGF0ZTogZnVuY3Rpb24gKCkgeyB0aGlzWydub3RpZnlTdWJzY3JpYmVycyddKHRoaXNbb2JzZXJ2YWJsZUxhdGVzdFZhbHVlXSwgJ2JlZm9yZUNoYW5nZScpOyB9XG59O1xuXG4vLyBOb3RlIHRoYXQgZm9yIGJyb3dzZXJzIHRoYXQgZG9uJ3Qgc3VwcG9ydCBwcm90byBhc3NpZ25tZW50LCB0aGVcbi8vIGluaGVyaXRhbmNlIGNoYWluIGlzIGNyZWF0ZWQgbWFudWFsbHkgaW4gdGhlIGtvLm9ic2VydmFibGUgY29uc3RydWN0b3JcbmlmIChrby51dGlscy5jYW5TZXRQcm90b3R5cGUpIHtcbiAgICBrby51dGlscy5zZXRQcm90b3R5cGVPZihvYnNlcnZhYmxlRm4sIGtvLnN1YnNjcmliYWJsZVsnZm4nXSk7XG59XG5cbnZhciBwcm90b1Byb3BlcnR5ID0ga28ub2JzZXJ2YWJsZS5wcm90b1Byb3BlcnR5ID0gJ19fa29fcHJvdG9fXyc7XG5vYnNlcnZhYmxlRm5bcHJvdG9Qcm9wZXJ0eV0gPSBrby5vYnNlcnZhYmxlO1xuXG5rby5oYXNQcm90b3R5cGUgPSBmdW5jdGlvbihpbnN0YW5jZSwgcHJvdG90eXBlKSB7XG4gICAgaWYgKChpbnN0YW5jZSA9PT0gbnVsbCkgfHwgKGluc3RhbmNlID09PSB1bmRlZmluZWQpIHx8IChpbnN0YW5jZVtwcm90b1Byb3BlcnR5XSA9PT0gdW5kZWZpbmVkKSkgcmV0dXJuIGZhbHNlO1xuICAgIGlmIChpbnN0YW5jZVtwcm90b1Byb3BlcnR5XSA9PT0gcHJvdG90eXBlKSByZXR1cm4gdHJ1ZTtcbiAgICByZXR1cm4ga28uaGFzUHJvdG90eXBlKGluc3RhbmNlW3Byb3RvUHJvcGVydHldLCBwcm90b3R5cGUpOyAvLyBXYWxrIHRoZSBwcm90b3R5cGUgY2hhaW5cbn07XG5cbmtvLmlzT2JzZXJ2YWJsZSA9IGZ1bmN0aW9uIChpbnN0YW5jZSkge1xuICAgIHJldHVybiBrby5oYXNQcm90b3R5cGUoaW5zdGFuY2UsIGtvLm9ic2VydmFibGUpO1xufVxua28uaXNXcml0ZWFibGVPYnNlcnZhYmxlID0gZnVuY3Rpb24gKGluc3RhbmNlKSB7XG4gICAgLy8gT2JzZXJ2YWJsZVxuICAgIGlmICgodHlwZW9mIGluc3RhbmNlID09ICdmdW5jdGlvbicpICYmIGluc3RhbmNlW3Byb3RvUHJvcGVydHldID09PSBrby5vYnNlcnZhYmxlKVxuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAvLyBXcml0ZWFibGUgZGVwZW5kZW50IG9ic2VydmFibGVcbiAgICBpZiAoKHR5cGVvZiBpbnN0YW5jZSA9PSAnZnVuY3Rpb24nKSAmJiAoaW5zdGFuY2VbcHJvdG9Qcm9wZXJ0eV0gPT09IGtvLmRlcGVuZGVudE9ic2VydmFibGUpICYmIChpbnN0YW5jZS5oYXNXcml0ZUZ1bmN0aW9uKSlcbiAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgLy8gQW55dGhpbmcgZWxzZVxuICAgIHJldHVybiBmYWxzZTtcbn1cblxua28uZXhwb3J0U3ltYm9sKCdvYnNlcnZhYmxlJywga28ub2JzZXJ2YWJsZSk7XG5rby5leHBvcnRTeW1ib2woJ2lzT2JzZXJ2YWJsZScsIGtvLmlzT2JzZXJ2YWJsZSk7XG5rby5leHBvcnRTeW1ib2woJ2lzV3JpdGVhYmxlT2JzZXJ2YWJsZScsIGtvLmlzV3JpdGVhYmxlT2JzZXJ2YWJsZSk7XG5rby5leHBvcnRTeW1ib2woJ2lzV3JpdGFibGVPYnNlcnZhYmxlJywga28uaXNXcml0ZWFibGVPYnNlcnZhYmxlKTtcbmtvLmV4cG9ydFN5bWJvbCgnb2JzZXJ2YWJsZS5mbicsIG9ic2VydmFibGVGbik7XG5rby5leHBvcnRQcm9wZXJ0eShvYnNlcnZhYmxlRm4sICdwZWVrJywgb2JzZXJ2YWJsZUZuLnBlZWspO1xua28uZXhwb3J0UHJvcGVydHkob2JzZXJ2YWJsZUZuLCAndmFsdWVIYXNNdXRhdGVkJywgb2JzZXJ2YWJsZUZuLnZhbHVlSGFzTXV0YXRlZCk7XG5rby5leHBvcnRQcm9wZXJ0eShvYnNlcnZhYmxlRm4sICd2YWx1ZVdpbGxNdXRhdGUnLCBvYnNlcnZhYmxlRm4udmFsdWVXaWxsTXV0YXRlKTtcbmtvLm9ic2VydmFibGVBcnJheSA9IGZ1bmN0aW9uIChpbml0aWFsVmFsdWVzKSB7XG4gICAgaW5pdGlhbFZhbHVlcyA9IGluaXRpYWxWYWx1ZXMgfHwgW107XG5cbiAgICBpZiAodHlwZW9mIGluaXRpYWxWYWx1ZXMgIT0gJ29iamVjdCcgfHwgISgnbGVuZ3RoJyBpbiBpbml0aWFsVmFsdWVzKSlcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiVGhlIGFyZ3VtZW50IHBhc3NlZCB3aGVuIGluaXRpYWxpemluZyBhbiBvYnNlcnZhYmxlIGFycmF5IG11c3QgYmUgYW4gYXJyYXksIG9yIG51bGwsIG9yIHVuZGVmaW5lZC5cIik7XG5cbiAgICB2YXIgcmVzdWx0ID0ga28ub2JzZXJ2YWJsZShpbml0aWFsVmFsdWVzKTtcbiAgICBrby51dGlscy5zZXRQcm90b3R5cGVPZk9yRXh0ZW5kKHJlc3VsdCwga28ub2JzZXJ2YWJsZUFycmF5WydmbiddKTtcbiAgICByZXR1cm4gcmVzdWx0LmV4dGVuZCh7J3RyYWNrQXJyYXlDaGFuZ2VzJzp0cnVlfSk7XG59O1xuXG5rby5vYnNlcnZhYmxlQXJyYXlbJ2ZuJ10gPSB7XG4gICAgJ3JlbW92ZSc6IGZ1bmN0aW9uICh2YWx1ZU9yUHJlZGljYXRlKSB7XG4gICAgICAgIHZhciB1bmRlcmx5aW5nQXJyYXkgPSB0aGlzLnBlZWsoKTtcbiAgICAgICAgdmFyIHJlbW92ZWRWYWx1ZXMgPSBbXTtcbiAgICAgICAgdmFyIHByZWRpY2F0ZSA9IHR5cGVvZiB2YWx1ZU9yUHJlZGljYXRlID09IFwiZnVuY3Rpb25cIiAmJiAha28uaXNPYnNlcnZhYmxlKHZhbHVlT3JQcmVkaWNhdGUpID8gdmFsdWVPclByZWRpY2F0ZSA6IGZ1bmN0aW9uICh2YWx1ZSkgeyByZXR1cm4gdmFsdWUgPT09IHZhbHVlT3JQcmVkaWNhdGU7IH07XG4gICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgdW5kZXJseWluZ0FycmF5Lmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICB2YXIgdmFsdWUgPSB1bmRlcmx5aW5nQXJyYXlbaV07XG4gICAgICAgICAgICBpZiAocHJlZGljYXRlKHZhbHVlKSkge1xuICAgICAgICAgICAgICAgIGlmIChyZW1vdmVkVmFsdWVzLmxlbmd0aCA9PT0gMCkge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLnZhbHVlV2lsbE11dGF0ZSgpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICByZW1vdmVkVmFsdWVzLnB1c2godmFsdWUpO1xuICAgICAgICAgICAgICAgIHVuZGVybHlpbmdBcnJheS5zcGxpY2UoaSwgMSk7XG4gICAgICAgICAgICAgICAgaS0tO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGlmIChyZW1vdmVkVmFsdWVzLmxlbmd0aCkge1xuICAgICAgICAgICAgdGhpcy52YWx1ZUhhc011dGF0ZWQoKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gcmVtb3ZlZFZhbHVlcztcbiAgICB9LFxuXG4gICAgJ3JlbW92ZUFsbCc6IGZ1bmN0aW9uIChhcnJheU9mVmFsdWVzKSB7XG4gICAgICAgIC8vIElmIHlvdSBwYXNzZWQgemVybyBhcmdzLCB3ZSByZW1vdmUgZXZlcnl0aGluZ1xuICAgICAgICBpZiAoYXJyYXlPZlZhbHVlcyA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICB2YXIgdW5kZXJseWluZ0FycmF5ID0gdGhpcy5wZWVrKCk7XG4gICAgICAgICAgICB2YXIgYWxsVmFsdWVzID0gdW5kZXJseWluZ0FycmF5LnNsaWNlKDApO1xuICAgICAgICAgICAgdGhpcy52YWx1ZVdpbGxNdXRhdGUoKTtcbiAgICAgICAgICAgIHVuZGVybHlpbmdBcnJheS5zcGxpY2UoMCwgdW5kZXJseWluZ0FycmF5Lmxlbmd0aCk7XG4gICAgICAgICAgICB0aGlzLnZhbHVlSGFzTXV0YXRlZCgpO1xuICAgICAgICAgICAgcmV0dXJuIGFsbFZhbHVlcztcbiAgICAgICAgfVxuICAgICAgICAvLyBJZiB5b3UgcGFzc2VkIGFuIGFyZywgd2UgaW50ZXJwcmV0IGl0IGFzIGFuIGFycmF5IG9mIGVudHJpZXMgdG8gcmVtb3ZlXG4gICAgICAgIGlmICghYXJyYXlPZlZhbHVlcylcbiAgICAgICAgICAgIHJldHVybiBbXTtcbiAgICAgICAgcmV0dXJuIHRoaXNbJ3JlbW92ZSddKGZ1bmN0aW9uICh2YWx1ZSkge1xuICAgICAgICAgICAgcmV0dXJuIGtvLnV0aWxzLmFycmF5SW5kZXhPZihhcnJheU9mVmFsdWVzLCB2YWx1ZSkgPj0gMDtcbiAgICAgICAgfSk7XG4gICAgfSxcblxuICAgICdkZXN0cm95JzogZnVuY3Rpb24gKHZhbHVlT3JQcmVkaWNhdGUpIHtcbiAgICAgICAgdmFyIHVuZGVybHlpbmdBcnJheSA9IHRoaXMucGVlaygpO1xuICAgICAgICB2YXIgcHJlZGljYXRlID0gdHlwZW9mIHZhbHVlT3JQcmVkaWNhdGUgPT0gXCJmdW5jdGlvblwiICYmICFrby5pc09ic2VydmFibGUodmFsdWVPclByZWRpY2F0ZSkgPyB2YWx1ZU9yUHJlZGljYXRlIDogZnVuY3Rpb24gKHZhbHVlKSB7IHJldHVybiB2YWx1ZSA9PT0gdmFsdWVPclByZWRpY2F0ZTsgfTtcbiAgICAgICAgdGhpcy52YWx1ZVdpbGxNdXRhdGUoKTtcbiAgICAgICAgZm9yICh2YXIgaSA9IHVuZGVybHlpbmdBcnJheS5sZW5ndGggLSAxOyBpID49IDA7IGktLSkge1xuICAgICAgICAgICAgdmFyIHZhbHVlID0gdW5kZXJseWluZ0FycmF5W2ldO1xuICAgICAgICAgICAgaWYgKHByZWRpY2F0ZSh2YWx1ZSkpXG4gICAgICAgICAgICAgICAgdW5kZXJseWluZ0FycmF5W2ldW1wiX2Rlc3Ryb3lcIl0gPSB0cnVlO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMudmFsdWVIYXNNdXRhdGVkKCk7XG4gICAgfSxcblxuICAgICdkZXN0cm95QWxsJzogZnVuY3Rpb24gKGFycmF5T2ZWYWx1ZXMpIHtcbiAgICAgICAgLy8gSWYgeW91IHBhc3NlZCB6ZXJvIGFyZ3MsIHdlIGRlc3Ryb3kgZXZlcnl0aGluZ1xuICAgICAgICBpZiAoYXJyYXlPZlZhbHVlcyA9PT0gdW5kZWZpbmVkKVxuICAgICAgICAgICAgcmV0dXJuIHRoaXNbJ2Rlc3Ryb3knXShmdW5jdGlvbigpIHsgcmV0dXJuIHRydWUgfSk7XG5cbiAgICAgICAgLy8gSWYgeW91IHBhc3NlZCBhbiBhcmcsIHdlIGludGVycHJldCBpdCBhcyBhbiBhcnJheSBvZiBlbnRyaWVzIHRvIGRlc3Ryb3lcbiAgICAgICAgaWYgKCFhcnJheU9mVmFsdWVzKVxuICAgICAgICAgICAgcmV0dXJuIFtdO1xuICAgICAgICByZXR1cm4gdGhpc1snZGVzdHJveSddKGZ1bmN0aW9uICh2YWx1ZSkge1xuICAgICAgICAgICAgcmV0dXJuIGtvLnV0aWxzLmFycmF5SW5kZXhPZihhcnJheU9mVmFsdWVzLCB2YWx1ZSkgPj0gMDtcbiAgICAgICAgfSk7XG4gICAgfSxcblxuICAgICdpbmRleE9mJzogZnVuY3Rpb24gKGl0ZW0pIHtcbiAgICAgICAgdmFyIHVuZGVybHlpbmdBcnJheSA9IHRoaXMoKTtcbiAgICAgICAgcmV0dXJuIGtvLnV0aWxzLmFycmF5SW5kZXhPZih1bmRlcmx5aW5nQXJyYXksIGl0ZW0pO1xuICAgIH0sXG5cbiAgICAncmVwbGFjZSc6IGZ1bmN0aW9uKG9sZEl0ZW0sIG5ld0l0ZW0pIHtcbiAgICAgICAgdmFyIGluZGV4ID0gdGhpc1snaW5kZXhPZiddKG9sZEl0ZW0pO1xuICAgICAgICBpZiAoaW5kZXggPj0gMCkge1xuICAgICAgICAgICAgdGhpcy52YWx1ZVdpbGxNdXRhdGUoKTtcbiAgICAgICAgICAgIHRoaXMucGVlaygpW2luZGV4XSA9IG5ld0l0ZW07XG4gICAgICAgICAgICB0aGlzLnZhbHVlSGFzTXV0YXRlZCgpO1xuICAgICAgICB9XG4gICAgfVxufTtcblxuLy8gTm90ZSB0aGF0IGZvciBicm93c2VycyB0aGF0IGRvbid0IHN1cHBvcnQgcHJvdG8gYXNzaWdubWVudCwgdGhlXG4vLyBpbmhlcml0YW5jZSBjaGFpbiBpcyBjcmVhdGVkIG1hbnVhbGx5IGluIHRoZSBrby5vYnNlcnZhYmxlQXJyYXkgY29uc3RydWN0b3JcbmlmIChrby51dGlscy5jYW5TZXRQcm90b3R5cGUpIHtcbiAgICBrby51dGlscy5zZXRQcm90b3R5cGVPZihrby5vYnNlcnZhYmxlQXJyYXlbJ2ZuJ10sIGtvLm9ic2VydmFibGVbJ2ZuJ10pO1xufVxuXG4vLyBQb3B1bGF0ZSBrby5vYnNlcnZhYmxlQXJyYXkuZm4gd2l0aCByZWFkL3dyaXRlIGZ1bmN0aW9ucyBmcm9tIG5hdGl2ZSBhcnJheXNcbi8vIEltcG9ydGFudDogRG8gbm90IGFkZCBhbnkgYWRkaXRpb25hbCBmdW5jdGlvbnMgaGVyZSB0aGF0IG1heSByZWFzb25hYmx5IGJlIHVzZWQgdG8gKnJlYWQqIGRhdGEgZnJvbSB0aGUgYXJyYXlcbi8vIGJlY2F1c2Ugd2UnbGwgZXZhbCB0aGVtIHdpdGhvdXQgY2F1c2luZyBzdWJzY3JpcHRpb25zLCBzbyBrby5jb21wdXRlZCBvdXRwdXQgY291bGQgZW5kIHVwIGdldHRpbmcgc3RhbGVcbmtvLnV0aWxzLmFycmF5Rm9yRWFjaChbXCJwb3BcIiwgXCJwdXNoXCIsIFwicmV2ZXJzZVwiLCBcInNoaWZ0XCIsIFwic29ydFwiLCBcInNwbGljZVwiLCBcInVuc2hpZnRcIl0sIGZ1bmN0aW9uIChtZXRob2ROYW1lKSB7XG4gICAga28ub2JzZXJ2YWJsZUFycmF5WydmbiddW21ldGhvZE5hbWVdID0gZnVuY3Rpb24gKCkge1xuICAgICAgICAvLyBVc2UgXCJwZWVrXCIgdG8gYXZvaWQgY3JlYXRpbmcgYSBzdWJzY3JpcHRpb24gaW4gYW55IGNvbXB1dGVkIHRoYXQgd2UncmUgZXhlY3V0aW5nIGluIHRoZSBjb250ZXh0IG9mXG4gICAgICAgIC8vIChmb3IgY29uc2lzdGVuY3kgd2l0aCBtdXRhdGluZyByZWd1bGFyIG9ic2VydmFibGVzKVxuICAgICAgICB2YXIgdW5kZXJseWluZ0FycmF5ID0gdGhpcy5wZWVrKCk7XG4gICAgICAgIHRoaXMudmFsdWVXaWxsTXV0YXRlKCk7XG4gICAgICAgIHRoaXMuY2FjaGVEaWZmRm9yS25vd25PcGVyYXRpb24odW5kZXJseWluZ0FycmF5LCBtZXRob2ROYW1lLCBhcmd1bWVudHMpO1xuICAgICAgICB2YXIgbWV0aG9kQ2FsbFJlc3VsdCA9IHVuZGVybHlpbmdBcnJheVttZXRob2ROYW1lXS5hcHBseSh1bmRlcmx5aW5nQXJyYXksIGFyZ3VtZW50cyk7XG4gICAgICAgIHRoaXMudmFsdWVIYXNNdXRhdGVkKCk7XG4gICAgICAgIC8vIFRoZSBuYXRpdmUgc29ydCBhbmQgcmV2ZXJzZSBtZXRob2RzIHJldHVybiBhIHJlZmVyZW5jZSB0byB0aGUgYXJyYXksIGJ1dCBpdCBtYWtlcyBtb3JlIHNlbnNlIHRvIHJldHVybiB0aGUgb2JzZXJ2YWJsZSBhcnJheSBpbnN0ZWFkLlxuICAgICAgICByZXR1cm4gbWV0aG9kQ2FsbFJlc3VsdCA9PT0gdW5kZXJseWluZ0FycmF5ID8gdGhpcyA6IG1ldGhvZENhbGxSZXN1bHQ7XG4gICAgfTtcbn0pO1xuXG4vLyBQb3B1bGF0ZSBrby5vYnNlcnZhYmxlQXJyYXkuZm4gd2l0aCByZWFkLW9ubHkgZnVuY3Rpb25zIGZyb20gbmF0aXZlIGFycmF5c1xua28udXRpbHMuYXJyYXlGb3JFYWNoKFtcInNsaWNlXCJdLCBmdW5jdGlvbiAobWV0aG9kTmFtZSkge1xuICAgIGtvLm9ic2VydmFibGVBcnJheVsnZm4nXVttZXRob2ROYW1lXSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdmFyIHVuZGVybHlpbmdBcnJheSA9IHRoaXMoKTtcbiAgICAgICAgcmV0dXJuIHVuZGVybHlpbmdBcnJheVttZXRob2ROYW1lXS5hcHBseSh1bmRlcmx5aW5nQXJyYXksIGFyZ3VtZW50cyk7XG4gICAgfTtcbn0pO1xuXG5rby5leHBvcnRTeW1ib2woJ29ic2VydmFibGVBcnJheScsIGtvLm9ic2VydmFibGVBcnJheSk7XG52YXIgYXJyYXlDaGFuZ2VFdmVudE5hbWUgPSAnYXJyYXlDaGFuZ2UnO1xua28uZXh0ZW5kZXJzWyd0cmFja0FycmF5Q2hhbmdlcyddID0gZnVuY3Rpb24odGFyZ2V0LCBvcHRpb25zKSB7XG4gICAgLy8gVXNlIHRoZSBwcm92aWRlZCBvcHRpb25zLS1lYWNoIGNhbGwgdG8gdHJhY2tBcnJheUNoYW5nZXMgb3ZlcndyaXRlcyB0aGUgcHJldmlvdXNseSBzZXQgb3B0aW9uc1xuICAgIHRhcmdldC5jb21wYXJlQXJyYXlPcHRpb25zID0ge307XG4gICAgaWYgKG9wdGlvbnMgJiYgdHlwZW9mIG9wdGlvbnMgPT0gXCJvYmplY3RcIikge1xuICAgICAgICBrby51dGlscy5leHRlbmQodGFyZ2V0LmNvbXBhcmVBcnJheU9wdGlvbnMsIG9wdGlvbnMpO1xuICAgIH1cbiAgICB0YXJnZXQuY29tcGFyZUFycmF5T3B0aW9uc1snc3BhcnNlJ10gPSB0cnVlO1xuXG4gICAgLy8gT25seSBtb2RpZnkgdGhlIHRhcmdldCBvYnNlcnZhYmxlIG9uY2VcbiAgICBpZiAodGFyZ2V0LmNhY2hlRGlmZkZvcktub3duT3BlcmF0aW9uKSB7XG4gICAgICAgIHJldHVybjtcbiAgICB9XG4gICAgdmFyIHRyYWNraW5nQ2hhbmdlcyA9IGZhbHNlLFxuICAgICAgICBjYWNoZWREaWZmID0gbnVsbCxcbiAgICAgICAgYXJyYXlDaGFuZ2VTdWJzY3JpcHRpb24sXG4gICAgICAgIHBlbmRpbmdOb3RpZmljYXRpb25zID0gMCxcbiAgICAgICAgdW5kZXJseWluZ0JlZm9yZVN1YnNjcmlwdGlvbkFkZEZ1bmN0aW9uID0gdGFyZ2V0LmJlZm9yZVN1YnNjcmlwdGlvbkFkZCxcbiAgICAgICAgdW5kZXJseWluZ0FmdGVyU3Vic2NyaXB0aW9uUmVtb3ZlRnVuY3Rpb24gPSB0YXJnZXQuYWZ0ZXJTdWJzY3JpcHRpb25SZW1vdmU7XG5cbiAgICAvLyBXYXRjaCBcInN1YnNjcmliZVwiIGNhbGxzLCBhbmQgZm9yIGFycmF5IGNoYW5nZSBldmVudHMsIGVuc3VyZSBjaGFuZ2UgdHJhY2tpbmcgaXMgZW5hYmxlZFxuICAgIHRhcmdldC5iZWZvcmVTdWJzY3JpcHRpb25BZGQgPSBmdW5jdGlvbiAoZXZlbnQpIHtcbiAgICAgICAgaWYgKHVuZGVybHlpbmdCZWZvcmVTdWJzY3JpcHRpb25BZGRGdW5jdGlvbilcbiAgICAgICAgICAgIHVuZGVybHlpbmdCZWZvcmVTdWJzY3JpcHRpb25BZGRGdW5jdGlvbi5jYWxsKHRhcmdldCwgZXZlbnQpO1xuICAgICAgICBpZiAoZXZlbnQgPT09IGFycmF5Q2hhbmdlRXZlbnROYW1lKSB7XG4gICAgICAgICAgICB0cmFja0NoYW5nZXMoKTtcbiAgICAgICAgfVxuICAgIH07XG4gICAgLy8gV2F0Y2ggXCJkaXNwb3NlXCIgY2FsbHMsIGFuZCBmb3IgYXJyYXkgY2hhbmdlIGV2ZW50cywgZW5zdXJlIGNoYW5nZSB0cmFja2luZyBpcyBkaXNhYmxlZCB3aGVuIGFsbCBhcmUgZGlzcG9zZWRcbiAgICB0YXJnZXQuYWZ0ZXJTdWJzY3JpcHRpb25SZW1vdmUgPSBmdW5jdGlvbiAoZXZlbnQpIHtcbiAgICAgICAgaWYgKHVuZGVybHlpbmdBZnRlclN1YnNjcmlwdGlvblJlbW92ZUZ1bmN0aW9uKVxuICAgICAgICAgICAgdW5kZXJseWluZ0FmdGVyU3Vic2NyaXB0aW9uUmVtb3ZlRnVuY3Rpb24uY2FsbCh0YXJnZXQsIGV2ZW50KTtcbiAgICAgICAgaWYgKGV2ZW50ID09PSBhcnJheUNoYW5nZUV2ZW50TmFtZSAmJiAhdGFyZ2V0Lmhhc1N1YnNjcmlwdGlvbnNGb3JFdmVudChhcnJheUNoYW5nZUV2ZW50TmFtZSkpIHtcbiAgICAgICAgICAgIGFycmF5Q2hhbmdlU3Vic2NyaXB0aW9uLmRpc3Bvc2UoKTtcbiAgICAgICAgICAgIHRyYWNraW5nQ2hhbmdlcyA9IGZhbHNlO1xuICAgICAgICB9XG4gICAgfTtcblxuICAgIGZ1bmN0aW9uIHRyYWNrQ2hhbmdlcygpIHtcbiAgICAgICAgLy8gQ2FsbGluZyAndHJhY2tDaGFuZ2VzJyBtdWx0aXBsZSB0aW1lcyBpcyB0aGUgc2FtZSBhcyBjYWxsaW5nIGl0IG9uY2VcbiAgICAgICAgaWYgKHRyYWNraW5nQ2hhbmdlcykge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG5cbiAgICAgICAgdHJhY2tpbmdDaGFuZ2VzID0gdHJ1ZTtcblxuICAgICAgICAvLyBJbnRlcmNlcHQgXCJub3RpZnlTdWJzY3JpYmVyc1wiIHRvIHRyYWNrIGhvdyBtYW55IHRpbWVzIGl0IHdhcyBjYWxsZWQuXG4gICAgICAgIHZhciB1bmRlcmx5aW5nTm90aWZ5U3Vic2NyaWJlcnNGdW5jdGlvbiA9IHRhcmdldFsnbm90aWZ5U3Vic2NyaWJlcnMnXTtcbiAgICAgICAgdGFyZ2V0Wydub3RpZnlTdWJzY3JpYmVycyddID0gZnVuY3Rpb24odmFsdWVUb05vdGlmeSwgZXZlbnQpIHtcbiAgICAgICAgICAgIGlmICghZXZlbnQgfHwgZXZlbnQgPT09IGRlZmF1bHRFdmVudCkge1xuICAgICAgICAgICAgICAgICsrcGVuZGluZ05vdGlmaWNhdGlvbnM7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gdW5kZXJseWluZ05vdGlmeVN1YnNjcmliZXJzRnVuY3Rpb24uYXBwbHkodGhpcywgYXJndW1lbnRzKTtcbiAgICAgICAgfTtcblxuICAgICAgICAvLyBFYWNoIHRpbWUgdGhlIGFycmF5IGNoYW5nZXMgdmFsdWUsIGNhcHR1cmUgYSBjbG9uZSBzbyB0aGF0IG9uIHRoZSBuZXh0XG4gICAgICAgIC8vIGNoYW5nZSBpdCdzIHBvc3NpYmxlIHRvIHByb2R1Y2UgYSBkaWZmXG4gICAgICAgIHZhciBwcmV2aW91c0NvbnRlbnRzID0gW10uY29uY2F0KHRhcmdldC5wZWVrKCkgfHwgW10pO1xuICAgICAgICBjYWNoZWREaWZmID0gbnVsbDtcbiAgICAgICAgYXJyYXlDaGFuZ2VTdWJzY3JpcHRpb24gPSB0YXJnZXQuc3Vic2NyaWJlKGZ1bmN0aW9uKGN1cnJlbnRDb250ZW50cykge1xuICAgICAgICAgICAgLy8gTWFrZSBhIGNvcHkgb2YgdGhlIGN1cnJlbnQgY29udGVudHMgYW5kIGVuc3VyZSBpdCdzIGFuIGFycmF5XG4gICAgICAgICAgICBjdXJyZW50Q29udGVudHMgPSBbXS5jb25jYXQoY3VycmVudENvbnRlbnRzIHx8IFtdKTtcblxuICAgICAgICAgICAgLy8gQ29tcHV0ZSB0aGUgZGlmZiBhbmQgaXNzdWUgbm90aWZpY2F0aW9ucywgYnV0IG9ubHkgaWYgc29tZW9uZSBpcyBsaXN0ZW5pbmdcbiAgICAgICAgICAgIGlmICh0YXJnZXQuaGFzU3Vic2NyaXB0aW9uc0ZvckV2ZW50KGFycmF5Q2hhbmdlRXZlbnROYW1lKSkge1xuICAgICAgICAgICAgICAgIHZhciBjaGFuZ2VzID0gZ2V0Q2hhbmdlcyhwcmV2aW91c0NvbnRlbnRzLCBjdXJyZW50Q29udGVudHMpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAvLyBFbGltaW5hdGUgcmVmZXJlbmNlcyB0byB0aGUgb2xkLCByZW1vdmVkIGl0ZW1zLCBzbyB0aGV5IGNhbiBiZSBHQ2VkXG4gICAgICAgICAgICBwcmV2aW91c0NvbnRlbnRzID0gY3VycmVudENvbnRlbnRzO1xuICAgICAgICAgICAgY2FjaGVkRGlmZiA9IG51bGw7XG4gICAgICAgICAgICBwZW5kaW5nTm90aWZpY2F0aW9ucyA9IDA7XG5cbiAgICAgICAgICAgIGlmIChjaGFuZ2VzICYmIGNoYW5nZXMubGVuZ3RoKSB7XG4gICAgICAgICAgICAgICAgdGFyZ2V0Wydub3RpZnlTdWJzY3JpYmVycyddKGNoYW5nZXMsIGFycmF5Q2hhbmdlRXZlbnROYW1lKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gZ2V0Q2hhbmdlcyhwcmV2aW91c0NvbnRlbnRzLCBjdXJyZW50Q29udGVudHMpIHtcbiAgICAgICAgLy8gV2UgdHJ5IHRvIHJlLXVzZSBjYWNoZWQgZGlmZnMuXG4gICAgICAgIC8vIFRoZSBzY2VuYXJpb3Mgd2hlcmUgcGVuZGluZ05vdGlmaWNhdGlvbnMgPiAxIGFyZSB3aGVuIHVzaW5nIHJhdGUtbGltaXRpbmcgb3IgdGhlIERlZmVycmVkIFVwZGF0ZXNcbiAgICAgICAgLy8gcGx1Z2luLCB3aGljaCB3aXRob3V0IHRoaXMgY2hlY2sgd291bGQgbm90IGJlIGNvbXBhdGlibGUgd2l0aCBhcnJheUNoYW5nZSBub3RpZmljYXRpb25zLiBOb3JtYWxseSxcbiAgICAgICAgLy8gbm90aWZpY2F0aW9ucyBhcmUgaXNzdWVkIGltbWVkaWF0ZWx5IHNvIHdlIHdvdWxkbid0IGJlIHF1ZXVlaW5nIHVwIG1vcmUgdGhhbiBvbmUuXG4gICAgICAgIGlmICghY2FjaGVkRGlmZiB8fCBwZW5kaW5nTm90aWZpY2F0aW9ucyA+IDEpIHtcbiAgICAgICAgICAgIGNhY2hlZERpZmYgPSBrby51dGlscy5jb21wYXJlQXJyYXlzKHByZXZpb3VzQ29udGVudHMsIGN1cnJlbnRDb250ZW50cywgdGFyZ2V0LmNvbXBhcmVBcnJheU9wdGlvbnMpO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIGNhY2hlZERpZmY7XG4gICAgfVxuXG4gICAgdGFyZ2V0LmNhY2hlRGlmZkZvcktub3duT3BlcmF0aW9uID0gZnVuY3Rpb24ocmF3QXJyYXksIG9wZXJhdGlvbk5hbWUsIGFyZ3MpIHtcbiAgICAgICAgLy8gT25seSBydW4gaWYgd2UncmUgY3VycmVudGx5IHRyYWNraW5nIGNoYW5nZXMgZm9yIHRoaXMgb2JzZXJ2YWJsZSBhcnJheVxuICAgICAgICAvLyBhbmQgdGhlcmUgYXJlbid0IGFueSBwZW5kaW5nIGRlZmVycmVkIG5vdGlmaWNhdGlvbnMuXG4gICAgICAgIGlmICghdHJhY2tpbmdDaGFuZ2VzIHx8IHBlbmRpbmdOb3RpZmljYXRpb25zKSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgdmFyIGRpZmYgPSBbXSxcbiAgICAgICAgICAgIGFycmF5TGVuZ3RoID0gcmF3QXJyYXkubGVuZ3RoLFxuICAgICAgICAgICAgYXJnc0xlbmd0aCA9IGFyZ3MubGVuZ3RoLFxuICAgICAgICAgICAgb2Zmc2V0ID0gMDtcblxuICAgICAgICBmdW5jdGlvbiBwdXNoRGlmZihzdGF0dXMsIHZhbHVlLCBpbmRleCkge1xuICAgICAgICAgICAgcmV0dXJuIGRpZmZbZGlmZi5sZW5ndGhdID0geyAnc3RhdHVzJzogc3RhdHVzLCAndmFsdWUnOiB2YWx1ZSwgJ2luZGV4JzogaW5kZXggfTtcbiAgICAgICAgfVxuICAgICAgICBzd2l0Y2ggKG9wZXJhdGlvbk5hbWUpIHtcbiAgICAgICAgICAgIGNhc2UgJ3B1c2gnOlxuICAgICAgICAgICAgICAgIG9mZnNldCA9IGFycmF5TGVuZ3RoO1xuICAgICAgICAgICAgY2FzZSAndW5zaGlmdCc6XG4gICAgICAgICAgICAgICAgZm9yICh2YXIgaW5kZXggPSAwOyBpbmRleCA8IGFyZ3NMZW5ndGg7IGluZGV4KyspIHtcbiAgICAgICAgICAgICAgICAgICAgcHVzaERpZmYoJ2FkZGVkJywgYXJnc1tpbmRleF0sIG9mZnNldCArIGluZGV4KTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgICAgIGNhc2UgJ3BvcCc6XG4gICAgICAgICAgICAgICAgb2Zmc2V0ID0gYXJyYXlMZW5ndGggLSAxO1xuICAgICAgICAgICAgY2FzZSAnc2hpZnQnOlxuICAgICAgICAgICAgICAgIGlmIChhcnJheUxlbmd0aCkge1xuICAgICAgICAgICAgICAgICAgICBwdXNoRGlmZignZGVsZXRlZCcsIHJhd0FycmF5W29mZnNldF0sIG9mZnNldCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgICAgICBjYXNlICdzcGxpY2UnOlxuICAgICAgICAgICAgICAgIC8vIE5lZ2F0aXZlIHN0YXJ0IGluZGV4IG1lYW5zICdmcm9tIGVuZCBvZiBhcnJheScuIEFmdGVyIHRoYXQgd2UgY2xhbXAgdG8gWzAuLi5hcnJheUxlbmd0aF0uXG4gICAgICAgICAgICAgICAgLy8gU2VlIGh0dHBzOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL2VuLVVTL2RvY3MvV2ViL0phdmFTY3JpcHQvUmVmZXJlbmNlL0dsb2JhbF9PYmplY3RzL0FycmF5L3NwbGljZVxuICAgICAgICAgICAgICAgIHZhciBzdGFydEluZGV4ID0gTWF0aC5taW4oTWF0aC5tYXgoMCwgYXJnc1swXSA8IDAgPyBhcnJheUxlbmd0aCArIGFyZ3NbMF0gOiBhcmdzWzBdKSwgYXJyYXlMZW5ndGgpLFxuICAgICAgICAgICAgICAgICAgICBlbmREZWxldGVJbmRleCA9IGFyZ3NMZW5ndGggPT09IDEgPyBhcnJheUxlbmd0aCA6IE1hdGgubWluKHN0YXJ0SW5kZXggKyAoYXJnc1sxXSB8fCAwKSwgYXJyYXlMZW5ndGgpLFxuICAgICAgICAgICAgICAgICAgICBlbmRBZGRJbmRleCA9IHN0YXJ0SW5kZXggKyBhcmdzTGVuZ3RoIC0gMixcbiAgICAgICAgICAgICAgICAgICAgZW5kSW5kZXggPSBNYXRoLm1heChlbmREZWxldGVJbmRleCwgZW5kQWRkSW5kZXgpLFxuICAgICAgICAgICAgICAgICAgICBhZGRpdGlvbnMgPSBbXSwgZGVsZXRpb25zID0gW107XG4gICAgICAgICAgICAgICAgZm9yICh2YXIgaW5kZXggPSBzdGFydEluZGV4LCBhcmdzSW5kZXggPSAyOyBpbmRleCA8IGVuZEluZGV4OyArK2luZGV4LCArK2FyZ3NJbmRleCkge1xuICAgICAgICAgICAgICAgICAgICBpZiAoaW5kZXggPCBlbmREZWxldGVJbmRleClcbiAgICAgICAgICAgICAgICAgICAgICAgIGRlbGV0aW9ucy5wdXNoKHB1c2hEaWZmKCdkZWxldGVkJywgcmF3QXJyYXlbaW5kZXhdLCBpbmRleCkpO1xuICAgICAgICAgICAgICAgICAgICBpZiAoaW5kZXggPCBlbmRBZGRJbmRleClcbiAgICAgICAgICAgICAgICAgICAgICAgIGFkZGl0aW9ucy5wdXNoKHB1c2hEaWZmKCdhZGRlZCcsIGFyZ3NbYXJnc0luZGV4XSwgaW5kZXgpKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAga28udXRpbHMuZmluZE1vdmVzSW5BcnJheUNvbXBhcmlzb24oZGVsZXRpb25zLCBhZGRpdGlvbnMpO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICBjYWNoZWREaWZmID0gZGlmZjtcbiAgICB9O1xufTtcbnZhciBjb21wdXRlZFN0YXRlID0ga28udXRpbHMuY3JlYXRlU3ltYm9sT3JTdHJpbmcoJ19zdGF0ZScpO1xuXG5rby5jb21wdXRlZCA9IGtvLmRlcGVuZGVudE9ic2VydmFibGUgPSBmdW5jdGlvbiAoZXZhbHVhdG9yRnVuY3Rpb25Pck9wdGlvbnMsIGV2YWx1YXRvckZ1bmN0aW9uVGFyZ2V0LCBvcHRpb25zKSB7XG4gICAgaWYgKHR5cGVvZiBldmFsdWF0b3JGdW5jdGlvbk9yT3B0aW9ucyA9PT0gXCJvYmplY3RcIikge1xuICAgICAgICAvLyBTaW5nbGUtcGFyYW1ldGVyIHN5bnRheCAtIGV2ZXJ5dGhpbmcgaXMgb24gdGhpcyBcIm9wdGlvbnNcIiBwYXJhbVxuICAgICAgICBvcHRpb25zID0gZXZhbHVhdG9yRnVuY3Rpb25Pck9wdGlvbnM7XG4gICAgfSBlbHNlIHtcbiAgICAgICAgLy8gTXVsdGktcGFyYW1ldGVyIHN5bnRheCAtIGNvbnN0cnVjdCB0aGUgb3B0aW9ucyBhY2NvcmRpbmcgdG8gdGhlIHBhcmFtcyBwYXNzZWRcbiAgICAgICAgb3B0aW9ucyA9IG9wdGlvbnMgfHwge307XG4gICAgICAgIGlmIChldmFsdWF0b3JGdW5jdGlvbk9yT3B0aW9ucykge1xuICAgICAgICAgICAgb3B0aW9uc1tcInJlYWRcIl0gPSBldmFsdWF0b3JGdW5jdGlvbk9yT3B0aW9ucztcbiAgICAgICAgfVxuICAgIH1cbiAgICBpZiAodHlwZW9mIG9wdGlvbnNbXCJyZWFkXCJdICE9IFwiZnVuY3Rpb25cIilcbiAgICAgICAgdGhyb3cgRXJyb3IoXCJQYXNzIGEgZnVuY3Rpb24gdGhhdCByZXR1cm5zIHRoZSB2YWx1ZSBvZiB0aGUga28uY29tcHV0ZWRcIik7XG5cbiAgICB2YXIgd3JpdGVGdW5jdGlvbiA9IG9wdGlvbnNbXCJ3cml0ZVwiXTtcbiAgICB2YXIgc3RhdGUgPSB7XG4gICAgICAgIGxhdGVzdFZhbHVlOiB1bmRlZmluZWQsXG4gICAgICAgIGlzU3RhbGU6IHRydWUsXG4gICAgICAgIGlzQmVpbmdFdmFsdWF0ZWQ6IGZhbHNlLFxuICAgICAgICBzdXBwcmVzc0Rpc3Bvc2FsVW50aWxEaXNwb3NlV2hlblJldHVybnNGYWxzZTogZmFsc2UsXG4gICAgICAgIGlzRGlzcG9zZWQ6IGZhbHNlLFxuICAgICAgICBwdXJlOiBmYWxzZSxcbiAgICAgICAgaXNTbGVlcGluZzogZmFsc2UsXG4gICAgICAgIHJlYWRGdW5jdGlvbjogb3B0aW9uc1tcInJlYWRcIl0sXG4gICAgICAgIGV2YWx1YXRvckZ1bmN0aW9uVGFyZ2V0OiBldmFsdWF0b3JGdW5jdGlvblRhcmdldCB8fCBvcHRpb25zW1wib3duZXJcIl0sXG4gICAgICAgIGRpc3Bvc2VXaGVuTm9kZUlzUmVtb3ZlZDogb3B0aW9uc1tcImRpc3Bvc2VXaGVuTm9kZUlzUmVtb3ZlZFwiXSB8fCBvcHRpb25zLmRpc3Bvc2VXaGVuTm9kZUlzUmVtb3ZlZCB8fCBudWxsLFxuICAgICAgICBkaXNwb3NlV2hlbjogb3B0aW9uc1tcImRpc3Bvc2VXaGVuXCJdIHx8IG9wdGlvbnMuZGlzcG9zZVdoZW4sXG4gICAgICAgIGRvbU5vZGVEaXNwb3NhbENhbGxiYWNrOiBudWxsLFxuICAgICAgICBkZXBlbmRlbmN5VHJhY2tpbmc6IHt9LFxuICAgICAgICBkZXBlbmRlbmNpZXNDb3VudDogMCxcbiAgICAgICAgZXZhbHVhdGlvblRpbWVvdXRJbnN0YW5jZTogbnVsbFxuICAgIH07XG5cbiAgICBmdW5jdGlvbiBjb21wdXRlZE9ic2VydmFibGUoKSB7XG4gICAgICAgIGlmIChhcmd1bWVudHMubGVuZ3RoID4gMCkge1xuICAgICAgICAgICAgaWYgKHR5cGVvZiB3cml0ZUZ1bmN0aW9uID09PSBcImZ1bmN0aW9uXCIpIHtcbiAgICAgICAgICAgICAgICAvLyBXcml0aW5nIGEgdmFsdWVcbiAgICAgICAgICAgICAgICB3cml0ZUZ1bmN0aW9uLmFwcGx5KHN0YXRlLmV2YWx1YXRvckZ1bmN0aW9uVGFyZ2V0LCBhcmd1bWVudHMpO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJDYW5ub3Qgd3JpdGUgYSB2YWx1ZSB0byBhIGtvLmNvbXB1dGVkIHVubGVzcyB5b3Ugc3BlY2lmeSBhICd3cml0ZScgb3B0aW9uLiBJZiB5b3Ugd2lzaCB0byByZWFkIHRoZSBjdXJyZW50IHZhbHVlLCBkb24ndCBwYXNzIGFueSBwYXJhbWV0ZXJzLlwiKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiB0aGlzOyAvLyBQZXJtaXRzIGNoYWluZWQgYXNzaWdubWVudHNcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIC8vIFJlYWRpbmcgdGhlIHZhbHVlXG4gICAgICAgICAgICBrby5kZXBlbmRlbmN5RGV0ZWN0aW9uLnJlZ2lzdGVyRGVwZW5kZW5jeShjb21wdXRlZE9ic2VydmFibGUpO1xuICAgICAgICAgICAgaWYgKHN0YXRlLmlzU3RhbGUgfHwgKHN0YXRlLmlzU2xlZXBpbmcgJiYgY29tcHV0ZWRPYnNlcnZhYmxlLmhhdmVEZXBlbmRlbmNpZXNDaGFuZ2VkKCkpKSB7XG4gICAgICAgICAgICAgICAgY29tcHV0ZWRPYnNlcnZhYmxlLmV2YWx1YXRlSW1tZWRpYXRlKCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gc3RhdGUubGF0ZXN0VmFsdWU7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBjb21wdXRlZE9ic2VydmFibGVbY29tcHV0ZWRTdGF0ZV0gPSBzdGF0ZTtcbiAgICBjb21wdXRlZE9ic2VydmFibGUuaGFzV3JpdGVGdW5jdGlvbiA9IHR5cGVvZiB3cml0ZUZ1bmN0aW9uID09PSBcImZ1bmN0aW9uXCI7XG5cbiAgICAvLyBJbmhlcml0IGZyb20gJ3N1YnNjcmliYWJsZSdcbiAgICBpZiAoIWtvLnV0aWxzLmNhblNldFByb3RvdHlwZSkge1xuICAgICAgICAvLyAnc3Vic2NyaWJhYmxlJyB3b24ndCBiZSBvbiB0aGUgcHJvdG90eXBlIGNoYWluIHVubGVzcyB3ZSBwdXQgaXQgdGhlcmUgZGlyZWN0bHlcbiAgICAgICAga28udXRpbHMuZXh0ZW5kKGNvbXB1dGVkT2JzZXJ2YWJsZSwga28uc3Vic2NyaWJhYmxlWydmbiddKTtcbiAgICB9XG4gICAga28uc3Vic2NyaWJhYmxlWydmbiddLmluaXQoY29tcHV0ZWRPYnNlcnZhYmxlKTtcblxuICAgIC8vIEluaGVyaXQgZnJvbSAnY29tcHV0ZWQnXG4gICAga28udXRpbHMuc2V0UHJvdG90eXBlT2ZPckV4dGVuZChjb21wdXRlZE9ic2VydmFibGUsIGNvbXB1dGVkRm4pO1xuXG4gICAgaWYgKG9wdGlvbnNbJ3B1cmUnXSkge1xuICAgICAgICBzdGF0ZS5wdXJlID0gdHJ1ZTtcbiAgICAgICAgc3RhdGUuaXNTbGVlcGluZyA9IHRydWU7ICAgICAvLyBTdGFydHMgb2ZmIHNsZWVwaW5nOyB3aWxsIGF3YWtlIG9uIHRoZSBmaXJzdCBzdWJzY3JpcHRpb25cbiAgICAgICAga28udXRpbHMuZXh0ZW5kKGNvbXB1dGVkT2JzZXJ2YWJsZSwgcHVyZUNvbXB1dGVkT3ZlcnJpZGVzKTtcbiAgICB9IGVsc2UgaWYgKG9wdGlvbnNbJ2RlZmVyRXZhbHVhdGlvbiddKSB7XG4gICAgICAgIGtvLnV0aWxzLmV4dGVuZChjb21wdXRlZE9ic2VydmFibGUsIGRlZmVyRXZhbHVhdGlvbk92ZXJyaWRlcyk7XG4gICAgfVxuXG4gICAgaWYgKGtvLm9wdGlvbnNbJ2RlZmVyVXBkYXRlcyddKSB7XG4gICAgICAgIGtvLmV4dGVuZGVyc1snZGVmZXJyZWQnXShjb21wdXRlZE9ic2VydmFibGUsIHRydWUpO1xuICAgIH1cblxuICAgIGlmIChERUJVRykge1xuICAgICAgICAvLyAjMTczMSAtIEFpZCBkZWJ1Z2dpbmcgYnkgZXhwb3NpbmcgdGhlIGNvbXB1dGVkJ3Mgb3B0aW9uc1xuICAgICAgICBjb21wdXRlZE9ic2VydmFibGVbXCJfb3B0aW9uc1wiXSA9IG9wdGlvbnM7XG4gICAgfVxuXG4gICAgaWYgKHN0YXRlLmRpc3Bvc2VXaGVuTm9kZUlzUmVtb3ZlZCkge1xuICAgICAgICAvLyBTaW5jZSB0aGlzIGNvbXB1dGVkIGlzIGFzc29jaWF0ZWQgd2l0aCBhIERPTSBub2RlLCBhbmQgd2UgZG9uJ3Qgd2FudCB0byBkaXNwb3NlIHRoZSBjb21wdXRlZFxuICAgICAgICAvLyB1bnRpbCB0aGUgRE9NIG5vZGUgaXMgKnJlbW92ZWQqIGZyb20gdGhlIGRvY3VtZW50IChhcyBvcHBvc2VkIHRvIG5ldmVyIGhhdmluZyBiZWVuIGluIHRoZSBkb2N1bWVudCksXG4gICAgICAgIC8vIHdlJ2xsIHByZXZlbnQgZGlzcG9zYWwgdW50aWwgXCJkaXNwb3NlV2hlblwiIGZpcnN0IHJldHVybnMgZmFsc2UuXG4gICAgICAgIHN0YXRlLnN1cHByZXNzRGlzcG9zYWxVbnRpbERpc3Bvc2VXaGVuUmV0dXJuc0ZhbHNlID0gdHJ1ZTtcblxuICAgICAgICAvLyBkaXNwb3NlV2hlbk5vZGVJc1JlbW92ZWQ6IHRydWUgY2FuIGJlIHVzZWQgdG8gb3B0IGludG8gdGhlIFwib25seSBkaXNwb3NlIGFmdGVyIGZpcnN0IGZhbHNlIHJlc3VsdFwiXG4gICAgICAgIC8vIGJlaGF2aW91ciBldmVuIGlmIHRoZXJlJ3Mgbm8gc3BlY2lmaWMgbm9kZSB0byB3YXRjaC4gSW4gdGhhdCBjYXNlLCBjbGVhciB0aGUgb3B0aW9uIHNvIHdlIGRvbid0IHRyeVxuICAgICAgICAvLyB0byB3YXRjaCBmb3IgYSBub24tbm9kZSdzIGRpc3Bvc2FsLiBUaGlzIHRlY2huaXF1ZSBpcyBpbnRlbmRlZCBmb3IgS08ncyBpbnRlcm5hbCB1c2Ugb25seSBhbmQgc2hvdWxkbid0XG4gICAgICAgIC8vIGJlIGRvY3VtZW50ZWQgb3IgdXNlZCBieSBhcHBsaWNhdGlvbiBjb2RlLCBhcyBpdCdzIGxpa2VseSB0byBjaGFuZ2UgaW4gYSBmdXR1cmUgdmVyc2lvbiBvZiBLTy5cbiAgICAgICAgaWYgKCFzdGF0ZS5kaXNwb3NlV2hlbk5vZGVJc1JlbW92ZWQubm9kZVR5cGUpIHtcbiAgICAgICAgICAgIHN0YXRlLmRpc3Bvc2VXaGVuTm9kZUlzUmVtb3ZlZCA9IG51bGw7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICAvLyBFdmFsdWF0ZSwgdW5sZXNzIHNsZWVwaW5nIG9yIGRlZmVyRXZhbHVhdGlvbiBpcyB0cnVlXG4gICAgaWYgKCFzdGF0ZS5pc1NsZWVwaW5nICYmICFvcHRpb25zWydkZWZlckV2YWx1YXRpb24nXSkge1xuICAgICAgICBjb21wdXRlZE9ic2VydmFibGUuZXZhbHVhdGVJbW1lZGlhdGUoKTtcbiAgICB9XG5cbiAgICAvLyBBdHRhY2ggYSBET00gbm9kZSBkaXNwb3NhbCBjYWxsYmFjayBzbyB0aGF0IHRoZSBjb21wdXRlZCB3aWxsIGJlIHByb2FjdGl2ZWx5IGRpc3Bvc2VkIGFzIHNvb24gYXMgdGhlIG5vZGUgaXNcbiAgICAvLyByZW1vdmVkIHVzaW5nIGtvLnJlbW92ZU5vZGUuIEJ1dCBza2lwIGlmIGlzQWN0aXZlIGlzIGZhbHNlICh0aGVyZSB3aWxsIG5ldmVyIGJlIGFueSBkZXBlbmRlbmNpZXMgdG8gZGlzcG9zZSkuXG4gICAgaWYgKHN0YXRlLmRpc3Bvc2VXaGVuTm9kZUlzUmVtb3ZlZCAmJiBjb21wdXRlZE9ic2VydmFibGUuaXNBY3RpdmUoKSkge1xuICAgICAgICBrby51dGlscy5kb21Ob2RlRGlzcG9zYWwuYWRkRGlzcG9zZUNhbGxiYWNrKHN0YXRlLmRpc3Bvc2VXaGVuTm9kZUlzUmVtb3ZlZCwgc3RhdGUuZG9tTm9kZURpc3Bvc2FsQ2FsbGJhY2sgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICBjb21wdXRlZE9ic2VydmFibGUuZGlzcG9zZSgpO1xuICAgICAgICB9KTtcbiAgICB9XG5cbiAgICByZXR1cm4gY29tcHV0ZWRPYnNlcnZhYmxlO1xufTtcblxuLy8gVXRpbGl0eSBmdW5jdGlvbiB0aGF0IGRpc3Bvc2VzIGEgZ2l2ZW4gZGVwZW5kZW5jeVRyYWNraW5nIGVudHJ5XG5mdW5jdGlvbiBjb21wdXRlZERpc3Bvc2VEZXBlbmRlbmN5Q2FsbGJhY2soaWQsIGVudHJ5VG9EaXNwb3NlKSB7XG4gICAgaWYgKGVudHJ5VG9EaXNwb3NlICE9PSBudWxsICYmIGVudHJ5VG9EaXNwb3NlLmRpc3Bvc2UpIHtcbiAgICAgICAgZW50cnlUb0Rpc3Bvc2UuZGlzcG9zZSgpO1xuICAgIH1cbn1cblxuLy8gVGhpcyBmdW5jdGlvbiBnZXRzIGNhbGxlZCBlYWNoIHRpbWUgYSBkZXBlbmRlbmN5IGlzIGRldGVjdGVkIHdoaWxlIGV2YWx1YXRpbmcgYSBjb21wdXRlZC5cbi8vIEl0J3MgZmFjdG9yZWQgb3V0IGFzIGEgc2hhcmVkIGZ1bmN0aW9uIHRvIGF2b2lkIGNyZWF0aW5nIHVubmVjZXNzYXJ5IGZ1bmN0aW9uIGluc3RhbmNlcyBkdXJpbmcgZXZhbHVhdGlvbi5cbmZ1bmN0aW9uIGNvbXB1dGVkQmVnaW5EZXBlbmRlbmN5RGV0ZWN0aW9uQ2FsbGJhY2soc3Vic2NyaWJhYmxlLCBpZCkge1xuICAgIHZhciBjb21wdXRlZE9ic2VydmFibGUgPSB0aGlzLmNvbXB1dGVkT2JzZXJ2YWJsZSxcbiAgICAgICAgc3RhdGUgPSBjb21wdXRlZE9ic2VydmFibGVbY29tcHV0ZWRTdGF0ZV07XG4gICAgaWYgKCFzdGF0ZS5pc0Rpc3Bvc2VkKSB7XG4gICAgICAgIGlmICh0aGlzLmRpc3Bvc2FsQ291bnQgJiYgdGhpcy5kaXNwb3NhbENhbmRpZGF0ZXNbaWRdKSB7XG4gICAgICAgICAgICAvLyBEb24ndCB3YW50IHRvIGRpc3Bvc2UgdGhpcyBzdWJzY3JpcHRpb24sIGFzIGl0J3Mgc3RpbGwgYmVpbmcgdXNlZFxuICAgICAgICAgICAgY29tcHV0ZWRPYnNlcnZhYmxlLmFkZERlcGVuZGVuY3lUcmFja2luZyhpZCwgc3Vic2NyaWJhYmxlLCB0aGlzLmRpc3Bvc2FsQ2FuZGlkYXRlc1tpZF0pO1xuICAgICAgICAgICAgdGhpcy5kaXNwb3NhbENhbmRpZGF0ZXNbaWRdID0gbnVsbDsgLy8gTm8gbmVlZCB0byBhY3R1YWxseSBkZWxldGUgdGhlIHByb3BlcnR5IC0gZGlzcG9zYWxDYW5kaWRhdGVzIGlzIGEgdHJhbnNpZW50IG9iamVjdCBhbnl3YXlcbiAgICAgICAgICAgIC0tdGhpcy5kaXNwb3NhbENvdW50O1xuICAgICAgICB9IGVsc2UgaWYgKCFzdGF0ZS5kZXBlbmRlbmN5VHJhY2tpbmdbaWRdKSB7XG4gICAgICAgICAgICAvLyBCcmFuZCBuZXcgc3Vic2NyaXB0aW9uIC0gYWRkIGl0XG4gICAgICAgICAgICBjb21wdXRlZE9ic2VydmFibGUuYWRkRGVwZW5kZW5jeVRyYWNraW5nKGlkLCBzdWJzY3JpYmFibGUsIHN0YXRlLmlzU2xlZXBpbmcgPyB7IF90YXJnZXQ6IHN1YnNjcmliYWJsZSB9IDogY29tcHV0ZWRPYnNlcnZhYmxlLnN1YnNjcmliZVRvRGVwZW5kZW5jeShzdWJzY3JpYmFibGUpKTtcbiAgICAgICAgfVxuICAgIH1cbn1cblxudmFyIGNvbXB1dGVkRm4gPSB7XG4gICAgXCJlcXVhbGl0eUNvbXBhcmVyXCI6IHZhbHVlc0FyZVByaW1pdGl2ZUFuZEVxdWFsLFxuICAgIGdldERlcGVuZGVuY2llc0NvdW50OiBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHJldHVybiB0aGlzW2NvbXB1dGVkU3RhdGVdLmRlcGVuZGVuY2llc0NvdW50O1xuICAgIH0sXG4gICAgYWRkRGVwZW5kZW5jeVRyYWNraW5nOiBmdW5jdGlvbiAoaWQsIHRhcmdldCwgdHJhY2tpbmdPYmopIHtcbiAgICAgICAgaWYgKHRoaXNbY29tcHV0ZWRTdGF0ZV0ucHVyZSAmJiB0YXJnZXQgPT09IHRoaXMpIHtcbiAgICAgICAgICAgIHRocm93IEVycm9yKFwiQSAncHVyZScgY29tcHV0ZWQgbXVzdCBub3QgYmUgY2FsbGVkIHJlY3Vyc2l2ZWx5XCIpO1xuICAgICAgICB9XG5cbiAgICAgICAgdGhpc1tjb21wdXRlZFN0YXRlXS5kZXBlbmRlbmN5VHJhY2tpbmdbaWRdID0gdHJhY2tpbmdPYmo7XG4gICAgICAgIHRyYWNraW5nT2JqLl9vcmRlciA9IHRoaXNbY29tcHV0ZWRTdGF0ZV0uZGVwZW5kZW5jaWVzQ291bnQrKztcbiAgICAgICAgdHJhY2tpbmdPYmouX3ZlcnNpb24gPSB0YXJnZXQuZ2V0VmVyc2lvbigpO1xuICAgIH0sXG4gICAgaGF2ZURlcGVuZGVuY2llc0NoYW5nZWQ6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdmFyIGlkLCBkZXBlbmRlbmN5LCBkZXBlbmRlbmN5VHJhY2tpbmcgPSB0aGlzW2NvbXB1dGVkU3RhdGVdLmRlcGVuZGVuY3lUcmFja2luZztcbiAgICAgICAgZm9yIChpZCBpbiBkZXBlbmRlbmN5VHJhY2tpbmcpIHtcbiAgICAgICAgICAgIGlmIChkZXBlbmRlbmN5VHJhY2tpbmcuaGFzT3duUHJvcGVydHkoaWQpKSB7XG4gICAgICAgICAgICAgICAgZGVwZW5kZW5jeSA9IGRlcGVuZGVuY3lUcmFja2luZ1tpZF07XG4gICAgICAgICAgICAgICAgaWYgKGRlcGVuZGVuY3kuX3RhcmdldC5oYXNDaGFuZ2VkKGRlcGVuZGVuY3kuX3ZlcnNpb24pKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH0sXG4gICAgbWFya0RpcnR5OiBmdW5jdGlvbiAoKSB7XG4gICAgICAgIC8vIFByb2Nlc3MgXCJkaXJ0eVwiIGV2ZW50cyBpZiB3ZSBjYW4gaGFuZGxlIGRlbGF5ZWQgbm90aWZpY2F0aW9uc1xuICAgICAgICBpZiAodGhpcy5fZXZhbERlbGF5ZWQgJiYgIXRoaXNbY29tcHV0ZWRTdGF0ZV0uaXNCZWluZ0V2YWx1YXRlZCkge1xuICAgICAgICAgICAgdGhpcy5fZXZhbERlbGF5ZWQoKTtcbiAgICAgICAgfVxuICAgIH0sXG4gICAgaXNBY3RpdmU6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXNbY29tcHV0ZWRTdGF0ZV0uaXNTdGFsZSB8fCB0aGlzW2NvbXB1dGVkU3RhdGVdLmRlcGVuZGVuY2llc0NvdW50ID4gMDtcbiAgICB9LFxuICAgIHJlc3BvbmRUb0NoYW5nZTogZnVuY3Rpb24gKCkge1xuICAgICAgICAvLyBJZ25vcmUgXCJjaGFuZ2VcIiBldmVudHMgaWYgd2UndmUgYWxyZWFkeSBzY2hlZHVsZWQgYSBkZWxheWVkIG5vdGlmaWNhdGlvblxuICAgICAgICBpZiAoIXRoaXMuX25vdGlmaWNhdGlvbklzUGVuZGluZykge1xuICAgICAgICAgICAgdGhpcy5ldmFsdWF0ZVBvc3NpYmx5QXN5bmMoKTtcbiAgICAgICAgfVxuICAgIH0sXG4gICAgc3Vic2NyaWJlVG9EZXBlbmRlbmN5OiBmdW5jdGlvbiAodGFyZ2V0KSB7XG4gICAgICAgIGlmICh0YXJnZXQuX2RlZmVyVXBkYXRlcyAmJiAhdGhpc1tjb21wdXRlZFN0YXRlXS5kaXNwb3NlV2hlbk5vZGVJc1JlbW92ZWQpIHtcbiAgICAgICAgICAgIHZhciBkaXJ0eVN1YiA9IHRhcmdldC5zdWJzY3JpYmUodGhpcy5tYXJrRGlydHksIHRoaXMsICdkaXJ0eScpLFxuICAgICAgICAgICAgICAgIGNoYW5nZVN1YiA9IHRhcmdldC5zdWJzY3JpYmUodGhpcy5yZXNwb25kVG9DaGFuZ2UsIHRoaXMpO1xuICAgICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgICAgICBfdGFyZ2V0OiB0YXJnZXQsXG4gICAgICAgICAgICAgICAgZGlzcG9zZTogZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgICAgICBkaXJ0eVN1Yi5kaXNwb3NlKCk7XG4gICAgICAgICAgICAgICAgICAgIGNoYW5nZVN1Yi5kaXNwb3NlKCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHJldHVybiB0YXJnZXQuc3Vic2NyaWJlKHRoaXMuZXZhbHVhdGVQb3NzaWJseUFzeW5jLCB0aGlzKTtcbiAgICAgICAgfVxuICAgIH0sXG4gICAgZXZhbHVhdGVQb3NzaWJseUFzeW5jOiBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHZhciBjb21wdXRlZE9ic2VydmFibGUgPSB0aGlzLFxuICAgICAgICAgICAgdGhyb3R0bGVFdmFsdWF0aW9uVGltZW91dCA9IGNvbXB1dGVkT2JzZXJ2YWJsZVsndGhyb3R0bGVFdmFsdWF0aW9uJ107XG4gICAgICAgIGlmICh0aHJvdHRsZUV2YWx1YXRpb25UaW1lb3V0ICYmIHRocm90dGxlRXZhbHVhdGlvblRpbWVvdXQgPj0gMCkge1xuICAgICAgICAgICAgY2xlYXJUaW1lb3V0KHRoaXNbY29tcHV0ZWRTdGF0ZV0uZXZhbHVhdGlvblRpbWVvdXRJbnN0YW5jZSk7XG4gICAgICAgICAgICB0aGlzW2NvbXB1dGVkU3RhdGVdLmV2YWx1YXRpb25UaW1lb3V0SW5zdGFuY2UgPSBrby51dGlscy5zZXRUaW1lb3V0KGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICBjb21wdXRlZE9ic2VydmFibGUuZXZhbHVhdGVJbW1lZGlhdGUodHJ1ZSAvKm5vdGlmeUNoYW5nZSovKTtcbiAgICAgICAgICAgIH0sIHRocm90dGxlRXZhbHVhdGlvblRpbWVvdXQpO1xuICAgICAgICB9IGVsc2UgaWYgKGNvbXB1dGVkT2JzZXJ2YWJsZS5fZXZhbERlbGF5ZWQpIHtcbiAgICAgICAgICAgIGNvbXB1dGVkT2JzZXJ2YWJsZS5fZXZhbERlbGF5ZWQoKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGNvbXB1dGVkT2JzZXJ2YWJsZS5ldmFsdWF0ZUltbWVkaWF0ZSh0cnVlIC8qbm90aWZ5Q2hhbmdlKi8pO1xuICAgICAgICB9XG4gICAgfSxcbiAgICBldmFsdWF0ZUltbWVkaWF0ZTogZnVuY3Rpb24gKG5vdGlmeUNoYW5nZSkge1xuICAgICAgICB2YXIgY29tcHV0ZWRPYnNlcnZhYmxlID0gdGhpcyxcbiAgICAgICAgICAgIHN0YXRlID0gY29tcHV0ZWRPYnNlcnZhYmxlW2NvbXB1dGVkU3RhdGVdLFxuICAgICAgICAgICAgZGlzcG9zZVdoZW4gPSBzdGF0ZS5kaXNwb3NlV2hlbjtcblxuICAgICAgICBpZiAoc3RhdGUuaXNCZWluZ0V2YWx1YXRlZCkge1xuICAgICAgICAgICAgLy8gSWYgdGhlIGV2YWx1YXRpb24gb2YgYSBrby5jb21wdXRlZCBjYXVzZXMgc2lkZSBlZmZlY3RzLCBpdCdzIHBvc3NpYmxlIHRoYXQgaXQgd2lsbCB0cmlnZ2VyIGl0cyBvd24gcmUtZXZhbHVhdGlvbi5cbiAgICAgICAgICAgIC8vIFRoaXMgaXMgbm90IGRlc2lyYWJsZSAoaXQncyBoYXJkIGZvciBhIGRldmVsb3BlciB0byByZWFsaXNlIGEgY2hhaW4gb2YgZGVwZW5kZW5jaWVzIG1pZ2h0IGNhdXNlIHRoaXMsIGFuZCB0aGV5IGFsbW9zdFxuICAgICAgICAgICAgLy8gY2VydGFpbmx5IGRpZG4ndCBpbnRlbmQgaW5maW5pdGUgcmUtZXZhbHVhdGlvbnMpLiBTbywgZm9yIHByZWRpY3RhYmlsaXR5LCB3ZSBzaW1wbHkgcHJldmVudCBrby5jb21wdXRlZHMgZnJvbSBjYXVzaW5nXG4gICAgICAgICAgICAvLyB0aGVpciBvd24gcmUtZXZhbHVhdGlvbi4gRnVydGhlciBkaXNjdXNzaW9uIGF0IGh0dHBzOi8vZ2l0aHViLmNvbS9TdGV2ZVNhbmRlcnNvbi9rbm9ja291dC9wdWxsLzM4N1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG5cbiAgICAgICAgLy8gRG8gbm90IGV2YWx1YXRlIChhbmQgcG9zc2libHkgY2FwdHVyZSBuZXcgZGVwZW5kZW5jaWVzKSBpZiBkaXNwb3NlZFxuICAgICAgICBpZiAoc3RhdGUuaXNEaXNwb3NlZCkge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKHN0YXRlLmRpc3Bvc2VXaGVuTm9kZUlzUmVtb3ZlZCAmJiAha28udXRpbHMuZG9tTm9kZUlzQXR0YWNoZWRUb0RvY3VtZW50KHN0YXRlLmRpc3Bvc2VXaGVuTm9kZUlzUmVtb3ZlZCkgfHwgZGlzcG9zZVdoZW4gJiYgZGlzcG9zZVdoZW4oKSkge1xuICAgICAgICAgICAgLy8gU2VlIGNvbW1lbnQgYWJvdmUgYWJvdXQgc3VwcHJlc3NEaXNwb3NhbFVudGlsRGlzcG9zZVdoZW5SZXR1cm5zRmFsc2VcbiAgICAgICAgICAgIGlmICghc3RhdGUuc3VwcHJlc3NEaXNwb3NhbFVudGlsRGlzcG9zZVdoZW5SZXR1cm5zRmFsc2UpIHtcbiAgICAgICAgICAgICAgICBjb21wdXRlZE9ic2VydmFibGUuZGlzcG9zZSgpO1xuICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIC8vIEl0IGp1c3QgZGlkIHJldHVybiBmYWxzZSwgc28gd2UgY2FuIHN0b3Agc3VwcHJlc3Npbmcgbm93XG4gICAgICAgICAgICBzdGF0ZS5zdXBwcmVzc0Rpc3Bvc2FsVW50aWxEaXNwb3NlV2hlblJldHVybnNGYWxzZSA9IGZhbHNlO1xuICAgICAgICB9XG5cbiAgICAgICAgc3RhdGUuaXNCZWluZ0V2YWx1YXRlZCA9IHRydWU7XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgICB0aGlzLmV2YWx1YXRlSW1tZWRpYXRlX0NhbGxSZWFkV2l0aERlcGVuZGVuY3lEZXRlY3Rpb24obm90aWZ5Q2hhbmdlKTtcbiAgICAgICAgfSBmaW5hbGx5IHtcbiAgICAgICAgICAgIHN0YXRlLmlzQmVpbmdFdmFsdWF0ZWQgPSBmYWxzZTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmICghc3RhdGUuZGVwZW5kZW5jaWVzQ291bnQpIHtcbiAgICAgICAgICAgIGNvbXB1dGVkT2JzZXJ2YWJsZS5kaXNwb3NlKCk7XG4gICAgICAgIH1cbiAgICB9LFxuICAgIGV2YWx1YXRlSW1tZWRpYXRlX0NhbGxSZWFkV2l0aERlcGVuZGVuY3lEZXRlY3Rpb246IGZ1bmN0aW9uIChub3RpZnlDaGFuZ2UpIHtcbiAgICAgICAgLy8gVGhpcyBmdW5jdGlvbiBpcyByZWFsbHkganVzdCBwYXJ0IG9mIHRoZSBldmFsdWF0ZUltbWVkaWF0ZSBsb2dpYy4gWW91IHdvdWxkIG5ldmVyIGNhbGwgaXQgZnJvbSBhbnl3aGVyZSBlbHNlLlxuICAgICAgICAvLyBGYWN0b3JpbmcgaXQgb3V0IGludG8gYSBzZXBhcmF0ZSBmdW5jdGlvbiBtZWFucyBpdCBjYW4gYmUgaW5kZXBlbmRlbnQgb2YgdGhlIHRyeS9jYXRjaCBibG9jayBpbiBldmFsdWF0ZUltbWVkaWF0ZSxcbiAgICAgICAgLy8gd2hpY2ggY29udHJpYnV0ZXMgdG8gc2F2aW5nIGFib3V0IDQwJSBvZmYgdGhlIENQVSBvdmVyaGVhZCBvZiBjb21wdXRlZCBldmFsdWF0aW9uIChvbiBWOCBhdCBsZWFzdCkuXG5cbiAgICAgICAgdmFyIGNvbXB1dGVkT2JzZXJ2YWJsZSA9IHRoaXMsXG4gICAgICAgICAgICBzdGF0ZSA9IGNvbXB1dGVkT2JzZXJ2YWJsZVtjb21wdXRlZFN0YXRlXTtcblxuICAgICAgICAvLyBJbml0aWFsbHksIHdlIGFzc3VtZSB0aGF0IG5vbmUgb2YgdGhlIHN1YnNjcmlwdGlvbnMgYXJlIHN0aWxsIGJlaW5nIHVzZWQgKGkuZS4sIGFsbCBhcmUgY2FuZGlkYXRlcyBmb3IgZGlzcG9zYWwpLlxuICAgICAgICAvLyBUaGVuLCBkdXJpbmcgZXZhbHVhdGlvbiwgd2UgY3Jvc3Mgb2ZmIGFueSB0aGF0IGFyZSBpbiBmYWN0IHN0aWxsIGJlaW5nIHVzZWQuXG4gICAgICAgIHZhciBpc0luaXRpYWwgPSBzdGF0ZS5wdXJlID8gdW5kZWZpbmVkIDogIXN0YXRlLmRlcGVuZGVuY2llc0NvdW50LCAgIC8vIElmIHdlJ3JlIGV2YWx1YXRpbmcgd2hlbiB0aGVyZSBhcmUgbm8gcHJldmlvdXMgZGVwZW5kZW5jaWVzLCBpdCBtdXN0IGJlIHRoZSBmaXJzdCB0aW1lXG4gICAgICAgICAgICBkZXBlbmRlbmN5RGV0ZWN0aW9uQ29udGV4dCA9IHtcbiAgICAgICAgICAgICAgICBjb21wdXRlZE9ic2VydmFibGU6IGNvbXB1dGVkT2JzZXJ2YWJsZSxcbiAgICAgICAgICAgICAgICBkaXNwb3NhbENhbmRpZGF0ZXM6IHN0YXRlLmRlcGVuZGVuY3lUcmFja2luZyxcbiAgICAgICAgICAgICAgICBkaXNwb3NhbENvdW50OiBzdGF0ZS5kZXBlbmRlbmNpZXNDb3VudFxuICAgICAgICAgICAgfTtcblxuICAgICAgICBrby5kZXBlbmRlbmN5RGV0ZWN0aW9uLmJlZ2luKHtcbiAgICAgICAgICAgIGNhbGxiYWNrVGFyZ2V0OiBkZXBlbmRlbmN5RGV0ZWN0aW9uQ29udGV4dCxcbiAgICAgICAgICAgIGNhbGxiYWNrOiBjb21wdXRlZEJlZ2luRGVwZW5kZW5jeURldGVjdGlvbkNhbGxiYWNrLFxuICAgICAgICAgICAgY29tcHV0ZWQ6IGNvbXB1dGVkT2JzZXJ2YWJsZSxcbiAgICAgICAgICAgIGlzSW5pdGlhbDogaXNJbml0aWFsXG4gICAgICAgIH0pO1xuXG4gICAgICAgIHN0YXRlLmRlcGVuZGVuY3lUcmFja2luZyA9IHt9O1xuICAgICAgICBzdGF0ZS5kZXBlbmRlbmNpZXNDb3VudCA9IDA7XG5cbiAgICAgICAgdmFyIG5ld1ZhbHVlID0gdGhpcy5ldmFsdWF0ZUltbWVkaWF0ZV9DYWxsUmVhZFRoZW5FbmREZXBlbmRlbmN5RGV0ZWN0aW9uKHN0YXRlLCBkZXBlbmRlbmN5RGV0ZWN0aW9uQ29udGV4dCk7XG5cbiAgICAgICAgaWYgKGNvbXB1dGVkT2JzZXJ2YWJsZS5pc0RpZmZlcmVudChzdGF0ZS5sYXRlc3RWYWx1ZSwgbmV3VmFsdWUpKSB7XG4gICAgICAgICAgICBpZiAoIXN0YXRlLmlzU2xlZXBpbmcpIHtcbiAgICAgICAgICAgICAgICBjb21wdXRlZE9ic2VydmFibGVbXCJub3RpZnlTdWJzY3JpYmVyc1wiXShzdGF0ZS5sYXRlc3RWYWx1ZSwgXCJiZWZvcmVDaGFuZ2VcIik7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIHN0YXRlLmxhdGVzdFZhbHVlID0gbmV3VmFsdWU7XG5cbiAgICAgICAgICAgIGlmIChzdGF0ZS5pc1NsZWVwaW5nKSB7XG4gICAgICAgICAgICAgICAgY29tcHV0ZWRPYnNlcnZhYmxlLnVwZGF0ZVZlcnNpb24oKTtcbiAgICAgICAgICAgIH0gZWxzZSBpZiAobm90aWZ5Q2hhbmdlKSB7XG4gICAgICAgICAgICAgICAgY29tcHV0ZWRPYnNlcnZhYmxlW1wibm90aWZ5U3Vic2NyaWJlcnNcIl0oc3RhdGUubGF0ZXN0VmFsdWUpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgaWYgKGlzSW5pdGlhbCkge1xuICAgICAgICAgICAgY29tcHV0ZWRPYnNlcnZhYmxlW1wibm90aWZ5U3Vic2NyaWJlcnNcIl0oc3RhdGUubGF0ZXN0VmFsdWUsIFwiYXdha2VcIik7XG4gICAgICAgIH1cbiAgICB9LFxuICAgIGV2YWx1YXRlSW1tZWRpYXRlX0NhbGxSZWFkVGhlbkVuZERlcGVuZGVuY3lEZXRlY3Rpb246IGZ1bmN0aW9uIChzdGF0ZSwgZGVwZW5kZW5jeURldGVjdGlvbkNvbnRleHQpIHtcbiAgICAgICAgLy8gVGhpcyBmdW5jdGlvbiBpcyByZWFsbHkgcGFydCBvZiB0aGUgZXZhbHVhdGVJbW1lZGlhdGVfQ2FsbFJlYWRXaXRoRGVwZW5kZW5jeURldGVjdGlvbiBsb2dpYy5cbiAgICAgICAgLy8gWW91J2QgbmV2ZXIgY2FsbCBpdCBmcm9tIGFueXdoZXJlIGVsc2UuIEZhY3RvcmluZyBpdCBvdXQgbWVhbnMgdGhhdCBldmFsdWF0ZUltbWVkaWF0ZV9DYWxsUmVhZFdpdGhEZXBlbmRlbmN5RGV0ZWN0aW9uXG4gICAgICAgIC8vIGNhbiBiZSBpbmRlcGVuZGVudCBvZiB0cnkvZmluYWxseSBibG9ja3MsIHdoaWNoIGNvbnRyaWJ1dGVzIHRvIHNhdmluZyBhYm91dCA0MCUgb2ZmIHRoZSBDUFVcbiAgICAgICAgLy8gb3ZlcmhlYWQgb2YgY29tcHV0ZWQgZXZhbHVhdGlvbiAob24gVjggYXQgbGVhc3QpLlxuXG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgICB2YXIgcmVhZEZ1bmN0aW9uID0gc3RhdGUucmVhZEZ1bmN0aW9uO1xuICAgICAgICAgICAgcmV0dXJuIHN0YXRlLmV2YWx1YXRvckZ1bmN0aW9uVGFyZ2V0ID8gcmVhZEZ1bmN0aW9uLmNhbGwoc3RhdGUuZXZhbHVhdG9yRnVuY3Rpb25UYXJnZXQpIDogcmVhZEZ1bmN0aW9uKCk7XG4gICAgICAgIH0gZmluYWxseSB7XG4gICAgICAgICAgICBrby5kZXBlbmRlbmN5RGV0ZWN0aW9uLmVuZCgpO1xuXG4gICAgICAgICAgICAvLyBGb3IgZWFjaCBzdWJzY3JpcHRpb24gbm8gbG9uZ2VyIGJlaW5nIHVzZWQsIHJlbW92ZSBpdCBmcm9tIHRoZSBhY3RpdmUgc3Vic2NyaXB0aW9ucyBsaXN0IGFuZCBkaXNwb3NlIGl0XG4gICAgICAgICAgICBpZiAoZGVwZW5kZW5jeURldGVjdGlvbkNvbnRleHQuZGlzcG9zYWxDb3VudCAmJiAhc3RhdGUuaXNTbGVlcGluZykge1xuICAgICAgICAgICAgICAgIGtvLnV0aWxzLm9iamVjdEZvckVhY2goZGVwZW5kZW5jeURldGVjdGlvbkNvbnRleHQuZGlzcG9zYWxDYW5kaWRhdGVzLCBjb21wdXRlZERpc3Bvc2VEZXBlbmRlbmN5Q2FsbGJhY2spO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBzdGF0ZS5pc1N0YWxlID0gZmFsc2U7XG4gICAgICAgIH1cbiAgICB9LFxuICAgIHBlZWs6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgLy8gUGVlayB3b24ndCByZS1ldmFsdWF0ZSwgZXhjZXB0IHdoaWxlIHRoZSBjb21wdXRlZCBpcyBzbGVlcGluZyBvciB0byBnZXQgdGhlIGluaXRpYWwgdmFsdWUgd2hlbiBcImRlZmVyRXZhbHVhdGlvblwiIGlzIHNldC5cbiAgICAgICAgdmFyIHN0YXRlID0gdGhpc1tjb21wdXRlZFN0YXRlXTtcbiAgICAgICAgaWYgKChzdGF0ZS5pc1N0YWxlICYmICFzdGF0ZS5kZXBlbmRlbmNpZXNDb3VudCkgfHwgKHN0YXRlLmlzU2xlZXBpbmcgJiYgdGhpcy5oYXZlRGVwZW5kZW5jaWVzQ2hhbmdlZCgpKSkge1xuICAgICAgICAgICAgdGhpcy5ldmFsdWF0ZUltbWVkaWF0ZSgpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBzdGF0ZS5sYXRlc3RWYWx1ZTtcbiAgICB9LFxuICAgIGxpbWl0OiBmdW5jdGlvbiAobGltaXRGdW5jdGlvbikge1xuICAgICAgICAvLyBPdmVycmlkZSB0aGUgbGltaXQgZnVuY3Rpb24gd2l0aCBvbmUgdGhhdCBkZWxheXMgZXZhbHVhdGlvbiBhcyB3ZWxsXG4gICAgICAgIGtvLnN1YnNjcmliYWJsZVsnZm4nXS5saW1pdC5jYWxsKHRoaXMsIGxpbWl0RnVuY3Rpb24pO1xuICAgICAgICB0aGlzLl9ldmFsRGVsYXllZCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIHRoaXMuX2xpbWl0QmVmb3JlQ2hhbmdlKHRoaXNbY29tcHV0ZWRTdGF0ZV0ubGF0ZXN0VmFsdWUpO1xuXG4gICAgICAgICAgICB0aGlzW2NvbXB1dGVkU3RhdGVdLmlzU3RhbGUgPSB0cnVlOyAvLyBNYXJrIGFzIGRpcnR5XG5cbiAgICAgICAgICAgIC8vIFBhc3MgdGhlIG9ic2VydmFibGUgdG8gdGhlIFwibGltaXRcIiBjb2RlLCB3aGljaCB3aWxsIGFjY2VzcyBpdCB3aGVuXG4gICAgICAgICAgICAvLyBpdCdzIHRpbWUgdG8gZG8gdGhlIG5vdGlmaWNhdGlvbi5cbiAgICAgICAgICAgIHRoaXMuX2xpbWl0Q2hhbmdlKHRoaXMpO1xuICAgICAgICB9XG4gICAgfSxcbiAgICBkaXNwb3NlOiBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHZhciBzdGF0ZSA9IHRoaXNbY29tcHV0ZWRTdGF0ZV07XG4gICAgICAgIGlmICghc3RhdGUuaXNTbGVlcGluZyAmJiBzdGF0ZS5kZXBlbmRlbmN5VHJhY2tpbmcpIHtcbiAgICAgICAgICAgIGtvLnV0aWxzLm9iamVjdEZvckVhY2goc3RhdGUuZGVwZW5kZW5jeVRyYWNraW5nLCBmdW5jdGlvbiAoaWQsIGRlcGVuZGVuY3kpIHtcbiAgICAgICAgICAgICAgICBpZiAoZGVwZW5kZW5jeS5kaXNwb3NlKVxuICAgICAgICAgICAgICAgICAgICBkZXBlbmRlbmN5LmRpc3Bvc2UoKTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgICAgIGlmIChzdGF0ZS5kaXNwb3NlV2hlbk5vZGVJc1JlbW92ZWQgJiYgc3RhdGUuZG9tTm9kZURpc3Bvc2FsQ2FsbGJhY2spIHtcbiAgICAgICAgICAgIGtvLnV0aWxzLmRvbU5vZGVEaXNwb3NhbC5yZW1vdmVEaXNwb3NlQ2FsbGJhY2soc3RhdGUuZGlzcG9zZVdoZW5Ob2RlSXNSZW1vdmVkLCBzdGF0ZS5kb21Ob2RlRGlzcG9zYWxDYWxsYmFjayk7XG4gICAgICAgIH1cbiAgICAgICAgc3RhdGUuZGVwZW5kZW5jeVRyYWNraW5nID0gbnVsbDtcbiAgICAgICAgc3RhdGUuZGVwZW5kZW5jaWVzQ291bnQgPSAwO1xuICAgICAgICBzdGF0ZS5pc0Rpc3Bvc2VkID0gdHJ1ZTtcbiAgICAgICAgc3RhdGUuaXNTdGFsZSA9IGZhbHNlO1xuICAgICAgICBzdGF0ZS5pc1NsZWVwaW5nID0gZmFsc2U7XG4gICAgICAgIHN0YXRlLmRpc3Bvc2VXaGVuTm9kZUlzUmVtb3ZlZCA9IG51bGw7XG4gICAgfVxufTtcblxudmFyIHB1cmVDb21wdXRlZE92ZXJyaWRlcyA9IHtcbiAgICBiZWZvcmVTdWJzY3JpcHRpb25BZGQ6IGZ1bmN0aW9uIChldmVudCkge1xuICAgICAgICAvLyBJZiBhc2xlZXAsIHdha2UgdXAgdGhlIGNvbXB1dGVkIGJ5IHN1YnNjcmliaW5nIHRvIGFueSBkZXBlbmRlbmNpZXMuXG4gICAgICAgIHZhciBjb21wdXRlZE9ic2VydmFibGUgPSB0aGlzLFxuICAgICAgICAgICAgc3RhdGUgPSBjb21wdXRlZE9ic2VydmFibGVbY29tcHV0ZWRTdGF0ZV07XG4gICAgICAgIGlmICghc3RhdGUuaXNEaXNwb3NlZCAmJiBzdGF0ZS5pc1NsZWVwaW5nICYmIGV2ZW50ID09ICdjaGFuZ2UnKSB7XG4gICAgICAgICAgICBzdGF0ZS5pc1NsZWVwaW5nID0gZmFsc2U7XG4gICAgICAgICAgICBpZiAoc3RhdGUuaXNTdGFsZSB8fCBjb21wdXRlZE9ic2VydmFibGUuaGF2ZURlcGVuZGVuY2llc0NoYW5nZWQoKSkge1xuICAgICAgICAgICAgICAgIHN0YXRlLmRlcGVuZGVuY3lUcmFja2luZyA9IG51bGw7XG4gICAgICAgICAgICAgICAgc3RhdGUuZGVwZW5kZW5jaWVzQ291bnQgPSAwO1xuICAgICAgICAgICAgICAgIHN0YXRlLmlzU3RhbGUgPSB0cnVlO1xuICAgICAgICAgICAgICAgIGNvbXB1dGVkT2JzZXJ2YWJsZS5ldmFsdWF0ZUltbWVkaWF0ZSgpO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAvLyBGaXJzdCBwdXQgdGhlIGRlcGVuZGVuY2llcyBpbiBvcmRlclxuICAgICAgICAgICAgICAgIHZhciBkZXBlbmRlY2llc09yZGVyID0gW107XG4gICAgICAgICAgICAgICAga28udXRpbHMub2JqZWN0Rm9yRWFjaChzdGF0ZS5kZXBlbmRlbmN5VHJhY2tpbmcsIGZ1bmN0aW9uIChpZCwgZGVwZW5kZW5jeSkge1xuICAgICAgICAgICAgICAgICAgICBkZXBlbmRlY2llc09yZGVyW2RlcGVuZGVuY3kuX29yZGVyXSA9IGlkO1xuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgIC8vIE5leHQsIHN1YnNjcmliZSB0byBlYWNoIG9uZVxuICAgICAgICAgICAgICAgIGtvLnV0aWxzLmFycmF5Rm9yRWFjaChkZXBlbmRlY2llc09yZGVyLCBmdW5jdGlvbiAoaWQsIG9yZGVyKSB7XG4gICAgICAgICAgICAgICAgICAgIHZhciBkZXBlbmRlbmN5ID0gc3RhdGUuZGVwZW5kZW5jeVRyYWNraW5nW2lkXSxcbiAgICAgICAgICAgICAgICAgICAgICAgIHN1YnNjcmlwdGlvbiA9IGNvbXB1dGVkT2JzZXJ2YWJsZS5zdWJzY3JpYmVUb0RlcGVuZGVuY3koZGVwZW5kZW5jeS5fdGFyZ2V0KTtcbiAgICAgICAgICAgICAgICAgICAgc3Vic2NyaXB0aW9uLl9vcmRlciA9IG9yZGVyO1xuICAgICAgICAgICAgICAgICAgICBzdWJzY3JpcHRpb24uX3ZlcnNpb24gPSBkZXBlbmRlbmN5Ll92ZXJzaW9uO1xuICAgICAgICAgICAgICAgICAgICBzdGF0ZS5kZXBlbmRlbmN5VHJhY2tpbmdbaWRdID0gc3Vic2NyaXB0aW9uO1xuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKCFzdGF0ZS5pc0Rpc3Bvc2VkKSB7ICAgICAvLyB0ZXN0IHNpbmNlIGV2YWx1YXRpbmcgY291bGQgdHJpZ2dlciBkaXNwb3NhbFxuICAgICAgICAgICAgICAgIGNvbXB1dGVkT2JzZXJ2YWJsZVtcIm5vdGlmeVN1YnNjcmliZXJzXCJdKHN0YXRlLmxhdGVzdFZhbHVlLCBcImF3YWtlXCIpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfSxcbiAgICBhZnRlclN1YnNjcmlwdGlvblJlbW92ZTogZnVuY3Rpb24gKGV2ZW50KSB7XG4gICAgICAgIHZhciBzdGF0ZSA9IHRoaXNbY29tcHV0ZWRTdGF0ZV07XG4gICAgICAgIGlmICghc3RhdGUuaXNEaXNwb3NlZCAmJiBldmVudCA9PSAnY2hhbmdlJyAmJiAhdGhpcy5oYXNTdWJzY3JpcHRpb25zRm9yRXZlbnQoJ2NoYW5nZScpKSB7XG4gICAgICAgICAgICBrby51dGlscy5vYmplY3RGb3JFYWNoKHN0YXRlLmRlcGVuZGVuY3lUcmFja2luZywgZnVuY3Rpb24gKGlkLCBkZXBlbmRlbmN5KSB7XG4gICAgICAgICAgICAgICAgaWYgKGRlcGVuZGVuY3kuZGlzcG9zZSkge1xuICAgICAgICAgICAgICAgICAgICBzdGF0ZS5kZXBlbmRlbmN5VHJhY2tpbmdbaWRdID0ge1xuICAgICAgICAgICAgICAgICAgICAgICAgX3RhcmdldDogZGVwZW5kZW5jeS5fdGFyZ2V0LFxuICAgICAgICAgICAgICAgICAgICAgICAgX29yZGVyOiBkZXBlbmRlbmN5Ll9vcmRlcixcbiAgICAgICAgICAgICAgICAgICAgICAgIF92ZXJzaW9uOiBkZXBlbmRlbmN5Ll92ZXJzaW9uXG4gICAgICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICAgICAgICAgIGRlcGVuZGVuY3kuZGlzcG9zZSgpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgc3RhdGUuaXNTbGVlcGluZyA9IHRydWU7XG4gICAgICAgICAgICB0aGlzW1wibm90aWZ5U3Vic2NyaWJlcnNcIl0odW5kZWZpbmVkLCBcImFzbGVlcFwiKTtcbiAgICAgICAgfVxuICAgIH0sXG4gICAgZ2V0VmVyc2lvbjogZnVuY3Rpb24gKCkge1xuICAgICAgICAvLyBCZWNhdXNlIGEgcHVyZSBjb21wdXRlZCBpcyBub3QgYXV0b21hdGljYWxseSB1cGRhdGVkIHdoaWxlIGl0IGlzIHNsZWVwaW5nLCB3ZSBjYW4ndFxuICAgICAgICAvLyBzaW1wbHkgcmV0dXJuIHRoZSB2ZXJzaW9uIG51bWJlci4gSW5zdGVhZCwgd2UgY2hlY2sgaWYgYW55IG9mIHRoZSBkZXBlbmRlbmNpZXMgaGF2ZVxuICAgICAgICAvLyBjaGFuZ2VkIGFuZCBjb25kaXRpb25hbGx5IHJlLWV2YWx1YXRlIHRoZSBjb21wdXRlZCBvYnNlcnZhYmxlLlxuICAgICAgICB2YXIgc3RhdGUgPSB0aGlzW2NvbXB1dGVkU3RhdGVdO1xuICAgICAgICBpZiAoc3RhdGUuaXNTbGVlcGluZyAmJiAoc3RhdGUuaXNTdGFsZSB8fCB0aGlzLmhhdmVEZXBlbmRlbmNpZXNDaGFuZ2VkKCkpKSB7XG4gICAgICAgICAgICB0aGlzLmV2YWx1YXRlSW1tZWRpYXRlKCk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGtvLnN1YnNjcmliYWJsZVsnZm4nXS5nZXRWZXJzaW9uLmNhbGwodGhpcyk7XG4gICAgfVxufTtcblxudmFyIGRlZmVyRXZhbHVhdGlvbk92ZXJyaWRlcyA9IHtcbiAgICBiZWZvcmVTdWJzY3JpcHRpb25BZGQ6IGZ1bmN0aW9uIChldmVudCkge1xuICAgICAgICAvLyBUaGlzIHdpbGwgZm9yY2UgYSBjb21wdXRlZCB3aXRoIGRlZmVyRXZhbHVhdGlvbiB0byBldmFsdWF0ZSB3aGVuIHRoZSBmaXJzdCBzdWJzY3JpcHRpb24gaXMgcmVnaXN0ZXJlZC5cbiAgICAgICAgaWYgKGV2ZW50ID09ICdjaGFuZ2UnIHx8IGV2ZW50ID09ICdiZWZvcmVDaGFuZ2UnKSB7XG4gICAgICAgICAgICB0aGlzLnBlZWsoKTtcbiAgICAgICAgfVxuICAgIH1cbn07XG5cbi8vIE5vdGUgdGhhdCBmb3IgYnJvd3NlcnMgdGhhdCBkb24ndCBzdXBwb3J0IHByb3RvIGFzc2lnbm1lbnQsIHRoZVxuLy8gaW5oZXJpdGFuY2UgY2hhaW4gaXMgY3JlYXRlZCBtYW51YWxseSBpbiB0aGUga28uY29tcHV0ZWQgY29uc3RydWN0b3JcbmlmIChrby51dGlscy5jYW5TZXRQcm90b3R5cGUpIHtcbiAgICBrby51dGlscy5zZXRQcm90b3R5cGVPZihjb21wdXRlZEZuLCBrby5zdWJzY3JpYmFibGVbJ2ZuJ10pO1xufVxuXG4vLyBTZXQgdGhlIHByb3RvIGNoYWluIHZhbHVlcyBmb3Iga28uaGFzUHJvdG90eXBlXG52YXIgcHJvdG9Qcm9wID0ga28ub2JzZXJ2YWJsZS5wcm90b1Byb3BlcnR5OyAvLyA9PSBcIl9fa29fcHJvdG9fX1wiXG5rby5jb21wdXRlZFtwcm90b1Byb3BdID0ga28ub2JzZXJ2YWJsZTtcbmNvbXB1dGVkRm5bcHJvdG9Qcm9wXSA9IGtvLmNvbXB1dGVkO1xuXG5rby5pc0NvbXB1dGVkID0gZnVuY3Rpb24gKGluc3RhbmNlKSB7XG4gICAgcmV0dXJuIGtvLmhhc1Byb3RvdHlwZShpbnN0YW5jZSwga28uY29tcHV0ZWQpO1xufTtcblxua28uaXNQdXJlQ29tcHV0ZWQgPSBmdW5jdGlvbiAoaW5zdGFuY2UpIHtcbiAgICByZXR1cm4ga28uaGFzUHJvdG90eXBlKGluc3RhbmNlLCBrby5jb21wdXRlZClcbiAgICAgICAgJiYgaW5zdGFuY2VbY29tcHV0ZWRTdGF0ZV0gJiYgaW5zdGFuY2VbY29tcHV0ZWRTdGF0ZV0ucHVyZTtcbn07XG5cbmtvLmV4cG9ydFN5bWJvbCgnY29tcHV0ZWQnLCBrby5jb21wdXRlZCk7XG5rby5leHBvcnRTeW1ib2woJ2RlcGVuZGVudE9ic2VydmFibGUnLCBrby5jb21wdXRlZCk7ICAgIC8vIGV4cG9ydCBrby5kZXBlbmRlbnRPYnNlcnZhYmxlIGZvciBiYWNrd2FyZHMgY29tcGF0aWJpbGl0eSAoMS54KVxua28uZXhwb3J0U3ltYm9sKCdpc0NvbXB1dGVkJywga28uaXNDb21wdXRlZCk7XG5rby5leHBvcnRTeW1ib2woJ2lzUHVyZUNvbXB1dGVkJywga28uaXNQdXJlQ29tcHV0ZWQpO1xua28uZXhwb3J0U3ltYm9sKCdjb21wdXRlZC5mbicsIGNvbXB1dGVkRm4pO1xua28uZXhwb3J0UHJvcGVydHkoY29tcHV0ZWRGbiwgJ3BlZWsnLCBjb21wdXRlZEZuLnBlZWspO1xua28uZXhwb3J0UHJvcGVydHkoY29tcHV0ZWRGbiwgJ2Rpc3Bvc2UnLCBjb21wdXRlZEZuLmRpc3Bvc2UpO1xua28uZXhwb3J0UHJvcGVydHkoY29tcHV0ZWRGbiwgJ2lzQWN0aXZlJywgY29tcHV0ZWRGbi5pc0FjdGl2ZSk7XG5rby5leHBvcnRQcm9wZXJ0eShjb21wdXRlZEZuLCAnZ2V0RGVwZW5kZW5jaWVzQ291bnQnLCBjb21wdXRlZEZuLmdldERlcGVuZGVuY2llc0NvdW50KTtcblxua28ucHVyZUNvbXB1dGVkID0gZnVuY3Rpb24gKGV2YWx1YXRvckZ1bmN0aW9uT3JPcHRpb25zLCBldmFsdWF0b3JGdW5jdGlvblRhcmdldCkge1xuICAgIGlmICh0eXBlb2YgZXZhbHVhdG9yRnVuY3Rpb25Pck9wdGlvbnMgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgcmV0dXJuIGtvLmNvbXB1dGVkKGV2YWx1YXRvckZ1bmN0aW9uT3JPcHRpb25zLCBldmFsdWF0b3JGdW5jdGlvblRhcmdldCwgeydwdXJlJzp0cnVlfSk7XG4gICAgfSBlbHNlIHtcbiAgICAgICAgZXZhbHVhdG9yRnVuY3Rpb25Pck9wdGlvbnMgPSBrby51dGlscy5leHRlbmQoe30sIGV2YWx1YXRvckZ1bmN0aW9uT3JPcHRpb25zKTsgICAvLyBtYWtlIGEgY29weSBvZiB0aGUgcGFyYW1ldGVyIG9iamVjdFxuICAgICAgICBldmFsdWF0b3JGdW5jdGlvbk9yT3B0aW9uc1sncHVyZSddID0gdHJ1ZTtcbiAgICAgICAgcmV0dXJuIGtvLmNvbXB1dGVkKGV2YWx1YXRvckZ1bmN0aW9uT3JPcHRpb25zLCBldmFsdWF0b3JGdW5jdGlvblRhcmdldCk7XG4gICAgfVxufVxua28uZXhwb3J0U3ltYm9sKCdwdXJlQ29tcHV0ZWQnLCBrby5wdXJlQ29tcHV0ZWQpO1xuXG4oZnVuY3Rpb24oKSB7XG4gICAgdmFyIG1heE5lc3RlZE9ic2VydmFibGVEZXB0aCA9IDEwOyAvLyBFc2NhcGUgdGhlICh1bmxpa2VseSkgcGF0aGFsb2dpY2FsIGNhc2Ugd2hlcmUgYW4gb2JzZXJ2YWJsZSdzIGN1cnJlbnQgdmFsdWUgaXMgaXRzZWxmIChvciBzaW1pbGFyIHJlZmVyZW5jZSBjeWNsZSlcblxuICAgIGtvLnRvSlMgPSBmdW5jdGlvbihyb290T2JqZWN0KSB7XG4gICAgICAgIGlmIChhcmd1bWVudHMubGVuZ3RoID09IDApXG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJXaGVuIGNhbGxpbmcga28udG9KUywgcGFzcyB0aGUgb2JqZWN0IHlvdSB3YW50IHRvIGNvbnZlcnQuXCIpO1xuXG4gICAgICAgIC8vIFdlIGp1c3QgdW53cmFwIGV2ZXJ5dGhpbmcgYXQgZXZlcnkgbGV2ZWwgaW4gdGhlIG9iamVjdCBncmFwaFxuICAgICAgICByZXR1cm4gbWFwSnNPYmplY3RHcmFwaChyb290T2JqZWN0LCBmdW5jdGlvbih2YWx1ZVRvTWFwKSB7XG4gICAgICAgICAgICAvLyBMb29wIGJlY2F1c2UgYW4gb2JzZXJ2YWJsZSdzIHZhbHVlIG1pZ2h0IGluIHR1cm4gYmUgYW5vdGhlciBvYnNlcnZhYmxlIHdyYXBwZXJcbiAgICAgICAgICAgIGZvciAodmFyIGkgPSAwOyBrby5pc09ic2VydmFibGUodmFsdWVUb01hcCkgJiYgKGkgPCBtYXhOZXN0ZWRPYnNlcnZhYmxlRGVwdGgpOyBpKyspXG4gICAgICAgICAgICAgICAgdmFsdWVUb01hcCA9IHZhbHVlVG9NYXAoKTtcbiAgICAgICAgICAgIHJldHVybiB2YWx1ZVRvTWFwO1xuICAgICAgICB9KTtcbiAgICB9O1xuXG4gICAga28udG9KU09OID0gZnVuY3Rpb24ocm9vdE9iamVjdCwgcmVwbGFjZXIsIHNwYWNlKSB7ICAgICAvLyByZXBsYWNlciBhbmQgc3BhY2UgYXJlIG9wdGlvbmFsXG4gICAgICAgIHZhciBwbGFpbkphdmFTY3JpcHRPYmplY3QgPSBrby50b0pTKHJvb3RPYmplY3QpO1xuICAgICAgICByZXR1cm4ga28udXRpbHMuc3RyaW5naWZ5SnNvbihwbGFpbkphdmFTY3JpcHRPYmplY3QsIHJlcGxhY2VyLCBzcGFjZSk7XG4gICAgfTtcblxuICAgIGZ1bmN0aW9uIG1hcEpzT2JqZWN0R3JhcGgocm9vdE9iamVjdCwgbWFwSW5wdXRDYWxsYmFjaywgdmlzaXRlZE9iamVjdHMpIHtcbiAgICAgICAgdmlzaXRlZE9iamVjdHMgPSB2aXNpdGVkT2JqZWN0cyB8fCBuZXcgb2JqZWN0TG9va3VwKCk7XG5cbiAgICAgICAgcm9vdE9iamVjdCA9IG1hcElucHV0Q2FsbGJhY2socm9vdE9iamVjdCk7XG4gICAgICAgIHZhciBjYW5IYXZlUHJvcGVydGllcyA9ICh0eXBlb2Ygcm9vdE9iamVjdCA9PSBcIm9iamVjdFwiKSAmJiAocm9vdE9iamVjdCAhPT0gbnVsbCkgJiYgKHJvb3RPYmplY3QgIT09IHVuZGVmaW5lZCkgJiYgKCEocm9vdE9iamVjdCBpbnN0YW5jZW9mIFJlZ0V4cCkpICYmICghKHJvb3RPYmplY3QgaW5zdGFuY2VvZiBEYXRlKSkgJiYgKCEocm9vdE9iamVjdCBpbnN0YW5jZW9mIFN0cmluZykpICYmICghKHJvb3RPYmplY3QgaW5zdGFuY2VvZiBOdW1iZXIpKSAmJiAoIShyb290T2JqZWN0IGluc3RhbmNlb2YgQm9vbGVhbikpO1xuICAgICAgICBpZiAoIWNhbkhhdmVQcm9wZXJ0aWVzKVxuICAgICAgICAgICAgcmV0dXJuIHJvb3RPYmplY3Q7XG5cbiAgICAgICAgdmFyIG91dHB1dFByb3BlcnRpZXMgPSByb290T2JqZWN0IGluc3RhbmNlb2YgQXJyYXkgPyBbXSA6IHt9O1xuICAgICAgICB2aXNpdGVkT2JqZWN0cy5zYXZlKHJvb3RPYmplY3QsIG91dHB1dFByb3BlcnRpZXMpO1xuXG4gICAgICAgIHZpc2l0UHJvcGVydGllc09yQXJyYXlFbnRyaWVzKHJvb3RPYmplY3QsIGZ1bmN0aW9uKGluZGV4ZXIpIHtcbiAgICAgICAgICAgIHZhciBwcm9wZXJ0eVZhbHVlID0gbWFwSW5wdXRDYWxsYmFjayhyb290T2JqZWN0W2luZGV4ZXJdKTtcblxuICAgICAgICAgICAgc3dpdGNoICh0eXBlb2YgcHJvcGVydHlWYWx1ZSkge1xuICAgICAgICAgICAgICAgIGNhc2UgXCJib29sZWFuXCI6XG4gICAgICAgICAgICAgICAgY2FzZSBcIm51bWJlclwiOlxuICAgICAgICAgICAgICAgIGNhc2UgXCJzdHJpbmdcIjpcbiAgICAgICAgICAgICAgICBjYXNlIFwiZnVuY3Rpb25cIjpcbiAgICAgICAgICAgICAgICAgICAgb3V0cHV0UHJvcGVydGllc1tpbmRleGVyXSA9IHByb3BlcnR5VmFsdWU7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIGNhc2UgXCJvYmplY3RcIjpcbiAgICAgICAgICAgICAgICBjYXNlIFwidW5kZWZpbmVkXCI6XG4gICAgICAgICAgICAgICAgICAgIHZhciBwcmV2aW91c2x5TWFwcGVkVmFsdWUgPSB2aXNpdGVkT2JqZWN0cy5nZXQocHJvcGVydHlWYWx1ZSk7XG4gICAgICAgICAgICAgICAgICAgIG91dHB1dFByb3BlcnRpZXNbaW5kZXhlcl0gPSAocHJldmlvdXNseU1hcHBlZFZhbHVlICE9PSB1bmRlZmluZWQpXG4gICAgICAgICAgICAgICAgICAgICAgICA/IHByZXZpb3VzbHlNYXBwZWRWYWx1ZVxuICAgICAgICAgICAgICAgICAgICAgICAgOiBtYXBKc09iamVjdEdyYXBoKHByb3BlcnR5VmFsdWUsIG1hcElucHV0Q2FsbGJhY2ssIHZpc2l0ZWRPYmplY3RzKTtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0pO1xuXG4gICAgICAgIHJldHVybiBvdXRwdXRQcm9wZXJ0aWVzO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIHZpc2l0UHJvcGVydGllc09yQXJyYXlFbnRyaWVzKHJvb3RPYmplY3QsIHZpc2l0b3JDYWxsYmFjaykge1xuICAgICAgICBpZiAocm9vdE9iamVjdCBpbnN0YW5jZW9mIEFycmF5KSB7XG4gICAgICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IHJvb3RPYmplY3QubGVuZ3RoOyBpKyspXG4gICAgICAgICAgICAgICAgdmlzaXRvckNhbGxiYWNrKGkpO1xuXG4gICAgICAgICAgICAvLyBGb3IgYXJyYXlzLCBhbHNvIHJlc3BlY3QgdG9KU09OIHByb3BlcnR5IGZvciBjdXN0b20gbWFwcGluZ3MgKGZpeGVzICMyNzgpXG4gICAgICAgICAgICBpZiAodHlwZW9mIHJvb3RPYmplY3RbJ3RvSlNPTiddID09ICdmdW5jdGlvbicpXG4gICAgICAgICAgICAgICAgdmlzaXRvckNhbGxiYWNrKCd0b0pTT04nKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGZvciAodmFyIHByb3BlcnR5TmFtZSBpbiByb290T2JqZWN0KSB7XG4gICAgICAgICAgICAgICAgdmlzaXRvckNhbGxiYWNrKHByb3BlcnR5TmFtZSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9O1xuXG4gICAgZnVuY3Rpb24gb2JqZWN0TG9va3VwKCkge1xuICAgICAgICB0aGlzLmtleXMgPSBbXTtcbiAgICAgICAgdGhpcy52YWx1ZXMgPSBbXTtcbiAgICB9O1xuXG4gICAgb2JqZWN0TG9va3VwLnByb3RvdHlwZSA9IHtcbiAgICAgICAgY29uc3RydWN0b3I6IG9iamVjdExvb2t1cCxcbiAgICAgICAgc2F2ZTogZnVuY3Rpb24oa2V5LCB2YWx1ZSkge1xuICAgICAgICAgICAgdmFyIGV4aXN0aW5nSW5kZXggPSBrby51dGlscy5hcnJheUluZGV4T2YodGhpcy5rZXlzLCBrZXkpO1xuICAgICAgICAgICAgaWYgKGV4aXN0aW5nSW5kZXggPj0gMClcbiAgICAgICAgICAgICAgICB0aGlzLnZhbHVlc1tleGlzdGluZ0luZGV4XSA9IHZhbHVlO1xuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgdGhpcy5rZXlzLnB1c2goa2V5KTtcbiAgICAgICAgICAgICAgICB0aGlzLnZhbHVlcy5wdXNoKHZhbHVlKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSxcbiAgICAgICAgZ2V0OiBmdW5jdGlvbihrZXkpIHtcbiAgICAgICAgICAgIHZhciBleGlzdGluZ0luZGV4ID0ga28udXRpbHMuYXJyYXlJbmRleE9mKHRoaXMua2V5cywga2V5KTtcbiAgICAgICAgICAgIHJldHVybiAoZXhpc3RpbmdJbmRleCA+PSAwKSA/IHRoaXMudmFsdWVzW2V4aXN0aW5nSW5kZXhdIDogdW5kZWZpbmVkO1xuICAgICAgICB9XG4gICAgfTtcbn0pKCk7XG5cbmtvLmV4cG9ydFN5bWJvbCgndG9KUycsIGtvLnRvSlMpO1xua28uZXhwb3J0U3ltYm9sKCd0b0pTT04nLCBrby50b0pTT04pO1xuKGZ1bmN0aW9uICgpIHtcbiAgICB2YXIgaGFzRG9tRGF0YUV4cGFuZG9Qcm9wZXJ0eSA9ICdfX2tvX19oYXNEb21EYXRhT3B0aW9uVmFsdWVfXyc7XG5cbiAgICAvLyBOb3JtYWxseSwgU0VMRUNUIGVsZW1lbnRzIGFuZCB0aGVpciBPUFRJT05zIGNhbiBvbmx5IHRha2UgdmFsdWUgb2YgdHlwZSAnc3RyaW5nJyAoYmVjYXVzZSB0aGUgdmFsdWVzXG4gICAgLy8gYXJlIHN0b3JlZCBvbiBET00gYXR0cmlidXRlcykuIGtvLnNlbGVjdEV4dGVuc2lvbnMgcHJvdmlkZXMgYSB3YXkgZm9yIFNFTEVDVHMvT1BUSU9OcyB0byBoYXZlIHZhbHVlc1xuICAgIC8vIHRoYXQgYXJlIGFyYml0cmFyeSBvYmplY3RzLiBUaGlzIGlzIHZlcnkgY29udmVuaWVudCB3aGVuIGltcGxlbWVudGluZyB0aGluZ3MgbGlrZSBjYXNjYWRpbmcgZHJvcGRvd25zLlxuICAgIGtvLnNlbGVjdEV4dGVuc2lvbnMgPSB7XG4gICAgICAgIHJlYWRWYWx1ZSA6IGZ1bmN0aW9uKGVsZW1lbnQpIHtcbiAgICAgICAgICAgIHN3aXRjaCAoa28udXRpbHMudGFnTmFtZUxvd2VyKGVsZW1lbnQpKSB7XG4gICAgICAgICAgICAgICAgY2FzZSAnb3B0aW9uJzpcbiAgICAgICAgICAgICAgICAgICAgaWYgKGVsZW1lbnRbaGFzRG9tRGF0YUV4cGFuZG9Qcm9wZXJ0eV0gPT09IHRydWUpXG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4ga28udXRpbHMuZG9tRGF0YS5nZXQoZWxlbWVudCwga28uYmluZGluZ0hhbmRsZXJzLm9wdGlvbnMub3B0aW9uVmFsdWVEb21EYXRhS2V5KTtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGtvLnV0aWxzLmllVmVyc2lvbiA8PSA3XG4gICAgICAgICAgICAgICAgICAgICAgICA/IChlbGVtZW50LmdldEF0dHJpYnV0ZU5vZGUoJ3ZhbHVlJykgJiYgZWxlbWVudC5nZXRBdHRyaWJ1dGVOb2RlKCd2YWx1ZScpLnNwZWNpZmllZCA/IGVsZW1lbnQudmFsdWUgOiBlbGVtZW50LnRleHQpXG4gICAgICAgICAgICAgICAgICAgICAgICA6IGVsZW1lbnQudmFsdWU7XG4gICAgICAgICAgICAgICAgY2FzZSAnc2VsZWN0JzpcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGVsZW1lbnQuc2VsZWN0ZWRJbmRleCA+PSAwID8ga28uc2VsZWN0RXh0ZW5zaW9ucy5yZWFkVmFsdWUoZWxlbWVudC5vcHRpb25zW2VsZW1lbnQuc2VsZWN0ZWRJbmRleF0pIDogdW5kZWZpbmVkO1xuICAgICAgICAgICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBlbGVtZW50LnZhbHVlO1xuICAgICAgICAgICAgfVxuICAgICAgICB9LFxuXG4gICAgICAgIHdyaXRlVmFsdWU6IGZ1bmN0aW9uKGVsZW1lbnQsIHZhbHVlLCBhbGxvd1Vuc2V0KSB7XG4gICAgICAgICAgICBzd2l0Y2ggKGtvLnV0aWxzLnRhZ05hbWVMb3dlcihlbGVtZW50KSkge1xuICAgICAgICAgICAgICAgIGNhc2UgJ29wdGlvbic6XG4gICAgICAgICAgICAgICAgICAgIHN3aXRjaCh0eXBlb2YgdmFsdWUpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgXCJzdHJpbmdcIjpcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBrby51dGlscy5kb21EYXRhLnNldChlbGVtZW50LCBrby5iaW5kaW5nSGFuZGxlcnMub3B0aW9ucy5vcHRpb25WYWx1ZURvbURhdGFLZXksIHVuZGVmaW5lZCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGhhc0RvbURhdGFFeHBhbmRvUHJvcGVydHkgaW4gZWxlbWVudCkgeyAvLyBJRSA8PSA4IHRocm93cyBlcnJvcnMgaWYgeW91IGRlbGV0ZSBub24tZXhpc3RlbnQgcHJvcGVydGllcyBmcm9tIGEgRE9NIG5vZGVcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZGVsZXRlIGVsZW1lbnRbaGFzRG9tRGF0YUV4cGFuZG9Qcm9wZXJ0eV07XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVsZW1lbnQudmFsdWUgPSB2YWx1ZTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICAgICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gU3RvcmUgYXJiaXRyYXJ5IG9iamVjdCB1c2luZyBEb21EYXRhXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAga28udXRpbHMuZG9tRGF0YS5zZXQoZWxlbWVudCwga28uYmluZGluZ0hhbmRsZXJzLm9wdGlvbnMub3B0aW9uVmFsdWVEb21EYXRhS2V5LCB2YWx1ZSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZWxlbWVudFtoYXNEb21EYXRhRXhwYW5kb1Byb3BlcnR5XSA9IHRydWU7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBTcGVjaWFsIHRyZWF0bWVudCBvZiBudW1iZXJzIGlzIGp1c3QgZm9yIGJhY2t3YXJkIGNvbXBhdGliaWxpdHkuIEtPIDEuMi4xIHdyb3RlIG51bWVyaWNhbCB2YWx1ZXMgdG8gZWxlbWVudC52YWx1ZS5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBlbGVtZW50LnZhbHVlID0gdHlwZW9mIHZhbHVlID09PSBcIm51bWJlclwiID8gdmFsdWUgOiBcIlwiO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIGNhc2UgJ3NlbGVjdCc6XG4gICAgICAgICAgICAgICAgICAgIGlmICh2YWx1ZSA9PT0gXCJcIiB8fCB2YWx1ZSA9PT0gbnVsbCkgICAgICAgLy8gQSBibGFuayBzdHJpbmcgb3IgbnVsbCB2YWx1ZSB3aWxsIHNlbGVjdCB0aGUgY2FwdGlvblxuICAgICAgICAgICAgICAgICAgICAgICAgdmFsdWUgPSB1bmRlZmluZWQ7XG4gICAgICAgICAgICAgICAgICAgIHZhciBzZWxlY3Rpb24gPSAtMTtcbiAgICAgICAgICAgICAgICAgICAgZm9yICh2YXIgaSA9IDAsIG4gPSBlbGVtZW50Lm9wdGlvbnMubGVuZ3RoLCBvcHRpb25WYWx1ZTsgaSA8IG47ICsraSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgb3B0aW9uVmFsdWUgPSBrby5zZWxlY3RFeHRlbnNpb25zLnJlYWRWYWx1ZShlbGVtZW50Lm9wdGlvbnNbaV0pO1xuICAgICAgICAgICAgICAgICAgICAgICAgLy8gSW5jbHVkZSBzcGVjaWFsIGNoZWNrIHRvIGhhbmRsZSBzZWxlY3RpbmcgYSBjYXB0aW9uIHdpdGggYSBibGFuayBzdHJpbmcgdmFsdWVcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChvcHRpb25WYWx1ZSA9PSB2YWx1ZSB8fCAob3B0aW9uVmFsdWUgPT0gXCJcIiAmJiB2YWx1ZSA9PT0gdW5kZWZpbmVkKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNlbGVjdGlvbiA9IGk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgaWYgKGFsbG93VW5zZXQgfHwgc2VsZWN0aW9uID49IDAgfHwgKHZhbHVlID09PSB1bmRlZmluZWQgJiYgZWxlbWVudC5zaXplID4gMSkpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGVsZW1lbnQuc2VsZWN0ZWRJbmRleCA9IHNlbGVjdGlvbjtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgICAgICAgICBpZiAoKHZhbHVlID09PSBudWxsKSB8fCAodmFsdWUgPT09IHVuZGVmaW5lZCkpXG4gICAgICAgICAgICAgICAgICAgICAgICB2YWx1ZSA9IFwiXCI7XG4gICAgICAgICAgICAgICAgICAgIGVsZW1lbnQudmFsdWUgPSB2YWx1ZTtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9O1xufSkoKTtcblxua28uZXhwb3J0U3ltYm9sKCdzZWxlY3RFeHRlbnNpb25zJywga28uc2VsZWN0RXh0ZW5zaW9ucyk7XG5rby5leHBvcnRTeW1ib2woJ3NlbGVjdEV4dGVuc2lvbnMucmVhZFZhbHVlJywga28uc2VsZWN0RXh0ZW5zaW9ucy5yZWFkVmFsdWUpO1xua28uZXhwb3J0U3ltYm9sKCdzZWxlY3RFeHRlbnNpb25zLndyaXRlVmFsdWUnLCBrby5zZWxlY3RFeHRlbnNpb25zLndyaXRlVmFsdWUpO1xua28uZXhwcmVzc2lvblJld3JpdGluZyA9IChmdW5jdGlvbiAoKSB7XG4gICAgdmFyIGphdmFTY3JpcHRSZXNlcnZlZFdvcmRzID0gW1widHJ1ZVwiLCBcImZhbHNlXCIsIFwibnVsbFwiLCBcInVuZGVmaW5lZFwiXTtcblxuICAgIC8vIE1hdGNoZXMgc29tZXRoaW5nIHRoYXQgY2FuIGJlIGFzc2lnbmVkIHRvLS1laXRoZXIgYW4gaXNvbGF0ZWQgaWRlbnRpZmllciBvciBzb21ldGhpbmcgZW5kaW5nIHdpdGggYSBwcm9wZXJ0eSBhY2Nlc3NvclxuICAgIC8vIFRoaXMgaXMgZGVzaWduZWQgdG8gYmUgc2ltcGxlIGFuZCBhdm9pZCBmYWxzZSBuZWdhdGl2ZXMsIGJ1dCBjb3VsZCBwcm9kdWNlIGZhbHNlIHBvc2l0aXZlcyAoZS5nLiwgYStiLmMpLlxuICAgIC8vIFRoaXMgYWxzbyB3aWxsIG5vdCBwcm9wZXJseSBoYW5kbGUgbmVzdGVkIGJyYWNrZXRzIChlLmcuLCBvYmoxW29iajJbJ3Byb3AnXV07IHNlZSAjOTExKS5cbiAgICB2YXIgamF2YVNjcmlwdEFzc2lnbm1lbnRUYXJnZXQgPSAvXig/OlskX2Etel1bJFxcd10qfCguKykoXFwuXFxzKlskX2Etel1bJFxcd10qfFxcWy4rXFxdKSkkL2k7XG5cbiAgICBmdW5jdGlvbiBnZXRXcml0ZWFibGVWYWx1ZShleHByZXNzaW9uKSB7XG4gICAgICAgIGlmIChrby51dGlscy5hcnJheUluZGV4T2YoamF2YVNjcmlwdFJlc2VydmVkV29yZHMsIGV4cHJlc3Npb24pID49IDApXG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgIHZhciBtYXRjaCA9IGV4cHJlc3Npb24ubWF0Y2goamF2YVNjcmlwdEFzc2lnbm1lbnRUYXJnZXQpO1xuICAgICAgICByZXR1cm4gbWF0Y2ggPT09IG51bGwgPyBmYWxzZSA6IG1hdGNoWzFdID8gKCdPYmplY3QoJyArIG1hdGNoWzFdICsgJyknICsgbWF0Y2hbMl0pIDogZXhwcmVzc2lvbjtcbiAgICB9XG5cbiAgICAvLyBUaGUgZm9sbG93aW5nIHJlZ3VsYXIgZXhwcmVzc2lvbnMgd2lsbCBiZSB1c2VkIHRvIHNwbGl0IGFuIG9iamVjdC1saXRlcmFsIHN0cmluZyBpbnRvIHRva2Vuc1xuXG4gICAgICAgIC8vIFRoZXNlIHR3byBtYXRjaCBzdHJpbmdzLCBlaXRoZXIgd2l0aCBkb3VibGUgcXVvdGVzIG9yIHNpbmdsZSBxdW90ZXNcbiAgICB2YXIgc3RyaW5nRG91YmxlID0gJ1wiKD86W15cIlxcXFxcXFxcXXxcXFxcXFxcXC4pKlwiJyxcbiAgICAgICAgc3RyaW5nU2luZ2xlID0gXCInKD86W14nXFxcXFxcXFxdfFxcXFxcXFxcLikqJ1wiLFxuICAgICAgICAvLyBNYXRjaGVzIGEgcmVndWxhciBleHByZXNzaW9uICh0ZXh0IGVuY2xvc2VkIGJ5IHNsYXNoZXMpLCBidXQgd2lsbCBhbHNvIG1hdGNoIHNldHMgb2YgZGl2aXNpb25zXG4gICAgICAgIC8vIGFzIGEgcmVndWxhciBleHByZXNzaW9uICh0aGlzIGlzIGhhbmRsZWQgYnkgdGhlIHBhcnNpbmcgbG9vcCBiZWxvdykuXG4gICAgICAgIHN0cmluZ1JlZ2V4cCA9ICcvKD86W14vXFxcXFxcXFxdfFxcXFxcXFxcLikqL1xcdyonLFxuICAgICAgICAvLyBUaGVzZSBjaGFyYWN0ZXJzIGhhdmUgc3BlY2lhbCBtZWFuaW5nIHRvIHRoZSBwYXJzZXIgYW5kIG11c3Qgbm90IGFwcGVhciBpbiB0aGUgbWlkZGxlIG9mIGFcbiAgICAgICAgLy8gdG9rZW4sIGV4Y2VwdCBhcyBwYXJ0IG9mIGEgc3RyaW5nLlxuICAgICAgICBzcGVjaWFscyA9ICcsXCJcXCd7fSgpLzpbXFxcXF0nLFxuICAgICAgICAvLyBNYXRjaCB0ZXh0IChhdCBsZWFzdCB0d28gY2hhcmFjdGVycykgdGhhdCBkb2VzIG5vdCBjb250YWluIGFueSBvZiB0aGUgYWJvdmUgc3BlY2lhbCBjaGFyYWN0ZXJzLFxuICAgICAgICAvLyBhbHRob3VnaCBzb21lIG9mIHRoZSBzcGVjaWFsIGNoYXJhY3RlcnMgYXJlIGFsbG93ZWQgdG8gc3RhcnQgaXQgKGFsbCBidXQgdGhlIGNvbG9uIGFuZCBjb21tYSkuXG4gICAgICAgIC8vIFRoZSB0ZXh0IGNhbiBjb250YWluIHNwYWNlcywgYnV0IGxlYWRpbmcgb3IgdHJhaWxpbmcgc3BhY2VzIGFyZSBza2lwcGVkLlxuICAgICAgICBldmVyeVRoaW5nRWxzZSA9ICdbXlxcXFxzOiwvXVteJyArIHNwZWNpYWxzICsgJ10qW15cXFxccycgKyBzcGVjaWFscyArICddJyxcbiAgICAgICAgLy8gTWF0Y2ggYW55IG5vbi1zcGFjZSBjaGFyYWN0ZXIgbm90IG1hdGNoZWQgYWxyZWFkeS4gVGhpcyB3aWxsIG1hdGNoIGNvbG9ucyBhbmQgY29tbWFzLCBzaW5jZSB0aGV5J3JlXG4gICAgICAgIC8vIG5vdCBtYXRjaGVkIGJ5IFwiZXZlcnlUaGluZ0Vsc2VcIiwgYnV0IHdpbGwgYWxzbyBtYXRjaCBhbnkgb3RoZXIgc2luZ2xlIGNoYXJhY3RlciB0aGF0IHdhc24ndCBhbHJlYWR5XG4gICAgICAgIC8vIG1hdGNoZWQgKGZvciBleGFtcGxlOiBpbiBcImE6IDEsIGI6IDJcIiwgZWFjaCBvZiB0aGUgbm9uLXNwYWNlIGNoYXJhY3RlcnMgd2lsbCBiZSBtYXRjaGVkIGJ5IG9uZU5vdFNwYWNlKS5cbiAgICAgICAgb25lTm90U3BhY2UgPSAnW15cXFxcc10nLFxuXG4gICAgICAgIC8vIENyZWF0ZSB0aGUgYWN0dWFsIHJlZ3VsYXIgZXhwcmVzc2lvbiBieSBvci1pbmcgdGhlIGFib3ZlIHN0cmluZ3MuIFRoZSBvcmRlciBpcyBpbXBvcnRhbnQuXG4gICAgICAgIGJpbmRpbmdUb2tlbiA9IFJlZ0V4cChzdHJpbmdEb3VibGUgKyAnfCcgKyBzdHJpbmdTaW5nbGUgKyAnfCcgKyBzdHJpbmdSZWdleHAgKyAnfCcgKyBldmVyeVRoaW5nRWxzZSArICd8JyArIG9uZU5vdFNwYWNlLCAnZycpLFxuXG4gICAgICAgIC8vIE1hdGNoIGVuZCBvZiBwcmV2aW91cyB0b2tlbiB0byBkZXRlcm1pbmUgd2hldGhlciBhIHNsYXNoIGlzIGEgZGl2aXNpb24gb3IgcmVnZXguXG4gICAgICAgIGRpdmlzaW9uTG9va0JlaGluZCA9IC9bXFxdKVwiJ0EtWmEtejAtOV8kXSskLyxcbiAgICAgICAga2V5d29yZFJlZ2V4TG9va0JlaGluZCA9IHsnaW4nOjEsJ3JldHVybic6MSwndHlwZW9mJzoxfTtcblxuICAgIGZ1bmN0aW9uIHBhcnNlT2JqZWN0TGl0ZXJhbChvYmplY3RMaXRlcmFsU3RyaW5nKSB7XG4gICAgICAgIC8vIFRyaW0gbGVhZGluZyBhbmQgdHJhaWxpbmcgc3BhY2VzIGZyb20gdGhlIHN0cmluZ1xuICAgICAgICB2YXIgc3RyID0ga28udXRpbHMuc3RyaW5nVHJpbShvYmplY3RMaXRlcmFsU3RyaW5nKTtcblxuICAgICAgICAvLyBUcmltIGJyYWNlcyAneycgc3Vycm91bmRpbmcgdGhlIHdob2xlIG9iamVjdCBsaXRlcmFsXG4gICAgICAgIGlmIChzdHIuY2hhckNvZGVBdCgwKSA9PT0gMTIzKSBzdHIgPSBzdHIuc2xpY2UoMSwgLTEpO1xuXG4gICAgICAgIC8vIFNwbGl0IGludG8gdG9rZW5zXG4gICAgICAgIHZhciByZXN1bHQgPSBbXSwgdG9rcyA9IHN0ci5tYXRjaChiaW5kaW5nVG9rZW4pLCBrZXksIHZhbHVlcyA9IFtdLCBkZXB0aCA9IDA7XG5cbiAgICAgICAgaWYgKHRva3MpIHtcbiAgICAgICAgICAgIC8vIEFwcGVuZCBhIGNvbW1hIHNvIHRoYXQgd2UgZG9uJ3QgbmVlZCBhIHNlcGFyYXRlIGNvZGUgYmxvY2sgdG8gZGVhbCB3aXRoIHRoZSBsYXN0IGl0ZW1cbiAgICAgICAgICAgIHRva3MucHVzaCgnLCcpO1xuXG4gICAgICAgICAgICBmb3IgKHZhciBpID0gMCwgdG9rOyB0b2sgPSB0b2tzW2ldOyArK2kpIHtcbiAgICAgICAgICAgICAgICB2YXIgYyA9IHRvay5jaGFyQ29kZUF0KDApO1xuICAgICAgICAgICAgICAgIC8vIEEgY29tbWEgc2lnbmFscyB0aGUgZW5kIG9mIGEga2V5L3ZhbHVlIHBhaXIgaWYgZGVwdGggaXMgemVyb1xuICAgICAgICAgICAgICAgIGlmIChjID09PSA0NCkgeyAvLyBcIixcIlxuICAgICAgICAgICAgICAgICAgICBpZiAoZGVwdGggPD0gMCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgcmVzdWx0LnB1c2goKGtleSAmJiB2YWx1ZXMubGVuZ3RoKSA/IHtrZXk6IGtleSwgdmFsdWU6IHZhbHVlcy5qb2luKCcnKX0gOiB7J3Vua25vd24nOiBrZXkgfHwgdmFsdWVzLmpvaW4oJycpfSk7XG4gICAgICAgICAgICAgICAgICAgICAgICBrZXkgPSBkZXB0aCA9IDA7XG4gICAgICAgICAgICAgICAgICAgICAgICB2YWx1ZXMgPSBbXTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgLy8gU2ltcGx5IHNraXAgdGhlIGNvbG9uIHRoYXQgc2VwYXJhdGVzIHRoZSBuYW1lIGFuZCB2YWx1ZVxuICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAoYyA9PT0gNTgpIHsgLy8gXCI6XCJcbiAgICAgICAgICAgICAgICAgICAgaWYgKCFkZXB0aCAmJiAha2V5ICYmIHZhbHVlcy5sZW5ndGggPT09IDEpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGtleSA9IHZhbHVlcy5wb3AoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgLy8gQSBzZXQgb2Ygc2xhc2hlcyBpcyBpbml0aWFsbHkgbWF0Y2hlZCBhcyBhIHJlZ3VsYXIgZXhwcmVzc2lvbiwgYnV0IGNvdWxkIGJlIGRpdmlzaW9uXG4gICAgICAgICAgICAgICAgfSBlbHNlIGlmIChjID09PSA0NyAmJiBpICYmIHRvay5sZW5ndGggPiAxKSB7ICAvLyBcIi9cIlxuICAgICAgICAgICAgICAgICAgICAvLyBMb29rIGF0IHRoZSBlbmQgb2YgdGhlIHByZXZpb3VzIHRva2VuIHRvIGRldGVybWluZSBpZiB0aGUgc2xhc2ggaXMgYWN0dWFsbHkgZGl2aXNpb25cbiAgICAgICAgICAgICAgICAgICAgdmFyIG1hdGNoID0gdG9rc1tpLTFdLm1hdGNoKGRpdmlzaW9uTG9va0JlaGluZCk7XG4gICAgICAgICAgICAgICAgICAgIGlmIChtYXRjaCAmJiAha2V5d29yZFJlZ2V4TG9va0JlaGluZFttYXRjaFswXV0pIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIFRoZSBzbGFzaCBpcyBhY3R1YWxseSBhIGRpdmlzaW9uIHB1bmN0dWF0b3I7IHJlLXBhcnNlIHRoZSByZW1haW5kZXIgb2YgdGhlIHN0cmluZyAobm90IGluY2x1ZGluZyB0aGUgc2xhc2gpXG4gICAgICAgICAgICAgICAgICAgICAgICBzdHIgPSBzdHIuc3Vic3RyKHN0ci5pbmRleE9mKHRvaykgKyAxKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRva3MgPSBzdHIubWF0Y2goYmluZGluZ1Rva2VuKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRva3MucHVzaCgnLCcpO1xuICAgICAgICAgICAgICAgICAgICAgICAgaSA9IC0xO1xuICAgICAgICAgICAgICAgICAgICAgICAgLy8gQ29udGludWUgd2l0aCBqdXN0IHRoZSBzbGFzaFxuICAgICAgICAgICAgICAgICAgICAgICAgdG9rID0gJy8nO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgLy8gSW5jcmVtZW50IGRlcHRoIGZvciBwYXJlbnRoZXNlcywgYnJhY2VzLCBhbmQgYnJhY2tldHMgc28gdGhhdCBpbnRlcmlvciBjb21tYXMgYXJlIGlnbm9yZWRcbiAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKGMgPT09IDQwIHx8IGMgPT09IDEyMyB8fCBjID09PSA5MSkgeyAvLyAnKCcsICd7JywgJ1snXG4gICAgICAgICAgICAgICAgICAgICsrZGVwdGg7XG4gICAgICAgICAgICAgICAgfSBlbHNlIGlmIChjID09PSA0MSB8fCBjID09PSAxMjUgfHwgYyA9PT0gOTMpIHsgLy8gJyknLCAnfScsICddJ1xuICAgICAgICAgICAgICAgICAgICAtLWRlcHRoO1xuICAgICAgICAgICAgICAgIC8vIFRoZSBrZXkgd2lsbCBiZSB0aGUgZmlyc3QgdG9rZW47IGlmIGl0J3MgYSBzdHJpbmcsIHRyaW0gdGhlIHF1b3Rlc1xuICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAoIWtleSAmJiAhdmFsdWVzLmxlbmd0aCAmJiAoYyA9PT0gMzQgfHwgYyA9PT0gMzkpKSB7IC8vICdcIicsIFwiJ1wiXG4gICAgICAgICAgICAgICAgICAgIHRvayA9IHRvay5zbGljZSgxLCAtMSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHZhbHVlcy5wdXNoKHRvayk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9XG5cbiAgICAvLyBUd28td2F5IGJpbmRpbmdzIGluY2x1ZGUgYSB3cml0ZSBmdW5jdGlvbiB0aGF0IGFsbG93IHRoZSBoYW5kbGVyIHRvIHVwZGF0ZSB0aGUgdmFsdWUgZXZlbiBpZiBpdCdzIG5vdCBhbiBvYnNlcnZhYmxlLlxuICAgIHZhciB0d29XYXlCaW5kaW5ncyA9IHt9O1xuXG4gICAgZnVuY3Rpb24gcHJlUHJvY2Vzc0JpbmRpbmdzKGJpbmRpbmdzU3RyaW5nT3JLZXlWYWx1ZUFycmF5LCBiaW5kaW5nT3B0aW9ucykge1xuICAgICAgICBiaW5kaW5nT3B0aW9ucyA9IGJpbmRpbmdPcHRpb25zIHx8IHt9O1xuXG4gICAgICAgIGZ1bmN0aW9uIHByb2Nlc3NLZXlWYWx1ZShrZXksIHZhbCkge1xuICAgICAgICAgICAgdmFyIHdyaXRhYmxlVmFsO1xuICAgICAgICAgICAgZnVuY3Rpb24gY2FsbFByZXByb2Nlc3NIb29rKG9iaikge1xuICAgICAgICAgICAgICAgIHJldHVybiAob2JqICYmIG9ialsncHJlcHJvY2VzcyddKSA/ICh2YWwgPSBvYmpbJ3ByZXByb2Nlc3MnXSh2YWwsIGtleSwgcHJvY2Vzc0tleVZhbHVlKSkgOiB0cnVlO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKCFiaW5kaW5nUGFyYW1zKSB7XG4gICAgICAgICAgICAgICAgaWYgKCFjYWxsUHJlcHJvY2Vzc0hvb2soa29bJ2dldEJpbmRpbmdIYW5kbGVyJ10oa2V5KSkpXG4gICAgICAgICAgICAgICAgICAgIHJldHVybjtcblxuICAgICAgICAgICAgICAgIGlmICh0d29XYXlCaW5kaW5nc1trZXldICYmICh3cml0YWJsZVZhbCA9IGdldFdyaXRlYWJsZVZhbHVlKHZhbCkpKSB7XG4gICAgICAgICAgICAgICAgICAgIC8vIEZvciB0d28td2F5IGJpbmRpbmdzLCBwcm92aWRlIGEgd3JpdGUgbWV0aG9kIGluIGNhc2UgdGhlIHZhbHVlXG4gICAgICAgICAgICAgICAgICAgIC8vIGlzbid0IGEgd3JpdGFibGUgb2JzZXJ2YWJsZS5cbiAgICAgICAgICAgICAgICAgICAgcHJvcGVydHlBY2Nlc3NvclJlc3VsdFN0cmluZ3MucHVzaChcIidcIiArIGtleSArIFwiJzpmdW5jdGlvbihfeil7XCIgKyB3cml0YWJsZVZhbCArIFwiPV96fVwiKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICAvLyBWYWx1ZXMgYXJlIHdyYXBwZWQgaW4gYSBmdW5jdGlvbiBzbyB0aGF0IGVhY2ggdmFsdWUgY2FuIGJlIGFjY2Vzc2VkIGluZGVwZW5kZW50bHlcbiAgICAgICAgICAgIGlmIChtYWtlVmFsdWVBY2Nlc3NvcnMpIHtcbiAgICAgICAgICAgICAgICB2YWwgPSAnZnVuY3Rpb24oKXtyZXR1cm4gJyArIHZhbCArICcgfSc7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXN1bHRTdHJpbmdzLnB1c2goXCInXCIgKyBrZXkgKyBcIic6XCIgKyB2YWwpO1xuICAgICAgICB9XG5cbiAgICAgICAgdmFyIHJlc3VsdFN0cmluZ3MgPSBbXSxcbiAgICAgICAgICAgIHByb3BlcnR5QWNjZXNzb3JSZXN1bHRTdHJpbmdzID0gW10sXG4gICAgICAgICAgICBtYWtlVmFsdWVBY2Nlc3NvcnMgPSBiaW5kaW5nT3B0aW9uc1sndmFsdWVBY2Nlc3NvcnMnXSxcbiAgICAgICAgICAgIGJpbmRpbmdQYXJhbXMgPSBiaW5kaW5nT3B0aW9uc1snYmluZGluZ1BhcmFtcyddLFxuICAgICAgICAgICAga2V5VmFsdWVBcnJheSA9IHR5cGVvZiBiaW5kaW5nc1N0cmluZ09yS2V5VmFsdWVBcnJheSA9PT0gXCJzdHJpbmdcIiA/XG4gICAgICAgICAgICAgICAgcGFyc2VPYmplY3RMaXRlcmFsKGJpbmRpbmdzU3RyaW5nT3JLZXlWYWx1ZUFycmF5KSA6IGJpbmRpbmdzU3RyaW5nT3JLZXlWYWx1ZUFycmF5O1xuXG4gICAgICAgIGtvLnV0aWxzLmFycmF5Rm9yRWFjaChrZXlWYWx1ZUFycmF5LCBmdW5jdGlvbihrZXlWYWx1ZSkge1xuICAgICAgICAgICAgcHJvY2Vzc0tleVZhbHVlKGtleVZhbHVlLmtleSB8fCBrZXlWYWx1ZVsndW5rbm93biddLCBrZXlWYWx1ZS52YWx1ZSk7XG4gICAgICAgIH0pO1xuXG4gICAgICAgIGlmIChwcm9wZXJ0eUFjY2Vzc29yUmVzdWx0U3RyaW5ncy5sZW5ndGgpXG4gICAgICAgICAgICBwcm9jZXNzS2V5VmFsdWUoJ19rb19wcm9wZXJ0eV93cml0ZXJzJywgXCJ7XCIgKyBwcm9wZXJ0eUFjY2Vzc29yUmVzdWx0U3RyaW5ncy5qb2luKFwiLFwiKSArIFwiIH1cIik7XG5cbiAgICAgICAgcmV0dXJuIHJlc3VsdFN0cmluZ3Muam9pbihcIixcIik7XG4gICAgfVxuXG4gICAgcmV0dXJuIHtcbiAgICAgICAgYmluZGluZ1Jld3JpdGVWYWxpZGF0b3JzOiBbXSxcblxuICAgICAgICB0d29XYXlCaW5kaW5nczogdHdvV2F5QmluZGluZ3MsXG5cbiAgICAgICAgcGFyc2VPYmplY3RMaXRlcmFsOiBwYXJzZU9iamVjdExpdGVyYWwsXG5cbiAgICAgICAgcHJlUHJvY2Vzc0JpbmRpbmdzOiBwcmVQcm9jZXNzQmluZGluZ3MsXG5cbiAgICAgICAga2V5VmFsdWVBcnJheUNvbnRhaW5zS2V5OiBmdW5jdGlvbihrZXlWYWx1ZUFycmF5LCBrZXkpIHtcbiAgICAgICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwga2V5VmFsdWVBcnJheS5sZW5ndGg7IGkrKylcbiAgICAgICAgICAgICAgICBpZiAoa2V5VmFsdWVBcnJheVtpXVsna2V5J10gPT0ga2V5KVxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgfSxcblxuICAgICAgICAvLyBJbnRlcm5hbCwgcHJpdmF0ZSBLTyB1dGlsaXR5IGZvciB1cGRhdGluZyBtb2RlbCBwcm9wZXJ0aWVzIGZyb20gd2l0aGluIGJpbmRpbmdzXG4gICAgICAgIC8vIHByb3BlcnR5OiAgICAgICAgICAgIElmIHRoZSBwcm9wZXJ0eSBiZWluZyB1cGRhdGVkIGlzIChvciBtaWdodCBiZSkgYW4gb2JzZXJ2YWJsZSwgcGFzcyBpdCBoZXJlXG4gICAgICAgIC8vICAgICAgICAgICAgICAgICAgICAgIElmIGl0IHR1cm5zIG91dCB0byBiZSBhIHdyaXRhYmxlIG9ic2VydmFibGUsIGl0IHdpbGwgYmUgd3JpdHRlbiB0byBkaXJlY3RseVxuICAgICAgICAvLyBhbGxCaW5kaW5nczogICAgICAgICBBbiBvYmplY3Qgd2l0aCBhIGdldCBtZXRob2QgdG8gcmV0cmlldmUgYmluZGluZ3MgaW4gdGhlIGN1cnJlbnQgZXhlY3V0aW9uIGNvbnRleHQuXG4gICAgICAgIC8vICAgICAgICAgICAgICAgICAgICAgIFRoaXMgd2lsbCBiZSBzZWFyY2hlZCBmb3IgYSAnX2tvX3Byb3BlcnR5X3dyaXRlcnMnIHByb3BlcnR5IGluIGNhc2UgeW91J3JlIHdyaXRpbmcgdG8gYSBub24tb2JzZXJ2YWJsZVxuICAgICAgICAvLyBrZXk6ICAgICAgICAgICAgICAgICBUaGUga2V5IGlkZW50aWZ5aW5nIHRoZSBwcm9wZXJ0eSB0byBiZSB3cml0dGVuLiBFeGFtcGxlOiBmb3IgeyBoYXNGb2N1czogbXlWYWx1ZSB9LCB3cml0ZSB0byAnbXlWYWx1ZScgYnkgc3BlY2lmeWluZyB0aGUga2V5ICdoYXNGb2N1cydcbiAgICAgICAgLy8gdmFsdWU6ICAgICAgICAgICAgICAgVGhlIHZhbHVlIHRvIGJlIHdyaXR0ZW5cbiAgICAgICAgLy8gY2hlY2tJZkRpZmZlcmVudDogICAgSWYgdHJ1ZSwgYW5kIGlmIHRoZSBwcm9wZXJ0eSBiZWluZyB3cml0dGVuIGlzIGEgd3JpdGFibGUgb2JzZXJ2YWJsZSwgdGhlIHZhbHVlIHdpbGwgb25seSBiZSB3cml0dGVuIGlmXG4gICAgICAgIC8vICAgICAgICAgICAgICAgICAgICAgIGl0IGlzICE9PSBleGlzdGluZyB2YWx1ZSBvbiB0aGF0IHdyaXRhYmxlIG9ic2VydmFibGVcbiAgICAgICAgd3JpdGVWYWx1ZVRvUHJvcGVydHk6IGZ1bmN0aW9uKHByb3BlcnR5LCBhbGxCaW5kaW5ncywga2V5LCB2YWx1ZSwgY2hlY2tJZkRpZmZlcmVudCkge1xuICAgICAgICAgICAgaWYgKCFwcm9wZXJ0eSB8fCAha28uaXNPYnNlcnZhYmxlKHByb3BlcnR5KSkge1xuICAgICAgICAgICAgICAgIHZhciBwcm9wV3JpdGVycyA9IGFsbEJpbmRpbmdzLmdldCgnX2tvX3Byb3BlcnR5X3dyaXRlcnMnKTtcbiAgICAgICAgICAgICAgICBpZiAocHJvcFdyaXRlcnMgJiYgcHJvcFdyaXRlcnNba2V5XSlcbiAgICAgICAgICAgICAgICAgICAgcHJvcFdyaXRlcnNba2V5XSh2YWx1ZSk7XG4gICAgICAgICAgICB9IGVsc2UgaWYgKGtvLmlzV3JpdGVhYmxlT2JzZXJ2YWJsZShwcm9wZXJ0eSkgJiYgKCFjaGVja0lmRGlmZmVyZW50IHx8IHByb3BlcnR5LnBlZWsoKSAhPT0gdmFsdWUpKSB7XG4gICAgICAgICAgICAgICAgcHJvcGVydHkodmFsdWUpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfTtcbn0pKCk7XG5cbmtvLmV4cG9ydFN5bWJvbCgnZXhwcmVzc2lvblJld3JpdGluZycsIGtvLmV4cHJlc3Npb25SZXdyaXRpbmcpO1xua28uZXhwb3J0U3ltYm9sKCdleHByZXNzaW9uUmV3cml0aW5nLmJpbmRpbmdSZXdyaXRlVmFsaWRhdG9ycycsIGtvLmV4cHJlc3Npb25SZXdyaXRpbmcuYmluZGluZ1Jld3JpdGVWYWxpZGF0b3JzKTtcbmtvLmV4cG9ydFN5bWJvbCgnZXhwcmVzc2lvblJld3JpdGluZy5wYXJzZU9iamVjdExpdGVyYWwnLCBrby5leHByZXNzaW9uUmV3cml0aW5nLnBhcnNlT2JqZWN0TGl0ZXJhbCk7XG5rby5leHBvcnRTeW1ib2woJ2V4cHJlc3Npb25SZXdyaXRpbmcucHJlUHJvY2Vzc0JpbmRpbmdzJywga28uZXhwcmVzc2lvblJld3JpdGluZy5wcmVQcm9jZXNzQmluZGluZ3MpO1xuXG4vLyBNYWtpbmcgYmluZGluZ3MgZXhwbGljaXRseSBkZWNsYXJlIHRoZW1zZWx2ZXMgYXMgXCJ0d28gd2F5XCIgaXNuJ3QgaWRlYWwgaW4gdGhlIGxvbmcgdGVybSAoaXQgd291bGQgYmUgYmV0dGVyIGlmXG4vLyBhbGwgYmluZGluZ3MgY291bGQgdXNlIGFuIG9mZmljaWFsICdwcm9wZXJ0eSB3cml0ZXInIEFQSSB3aXRob3V0IG5lZWRpbmcgdG8gZGVjbGFyZSB0aGF0IHRoZXkgbWlnaHQpLiBIb3dldmVyLFxuLy8gc2luY2UgdGhpcyBpcyBub3QsIGFuZCBoYXMgbmV2ZXIgYmVlbiwgYSBwdWJsaWMgQVBJIChfa29fcHJvcGVydHlfd3JpdGVycyB3YXMgbmV2ZXIgZG9jdW1lbnRlZCksIGl0J3MgYWNjZXB0YWJsZVxuLy8gYXMgYW4gaW50ZXJuYWwgaW1wbGVtZW50YXRpb24gZGV0YWlsIGluIHRoZSBzaG9ydCB0ZXJtLlxuLy8gRm9yIHRob3NlIGRldmVsb3BlcnMgd2hvIHJlbHkgb24gX2tvX3Byb3BlcnR5X3dyaXRlcnMgaW4gdGhlaXIgY3VzdG9tIGJpbmRpbmdzLCB3ZSBleHBvc2UgX3R3b1dheUJpbmRpbmdzIGFzIGFuXG4vLyB1bmRvY3VtZW50ZWQgZmVhdHVyZSB0aGF0IG1ha2VzIGl0IHJlbGF0aXZlbHkgZWFzeSB0byB1cGdyYWRlIHRvIEtPIDMuMC4gSG93ZXZlciwgdGhpcyBpcyBzdGlsbCBub3QgYW4gb2ZmaWNpYWxcbi8vIHB1YmxpYyBBUEksIGFuZCB3ZSByZXNlcnZlIHRoZSByaWdodCB0byByZW1vdmUgaXQgYXQgYW55IHRpbWUgaWYgd2UgY3JlYXRlIGEgcmVhbCBwdWJsaWMgcHJvcGVydHkgd3JpdGVycyBBUEkuXG5rby5leHBvcnRTeW1ib2woJ2V4cHJlc3Npb25SZXdyaXRpbmcuX3R3b1dheUJpbmRpbmdzJywga28uZXhwcmVzc2lvblJld3JpdGluZy50d29XYXlCaW5kaW5ncyk7XG5cbi8vIEZvciBiYWNrd2FyZCBjb21wYXRpYmlsaXR5LCBkZWZpbmUgdGhlIGZvbGxvd2luZyBhbGlhc2VzLiAoUHJldmlvdXNseSwgdGhlc2UgZnVuY3Rpb24gbmFtZXMgd2VyZSBtaXNsZWFkaW5nIGJlY2F1c2Vcbi8vIHRoZXkgcmVmZXJyZWQgdG8gSlNPTiBzcGVjaWZpY2FsbHksIGV2ZW4gdGhvdWdoIHRoZXkgYWN0dWFsbHkgd29yayB3aXRoIGFyYml0cmFyeSBKYXZhU2NyaXB0IG9iamVjdCBsaXRlcmFsIGV4cHJlc3Npb25zLilcbmtvLmV4cG9ydFN5bWJvbCgnanNvbkV4cHJlc3Npb25SZXdyaXRpbmcnLCBrby5leHByZXNzaW9uUmV3cml0aW5nKTtcbmtvLmV4cG9ydFN5bWJvbCgnanNvbkV4cHJlc3Npb25SZXdyaXRpbmcuaW5zZXJ0UHJvcGVydHlBY2Nlc3NvcnNJbnRvSnNvbicsIGtvLmV4cHJlc3Npb25SZXdyaXRpbmcucHJlUHJvY2Vzc0JpbmRpbmdzKTtcbihmdW5jdGlvbigpIHtcbiAgICAvLyBcIlZpcnR1YWwgZWxlbWVudHNcIiBpcyBhbiBhYnN0cmFjdGlvbiBvbiB0b3Agb2YgdGhlIHVzdWFsIERPTSBBUEkgd2hpY2ggdW5kZXJzdGFuZHMgdGhlIG5vdGlvbiB0aGF0IGNvbW1lbnQgbm9kZXNcbiAgICAvLyBtYXkgYmUgdXNlZCB0byByZXByZXNlbnQgaGllcmFyY2h5IChpbiBhZGRpdGlvbiB0byB0aGUgRE9NJ3MgbmF0dXJhbCBoaWVyYXJjaHkpLlxuICAgIC8vIElmIHlvdSBjYWxsIHRoZSBET00tbWFuaXB1bGF0aW5nIGZ1bmN0aW9ucyBvbiBrby52aXJ0dWFsRWxlbWVudHMsIHlvdSB3aWxsIGJlIGFibGUgdG8gcmVhZCBhbmQgd3JpdGUgdGhlIHN0YXRlXG4gICAgLy8gb2YgdGhhdCB2aXJ0dWFsIGhpZXJhcmNoeVxuICAgIC8vXG4gICAgLy8gVGhlIHBvaW50IG9mIGFsbCB0aGlzIGlzIHRvIHN1cHBvcnQgY29udGFpbmVybGVzcyB0ZW1wbGF0ZXMgKGUuZy4sIDwhLS0ga28gZm9yZWFjaDpzb21lQ29sbGVjdGlvbiAtLT5ibGFoPCEtLSAva28gLS0+KVxuICAgIC8vIHdpdGhvdXQgaGF2aW5nIHRvIHNjYXR0ZXIgc3BlY2lhbCBjYXNlcyBhbGwgb3ZlciB0aGUgYmluZGluZyBhbmQgdGVtcGxhdGluZyBjb2RlLlxuXG4gICAgLy8gSUUgOSBjYW5ub3QgcmVsaWFibHkgcmVhZCB0aGUgXCJub2RlVmFsdWVcIiBwcm9wZXJ0eSBvZiBhIGNvbW1lbnQgbm9kZSAoc2VlIGh0dHBzOi8vZ2l0aHViLmNvbS9TdGV2ZVNhbmRlcnNvbi9rbm9ja291dC9pc3N1ZXMvMTg2KVxuICAgIC8vIGJ1dCBpdCBkb2VzIGdpdmUgdGhlbSBhIG5vbnN0YW5kYXJkIGFsdGVybmF0aXZlIHByb3BlcnR5IGNhbGxlZCBcInRleHRcIiB0aGF0IGl0IGNhbiByZWFkIHJlbGlhYmx5LiBPdGhlciBicm93c2VycyBkb24ndCBoYXZlIHRoYXQgcHJvcGVydHkuXG4gICAgLy8gU28sIHVzZSBub2RlLnRleHQgd2hlcmUgYXZhaWxhYmxlLCBhbmQgbm9kZS5ub2RlVmFsdWUgZWxzZXdoZXJlXG4gICAgdmFyIGNvbW1lbnROb2Rlc0hhdmVUZXh0UHJvcGVydHkgPSBkb2N1bWVudCAmJiBkb2N1bWVudC5jcmVhdGVDb21tZW50KFwidGVzdFwiKS50ZXh0ID09PSBcIjwhLS10ZXN0LS0+XCI7XG5cbiAgICB2YXIgc3RhcnRDb21tZW50UmVnZXggPSBjb21tZW50Tm9kZXNIYXZlVGV4dFByb3BlcnR5ID8gL148IS0tXFxzKmtvKD86XFxzKyhbXFxzXFxTXSspKT9cXHMqLS0+JC8gOiAvXlxccyprbyg/OlxccysoW1xcc1xcU10rKSk/XFxzKiQvO1xuICAgIHZhciBlbmRDb21tZW50UmVnZXggPSAgIGNvbW1lbnROb2Rlc0hhdmVUZXh0UHJvcGVydHkgPyAvXjwhLS1cXHMqXFwva29cXHMqLS0+JC8gOiAvXlxccypcXC9rb1xccyokLztcbiAgICB2YXIgaHRtbFRhZ3NXaXRoT3B0aW9uYWxseUNsb3NpbmdDaGlsZHJlbiA9IHsgJ3VsJzogdHJ1ZSwgJ29sJzogdHJ1ZSB9O1xuXG4gICAgZnVuY3Rpb24gaXNTdGFydENvbW1lbnQobm9kZSkge1xuICAgICAgICByZXR1cm4gKG5vZGUubm9kZVR5cGUgPT0gOCkgJiYgc3RhcnRDb21tZW50UmVnZXgudGVzdChjb21tZW50Tm9kZXNIYXZlVGV4dFByb3BlcnR5ID8gbm9kZS50ZXh0IDogbm9kZS5ub2RlVmFsdWUpO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGlzRW5kQ29tbWVudChub2RlKSB7XG4gICAgICAgIHJldHVybiAobm9kZS5ub2RlVHlwZSA9PSA4KSAmJiBlbmRDb21tZW50UmVnZXgudGVzdChjb21tZW50Tm9kZXNIYXZlVGV4dFByb3BlcnR5ID8gbm9kZS50ZXh0IDogbm9kZS5ub2RlVmFsdWUpO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGdldFZpcnR1YWxDaGlsZHJlbihzdGFydENvbW1lbnQsIGFsbG93VW5iYWxhbmNlZCkge1xuICAgICAgICB2YXIgY3VycmVudE5vZGUgPSBzdGFydENvbW1lbnQ7XG4gICAgICAgIHZhciBkZXB0aCA9IDE7XG4gICAgICAgIHZhciBjaGlsZHJlbiA9IFtdO1xuICAgICAgICB3aGlsZSAoY3VycmVudE5vZGUgPSBjdXJyZW50Tm9kZS5uZXh0U2libGluZykge1xuICAgICAgICAgICAgaWYgKGlzRW5kQ29tbWVudChjdXJyZW50Tm9kZSkpIHtcbiAgICAgICAgICAgICAgICBkZXB0aC0tO1xuICAgICAgICAgICAgICAgIGlmIChkZXB0aCA9PT0gMClcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGNoaWxkcmVuO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBjaGlsZHJlbi5wdXNoKGN1cnJlbnROb2RlKTtcblxuICAgICAgICAgICAgaWYgKGlzU3RhcnRDb21tZW50KGN1cnJlbnROb2RlKSlcbiAgICAgICAgICAgICAgICBkZXB0aCsrO1xuICAgICAgICB9XG4gICAgICAgIGlmICghYWxsb3dVbmJhbGFuY2VkKVxuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiQ2Fubm90IGZpbmQgY2xvc2luZyBjb21tZW50IHRhZyB0byBtYXRjaDogXCIgKyBzdGFydENvbW1lbnQubm9kZVZhbHVlKTtcbiAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gZ2V0TWF0Y2hpbmdFbmRDb21tZW50KHN0YXJ0Q29tbWVudCwgYWxsb3dVbmJhbGFuY2VkKSB7XG4gICAgICAgIHZhciBhbGxWaXJ0dWFsQ2hpbGRyZW4gPSBnZXRWaXJ0dWFsQ2hpbGRyZW4oc3RhcnRDb21tZW50LCBhbGxvd1VuYmFsYW5jZWQpO1xuICAgICAgICBpZiAoYWxsVmlydHVhbENoaWxkcmVuKSB7XG4gICAgICAgICAgICBpZiAoYWxsVmlydHVhbENoaWxkcmVuLmxlbmd0aCA+IDApXG4gICAgICAgICAgICAgICAgcmV0dXJuIGFsbFZpcnR1YWxDaGlsZHJlblthbGxWaXJ0dWFsQ2hpbGRyZW4ubGVuZ3RoIC0gMV0ubmV4dFNpYmxpbmc7XG4gICAgICAgICAgICByZXR1cm4gc3RhcnRDb21tZW50Lm5leHRTaWJsaW5nO1xuICAgICAgICB9IGVsc2VcbiAgICAgICAgICAgIHJldHVybiBudWxsOyAvLyBNdXN0IGhhdmUgbm8gbWF0Y2hpbmcgZW5kIGNvbW1lbnQsIGFuZCBhbGxvd1VuYmFsYW5jZWQgaXMgdHJ1ZVxuICAgIH1cblxuICAgIGZ1bmN0aW9uIGdldFVuYmFsYW5jZWRDaGlsZFRhZ3Mobm9kZSkge1xuICAgICAgICAvLyBlLmcuLCBmcm9tIDxkaXY+T0s8L2Rpdj48IS0tIGtvIGJsYWggLS0+PHNwYW4+QW5vdGhlcjwvc3Bhbj4sIHJldHVybnM6IDwhLS0ga28gYmxhaCAtLT48c3Bhbj5Bbm90aGVyPC9zcGFuPlxuICAgICAgICAvLyAgICAgICBmcm9tIDxkaXY+T0s8L2Rpdj48IS0tIC9rbyAtLT48IS0tIC9rbyAtLT4sICAgICAgICAgICAgIHJldHVybnM6IDwhLS0gL2tvIC0tPjwhLS0gL2tvIC0tPlxuICAgICAgICB2YXIgY2hpbGROb2RlID0gbm9kZS5maXJzdENoaWxkLCBjYXB0dXJlUmVtYWluaW5nID0gbnVsbDtcbiAgICAgICAgaWYgKGNoaWxkTm9kZSkge1xuICAgICAgICAgICAgZG8ge1xuICAgICAgICAgICAgICAgIGlmIChjYXB0dXJlUmVtYWluaW5nKSAgICAgICAgICAgICAgICAgICAvLyBXZSBhbHJlYWR5IGhpdCBhbiB1bmJhbGFuY2VkIG5vZGUgYW5kIGFyZSBub3cganVzdCBzY29vcGluZyB1cCBhbGwgc3Vic2VxdWVudCBub2Rlc1xuICAgICAgICAgICAgICAgICAgICBjYXB0dXJlUmVtYWluaW5nLnB1c2goY2hpbGROb2RlKTtcbiAgICAgICAgICAgICAgICBlbHNlIGlmIChpc1N0YXJ0Q29tbWVudChjaGlsZE5vZGUpKSB7XG4gICAgICAgICAgICAgICAgICAgIHZhciBtYXRjaGluZ0VuZENvbW1lbnQgPSBnZXRNYXRjaGluZ0VuZENvbW1lbnQoY2hpbGROb2RlLCAvKiBhbGxvd1VuYmFsYW5jZWQ6ICovIHRydWUpO1xuICAgICAgICAgICAgICAgICAgICBpZiAobWF0Y2hpbmdFbmRDb21tZW50KSAgICAgICAgICAgICAvLyBJdCdzIGEgYmFsYW5jZWQgdGFnLCBzbyBza2lwIGltbWVkaWF0ZWx5IHRvIHRoZSBlbmQgb2YgdGhpcyB2aXJ0dWFsIHNldFxuICAgICAgICAgICAgICAgICAgICAgICAgY2hpbGROb2RlID0gbWF0Y2hpbmdFbmRDb21tZW50O1xuICAgICAgICAgICAgICAgICAgICBlbHNlXG4gICAgICAgICAgICAgICAgICAgICAgICBjYXB0dXJlUmVtYWluaW5nID0gW2NoaWxkTm9kZV07IC8vIEl0J3MgdW5iYWxhbmNlZCwgc28gc3RhcnQgY2FwdHVyaW5nIGZyb20gdGhpcyBwb2ludFxuICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAoaXNFbmRDb21tZW50KGNoaWxkTm9kZSkpIHtcbiAgICAgICAgICAgICAgICAgICAgY2FwdHVyZVJlbWFpbmluZyA9IFtjaGlsZE5vZGVdOyAgICAgLy8gSXQncyB1bmJhbGFuY2VkIChpZiBpdCB3YXNuJ3QsIHdlJ2QgaGF2ZSBza2lwcGVkIG92ZXIgaXQgYWxyZWFkeSksIHNvIHN0YXJ0IGNhcHR1cmluZ1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0gd2hpbGUgKGNoaWxkTm9kZSA9IGNoaWxkTm9kZS5uZXh0U2libGluZyk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGNhcHR1cmVSZW1haW5pbmc7XG4gICAgfVxuXG4gICAga28udmlydHVhbEVsZW1lbnRzID0ge1xuICAgICAgICBhbGxvd2VkQmluZGluZ3M6IHt9LFxuXG4gICAgICAgIGNoaWxkTm9kZXM6IGZ1bmN0aW9uKG5vZGUpIHtcbiAgICAgICAgICAgIHJldHVybiBpc1N0YXJ0Q29tbWVudChub2RlKSA/IGdldFZpcnR1YWxDaGlsZHJlbihub2RlKSA6IG5vZGUuY2hpbGROb2RlcztcbiAgICAgICAgfSxcblxuICAgICAgICBlbXB0eU5vZGU6IGZ1bmN0aW9uKG5vZGUpIHtcbiAgICAgICAgICAgIGlmICghaXNTdGFydENvbW1lbnQobm9kZSkpXG4gICAgICAgICAgICAgICAga28udXRpbHMuZW1wdHlEb21Ob2RlKG5vZGUpO1xuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgdmFyIHZpcnR1YWxDaGlsZHJlbiA9IGtvLnZpcnR1YWxFbGVtZW50cy5jaGlsZE5vZGVzKG5vZGUpO1xuICAgICAgICAgICAgICAgIGZvciAodmFyIGkgPSAwLCBqID0gdmlydHVhbENoaWxkcmVuLmxlbmd0aDsgaSA8IGo7IGkrKylcbiAgICAgICAgICAgICAgICAgICAga28ucmVtb3ZlTm9kZSh2aXJ0dWFsQ2hpbGRyZW5baV0pO1xuICAgICAgICAgICAgfVxuICAgICAgICB9LFxuXG4gICAgICAgIHNldERvbU5vZGVDaGlsZHJlbjogZnVuY3Rpb24obm9kZSwgY2hpbGROb2Rlcykge1xuICAgICAgICAgICAgaWYgKCFpc1N0YXJ0Q29tbWVudChub2RlKSlcbiAgICAgICAgICAgICAgICBrby51dGlscy5zZXREb21Ob2RlQ2hpbGRyZW4obm9kZSwgY2hpbGROb2Rlcyk7XG4gICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICBrby52aXJ0dWFsRWxlbWVudHMuZW1wdHlOb2RlKG5vZGUpO1xuICAgICAgICAgICAgICAgIHZhciBlbmRDb21tZW50Tm9kZSA9IG5vZGUubmV4dFNpYmxpbmc7IC8vIE11c3QgYmUgdGhlIG5leHQgc2libGluZywgYXMgd2UganVzdCBlbXB0aWVkIHRoZSBjaGlsZHJlblxuICAgICAgICAgICAgICAgIGZvciAodmFyIGkgPSAwLCBqID0gY2hpbGROb2Rlcy5sZW5ndGg7IGkgPCBqOyBpKyspXG4gICAgICAgICAgICAgICAgICAgIGVuZENvbW1lbnROb2RlLnBhcmVudE5vZGUuaW5zZXJ0QmVmb3JlKGNoaWxkTm9kZXNbaV0sIGVuZENvbW1lbnROb2RlKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSxcblxuICAgICAgICBwcmVwZW5kOiBmdW5jdGlvbihjb250YWluZXJOb2RlLCBub2RlVG9QcmVwZW5kKSB7XG4gICAgICAgICAgICBpZiAoIWlzU3RhcnRDb21tZW50KGNvbnRhaW5lck5vZGUpKSB7XG4gICAgICAgICAgICAgICAgaWYgKGNvbnRhaW5lck5vZGUuZmlyc3RDaGlsZClcbiAgICAgICAgICAgICAgICAgICAgY29udGFpbmVyTm9kZS5pbnNlcnRCZWZvcmUobm9kZVRvUHJlcGVuZCwgY29udGFpbmVyTm9kZS5maXJzdENoaWxkKTtcbiAgICAgICAgICAgICAgICBlbHNlXG4gICAgICAgICAgICAgICAgICAgIGNvbnRhaW5lck5vZGUuYXBwZW5kQ2hpbGQobm9kZVRvUHJlcGVuZCk7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIC8vIFN0YXJ0IGNvbW1lbnRzIG11c3QgYWx3YXlzIGhhdmUgYSBwYXJlbnQgYW5kIGF0IGxlYXN0IG9uZSBmb2xsb3dpbmcgc2libGluZyAodGhlIGVuZCBjb21tZW50KVxuICAgICAgICAgICAgICAgIGNvbnRhaW5lck5vZGUucGFyZW50Tm9kZS5pbnNlcnRCZWZvcmUobm9kZVRvUHJlcGVuZCwgY29udGFpbmVyTm9kZS5uZXh0U2libGluZyk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0sXG5cbiAgICAgICAgaW5zZXJ0QWZ0ZXI6IGZ1bmN0aW9uKGNvbnRhaW5lck5vZGUsIG5vZGVUb0luc2VydCwgaW5zZXJ0QWZ0ZXJOb2RlKSB7XG4gICAgICAgICAgICBpZiAoIWluc2VydEFmdGVyTm9kZSkge1xuICAgICAgICAgICAgICAgIGtvLnZpcnR1YWxFbGVtZW50cy5wcmVwZW5kKGNvbnRhaW5lck5vZGUsIG5vZGVUb0luc2VydCk7XG4gICAgICAgICAgICB9IGVsc2UgaWYgKCFpc1N0YXJ0Q29tbWVudChjb250YWluZXJOb2RlKSkge1xuICAgICAgICAgICAgICAgIC8vIEluc2VydCBhZnRlciBpbnNlcnRpb24gcG9pbnRcbiAgICAgICAgICAgICAgICBpZiAoaW5zZXJ0QWZ0ZXJOb2RlLm5leHRTaWJsaW5nKVxuICAgICAgICAgICAgICAgICAgICBjb250YWluZXJOb2RlLmluc2VydEJlZm9yZShub2RlVG9JbnNlcnQsIGluc2VydEFmdGVyTm9kZS5uZXh0U2libGluZyk7XG4gICAgICAgICAgICAgICAgZWxzZVxuICAgICAgICAgICAgICAgICAgICBjb250YWluZXJOb2RlLmFwcGVuZENoaWxkKG5vZGVUb0luc2VydCk7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIC8vIENoaWxkcmVuIG9mIHN0YXJ0IGNvbW1lbnRzIG11c3QgYWx3YXlzIGhhdmUgYSBwYXJlbnQgYW5kIGF0IGxlYXN0IG9uZSBmb2xsb3dpbmcgc2libGluZyAodGhlIGVuZCBjb21tZW50KVxuICAgICAgICAgICAgICAgIGNvbnRhaW5lck5vZGUucGFyZW50Tm9kZS5pbnNlcnRCZWZvcmUobm9kZVRvSW5zZXJ0LCBpbnNlcnRBZnRlck5vZGUubmV4dFNpYmxpbmcpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9LFxuXG4gICAgICAgIGZpcnN0Q2hpbGQ6IGZ1bmN0aW9uKG5vZGUpIHtcbiAgICAgICAgICAgIGlmICghaXNTdGFydENvbW1lbnQobm9kZSkpXG4gICAgICAgICAgICAgICAgcmV0dXJuIG5vZGUuZmlyc3RDaGlsZDtcbiAgICAgICAgICAgIGlmICghbm9kZS5uZXh0U2libGluZyB8fCBpc0VuZENvbW1lbnQobm9kZS5uZXh0U2libGluZykpXG4gICAgICAgICAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICAgICAgICByZXR1cm4gbm9kZS5uZXh0U2libGluZztcbiAgICAgICAgfSxcblxuICAgICAgICBuZXh0U2libGluZzogZnVuY3Rpb24obm9kZSkge1xuICAgICAgICAgICAgaWYgKGlzU3RhcnRDb21tZW50KG5vZGUpKVxuICAgICAgICAgICAgICAgIG5vZGUgPSBnZXRNYXRjaGluZ0VuZENvbW1lbnQobm9kZSk7XG4gICAgICAgICAgICBpZiAobm9kZS5uZXh0U2libGluZyAmJiBpc0VuZENvbW1lbnQobm9kZS5uZXh0U2libGluZykpXG4gICAgICAgICAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICAgICAgICByZXR1cm4gbm9kZS5uZXh0U2libGluZztcbiAgICAgICAgfSxcblxuICAgICAgICBoYXNCaW5kaW5nVmFsdWU6IGlzU3RhcnRDb21tZW50LFxuXG4gICAgICAgIHZpcnR1YWxOb2RlQmluZGluZ1ZhbHVlOiBmdW5jdGlvbihub2RlKSB7XG4gICAgICAgICAgICB2YXIgcmVnZXhNYXRjaCA9IChjb21tZW50Tm9kZXNIYXZlVGV4dFByb3BlcnR5ID8gbm9kZS50ZXh0IDogbm9kZS5ub2RlVmFsdWUpLm1hdGNoKHN0YXJ0Q29tbWVudFJlZ2V4KTtcbiAgICAgICAgICAgIHJldHVybiByZWdleE1hdGNoID8gcmVnZXhNYXRjaFsxXSA6IG51bGw7XG4gICAgICAgIH0sXG5cbiAgICAgICAgbm9ybWFsaXNlVmlydHVhbEVsZW1lbnREb21TdHJ1Y3R1cmU6IGZ1bmN0aW9uKGVsZW1lbnRWZXJpZmllZCkge1xuICAgICAgICAgICAgLy8gV29ya2Fyb3VuZCBmb3IgaHR0cHM6Ly9naXRodWIuY29tL1N0ZXZlU2FuZGVyc29uL2tub2Nrb3V0L2lzc3Vlcy8xNTVcbiAgICAgICAgICAgIC8vIChJRSA8PSA4IG9yIElFIDkgcXVpcmtzIG1vZGUgcGFyc2VzIHlvdXIgSFRNTCB3ZWlyZGx5LCB0cmVhdGluZyBjbG9zaW5nIDwvbGk+IHRhZ3MgYXMgaWYgdGhleSBkb24ndCBleGlzdCwgdGhlcmVieSBtb3ZpbmcgY29tbWVudCBub2Rlc1xuICAgICAgICAgICAgLy8gdGhhdCBhcmUgZGlyZWN0IGRlc2NlbmRhbnRzIG9mIDx1bD4gaW50byB0aGUgcHJlY2VkaW5nIDxsaT4pXG4gICAgICAgICAgICBpZiAoIWh0bWxUYWdzV2l0aE9wdGlvbmFsbHlDbG9zaW5nQ2hpbGRyZW5ba28udXRpbHMudGFnTmFtZUxvd2VyKGVsZW1lbnRWZXJpZmllZCldKVxuICAgICAgICAgICAgICAgIHJldHVybjtcblxuICAgICAgICAgICAgLy8gU2NhbiBpbW1lZGlhdGUgY2hpbGRyZW4gdG8gc2VlIGlmIHRoZXkgY29udGFpbiB1bmJhbGFuY2VkIGNvbW1lbnQgdGFncy4gSWYgdGhleSBkbywgdGhvc2UgY29tbWVudCB0YWdzXG4gICAgICAgICAgICAvLyBtdXN0IGJlIGludGVuZGVkIHRvIGFwcGVhciAqYWZ0ZXIqIHRoYXQgY2hpbGQsIHNvIG1vdmUgdGhlbSB0aGVyZS5cbiAgICAgICAgICAgIHZhciBjaGlsZE5vZGUgPSBlbGVtZW50VmVyaWZpZWQuZmlyc3RDaGlsZDtcbiAgICAgICAgICAgIGlmIChjaGlsZE5vZGUpIHtcbiAgICAgICAgICAgICAgICBkbyB7XG4gICAgICAgICAgICAgICAgICAgIGlmIChjaGlsZE5vZGUubm9kZVR5cGUgPT09IDEpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciB1bmJhbGFuY2VkVGFncyA9IGdldFVuYmFsYW5jZWRDaGlsZFRhZ3MoY2hpbGROb2RlKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICh1bmJhbGFuY2VkVGFncykge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIEZpeCB1cCB0aGUgRE9NIGJ5IG1vdmluZyB0aGUgdW5iYWxhbmNlZCB0YWdzIHRvIHdoZXJlIHRoZXkgbW9zdCBsaWtlbHkgd2VyZSBpbnRlbmRlZCB0byBiZSBwbGFjZWQgLSAqYWZ0ZXIqIHRoZSBjaGlsZFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBub2RlVG9JbnNlcnRCZWZvcmUgPSBjaGlsZE5vZGUubmV4dFNpYmxpbmc7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCB1bmJhbGFuY2VkVGFncy5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAobm9kZVRvSW5zZXJ0QmVmb3JlKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZWxlbWVudFZlcmlmaWVkLmluc2VydEJlZm9yZSh1bmJhbGFuY2VkVGFnc1tpXSwgbm9kZVRvSW5zZXJ0QmVmb3JlKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZWxzZVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZWxlbWVudFZlcmlmaWVkLmFwcGVuZENoaWxkKHVuYmFsYW5jZWRUYWdzW2ldKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9IHdoaWxlIChjaGlsZE5vZGUgPSBjaGlsZE5vZGUubmV4dFNpYmxpbmcpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfTtcbn0pKCk7XG5rby5leHBvcnRTeW1ib2woJ3ZpcnR1YWxFbGVtZW50cycsIGtvLnZpcnR1YWxFbGVtZW50cyk7XG5rby5leHBvcnRTeW1ib2woJ3ZpcnR1YWxFbGVtZW50cy5hbGxvd2VkQmluZGluZ3MnLCBrby52aXJ0dWFsRWxlbWVudHMuYWxsb3dlZEJpbmRpbmdzKTtcbmtvLmV4cG9ydFN5bWJvbCgndmlydHVhbEVsZW1lbnRzLmVtcHR5Tm9kZScsIGtvLnZpcnR1YWxFbGVtZW50cy5lbXB0eU5vZGUpO1xuLy9rby5leHBvcnRTeW1ib2woJ3ZpcnR1YWxFbGVtZW50cy5maXJzdENoaWxkJywga28udmlydHVhbEVsZW1lbnRzLmZpcnN0Q2hpbGQpOyAgICAgLy8gZmlyc3RDaGlsZCBpcyBub3QgbWluaWZpZWRcbmtvLmV4cG9ydFN5bWJvbCgndmlydHVhbEVsZW1lbnRzLmluc2VydEFmdGVyJywga28udmlydHVhbEVsZW1lbnRzLmluc2VydEFmdGVyKTtcbi8va28uZXhwb3J0U3ltYm9sKCd2aXJ0dWFsRWxlbWVudHMubmV4dFNpYmxpbmcnLCBrby52aXJ0dWFsRWxlbWVudHMubmV4dFNpYmxpbmcpOyAgIC8vIG5leHRTaWJsaW5nIGlzIG5vdCBtaW5pZmllZFxua28uZXhwb3J0U3ltYm9sKCd2aXJ0dWFsRWxlbWVudHMucHJlcGVuZCcsIGtvLnZpcnR1YWxFbGVtZW50cy5wcmVwZW5kKTtcbmtvLmV4cG9ydFN5bWJvbCgndmlydHVhbEVsZW1lbnRzLnNldERvbU5vZGVDaGlsZHJlbicsIGtvLnZpcnR1YWxFbGVtZW50cy5zZXREb21Ob2RlQ2hpbGRyZW4pO1xuKGZ1bmN0aW9uKCkge1xuICAgIHZhciBkZWZhdWx0QmluZGluZ0F0dHJpYnV0ZU5hbWUgPSBcImRhdGEtYmluZFwiO1xuXG4gICAga28uYmluZGluZ1Byb3ZpZGVyID0gZnVuY3Rpb24oKSB7XG4gICAgICAgIHRoaXMuYmluZGluZ0NhY2hlID0ge307XG4gICAgfTtcblxuICAgIGtvLnV0aWxzLmV4dGVuZChrby5iaW5kaW5nUHJvdmlkZXIucHJvdG90eXBlLCB7XG4gICAgICAgICdub2RlSGFzQmluZGluZ3MnOiBmdW5jdGlvbihub2RlKSB7XG4gICAgICAgICAgICBzd2l0Y2ggKG5vZGUubm9kZVR5cGUpIHtcbiAgICAgICAgICAgICAgICBjYXNlIDE6IC8vIEVsZW1lbnRcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIG5vZGUuZ2V0QXR0cmlidXRlKGRlZmF1bHRCaW5kaW5nQXR0cmlidXRlTmFtZSkgIT0gbnVsbFxuICAgICAgICAgICAgICAgICAgICAgICAgfHwga28uY29tcG9uZW50c1snZ2V0Q29tcG9uZW50TmFtZUZvck5vZGUnXShub2RlKTtcbiAgICAgICAgICAgICAgICBjYXNlIDg6IC8vIENvbW1lbnQgbm9kZVxuICAgICAgICAgICAgICAgICAgICByZXR1cm4ga28udmlydHVhbEVsZW1lbnRzLmhhc0JpbmRpbmdWYWx1ZShub2RlKTtcbiAgICAgICAgICAgICAgICBkZWZhdWx0OiByZXR1cm4gZmFsc2U7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0sXG5cbiAgICAgICAgJ2dldEJpbmRpbmdzJzogZnVuY3Rpb24obm9kZSwgYmluZGluZ0NvbnRleHQpIHtcbiAgICAgICAgICAgIHZhciBiaW5kaW5nc1N0cmluZyA9IHRoaXNbJ2dldEJpbmRpbmdzU3RyaW5nJ10obm9kZSwgYmluZGluZ0NvbnRleHQpLFxuICAgICAgICAgICAgICAgIHBhcnNlZEJpbmRpbmdzID0gYmluZGluZ3NTdHJpbmcgPyB0aGlzWydwYXJzZUJpbmRpbmdzU3RyaW5nJ10oYmluZGluZ3NTdHJpbmcsIGJpbmRpbmdDb250ZXh0LCBub2RlKSA6IG51bGw7XG4gICAgICAgICAgICByZXR1cm4ga28uY29tcG9uZW50cy5hZGRCaW5kaW5nc0ZvckN1c3RvbUVsZW1lbnQocGFyc2VkQmluZGluZ3MsIG5vZGUsIGJpbmRpbmdDb250ZXh0LCAvKiB2YWx1ZUFjY2Vzc29ycyAqLyBmYWxzZSk7XG4gICAgICAgIH0sXG5cbiAgICAgICAgJ2dldEJpbmRpbmdBY2Nlc3NvcnMnOiBmdW5jdGlvbihub2RlLCBiaW5kaW5nQ29udGV4dCkge1xuICAgICAgICAgICAgdmFyIGJpbmRpbmdzU3RyaW5nID0gdGhpc1snZ2V0QmluZGluZ3NTdHJpbmcnXShub2RlLCBiaW5kaW5nQ29udGV4dCksXG4gICAgICAgICAgICAgICAgcGFyc2VkQmluZGluZ3MgPSBiaW5kaW5nc1N0cmluZyA/IHRoaXNbJ3BhcnNlQmluZGluZ3NTdHJpbmcnXShiaW5kaW5nc1N0cmluZywgYmluZGluZ0NvbnRleHQsIG5vZGUsIHsgJ3ZhbHVlQWNjZXNzb3JzJzogdHJ1ZSB9KSA6IG51bGw7XG4gICAgICAgICAgICByZXR1cm4ga28uY29tcG9uZW50cy5hZGRCaW5kaW5nc0ZvckN1c3RvbUVsZW1lbnQocGFyc2VkQmluZGluZ3MsIG5vZGUsIGJpbmRpbmdDb250ZXh0LCAvKiB2YWx1ZUFjY2Vzc29ycyAqLyB0cnVlKTtcbiAgICAgICAgfSxcblxuICAgICAgICAvLyBUaGUgZm9sbG93aW5nIGZ1bmN0aW9uIGlzIG9ubHkgdXNlZCBpbnRlcm5hbGx5IGJ5IHRoaXMgZGVmYXVsdCBwcm92aWRlci5cbiAgICAgICAgLy8gSXQncyBub3QgcGFydCBvZiB0aGUgaW50ZXJmYWNlIGRlZmluaXRpb24gZm9yIGEgZ2VuZXJhbCBiaW5kaW5nIHByb3ZpZGVyLlxuICAgICAgICAnZ2V0QmluZGluZ3NTdHJpbmcnOiBmdW5jdGlvbihub2RlLCBiaW5kaW5nQ29udGV4dCkge1xuICAgICAgICAgICAgc3dpdGNoIChub2RlLm5vZGVUeXBlKSB7XG4gICAgICAgICAgICAgICAgY2FzZSAxOiByZXR1cm4gbm9kZS5nZXRBdHRyaWJ1dGUoZGVmYXVsdEJpbmRpbmdBdHRyaWJ1dGVOYW1lKTsgICAvLyBFbGVtZW50XG4gICAgICAgICAgICAgICAgY2FzZSA4OiByZXR1cm4ga28udmlydHVhbEVsZW1lbnRzLnZpcnR1YWxOb2RlQmluZGluZ1ZhbHVlKG5vZGUpOyAvLyBDb21tZW50IG5vZGVcbiAgICAgICAgICAgICAgICBkZWZhdWx0OiByZXR1cm4gbnVsbDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSxcblxuICAgICAgICAvLyBUaGUgZm9sbG93aW5nIGZ1bmN0aW9uIGlzIG9ubHkgdXNlZCBpbnRlcm5hbGx5IGJ5IHRoaXMgZGVmYXVsdCBwcm92aWRlci5cbiAgICAgICAgLy8gSXQncyBub3QgcGFydCBvZiB0aGUgaW50ZXJmYWNlIGRlZmluaXRpb24gZm9yIGEgZ2VuZXJhbCBiaW5kaW5nIHByb3ZpZGVyLlxuICAgICAgICAncGFyc2VCaW5kaW5nc1N0cmluZyc6IGZ1bmN0aW9uKGJpbmRpbmdzU3RyaW5nLCBiaW5kaW5nQ29udGV4dCwgbm9kZSwgb3B0aW9ucykge1xuICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICB2YXIgYmluZGluZ0Z1bmN0aW9uID0gY3JlYXRlQmluZGluZ3NTdHJpbmdFdmFsdWF0b3JWaWFDYWNoZShiaW5kaW5nc1N0cmluZywgdGhpcy5iaW5kaW5nQ2FjaGUsIG9wdGlvbnMpO1xuICAgICAgICAgICAgICAgIHJldHVybiBiaW5kaW5nRnVuY3Rpb24oYmluZGluZ0NvbnRleHQsIG5vZGUpO1xuICAgICAgICAgICAgfSBjYXRjaCAoZXgpIHtcbiAgICAgICAgICAgICAgICBleC5tZXNzYWdlID0gXCJVbmFibGUgdG8gcGFyc2UgYmluZGluZ3MuXFxuQmluZGluZ3MgdmFsdWU6IFwiICsgYmluZGluZ3NTdHJpbmcgKyBcIlxcbk1lc3NhZ2U6IFwiICsgZXgubWVzc2FnZTtcbiAgICAgICAgICAgICAgICB0aHJvdyBleDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH0pO1xuXG4gICAga28uYmluZGluZ1Byb3ZpZGVyWydpbnN0YW5jZSddID0gbmV3IGtvLmJpbmRpbmdQcm92aWRlcigpO1xuXG4gICAgZnVuY3Rpb24gY3JlYXRlQmluZGluZ3NTdHJpbmdFdmFsdWF0b3JWaWFDYWNoZShiaW5kaW5nc1N0cmluZywgY2FjaGUsIG9wdGlvbnMpIHtcbiAgICAgICAgdmFyIGNhY2hlS2V5ID0gYmluZGluZ3NTdHJpbmcgKyAob3B0aW9ucyAmJiBvcHRpb25zWyd2YWx1ZUFjY2Vzc29ycyddIHx8ICcnKTtcbiAgICAgICAgcmV0dXJuIGNhY2hlW2NhY2hlS2V5XVxuICAgICAgICAgICAgfHwgKGNhY2hlW2NhY2hlS2V5XSA9IGNyZWF0ZUJpbmRpbmdzU3RyaW5nRXZhbHVhdG9yKGJpbmRpbmdzU3RyaW5nLCBvcHRpb25zKSk7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gY3JlYXRlQmluZGluZ3NTdHJpbmdFdmFsdWF0b3IoYmluZGluZ3NTdHJpbmcsIG9wdGlvbnMpIHtcbiAgICAgICAgLy8gQnVpbGQgdGhlIHNvdXJjZSBmb3IgYSBmdW5jdGlvbiB0aGF0IGV2YWx1YXRlcyBcImV4cHJlc3Npb25cIlxuICAgICAgICAvLyBGb3IgZWFjaCBzY29wZSB2YXJpYWJsZSwgYWRkIGFuIGV4dHJhIGxldmVsIG9mIFwid2l0aFwiIG5lc3RpbmdcbiAgICAgICAgLy8gRXhhbXBsZSByZXN1bHQ6IHdpdGgoc2MxKSB7IHdpdGgoc2MwKSB7IHJldHVybiAoZXhwcmVzc2lvbikgfSB9XG4gICAgICAgIHZhciByZXdyaXR0ZW5CaW5kaW5ncyA9IGtvLmV4cHJlc3Npb25SZXdyaXRpbmcucHJlUHJvY2Vzc0JpbmRpbmdzKGJpbmRpbmdzU3RyaW5nLCBvcHRpb25zKSxcbiAgICAgICAgICAgIGZ1bmN0aW9uQm9keSA9IFwid2l0aCgkY29udGV4dCl7d2l0aCgkZGF0YXx8e30pe3JldHVybntcIiArIHJld3JpdHRlbkJpbmRpbmdzICsgXCJ9fX1cIjtcbiAgICAgICAgcmV0dXJuIG5ldyBGdW5jdGlvbihcIiRjb250ZXh0XCIsIFwiJGVsZW1lbnRcIiwgZnVuY3Rpb25Cb2R5KTtcbiAgICB9XG59KSgpO1xuXG5rby5leHBvcnRTeW1ib2woJ2JpbmRpbmdQcm92aWRlcicsIGtvLmJpbmRpbmdQcm92aWRlcik7XG4oZnVuY3Rpb24gKCkge1xuICAgIGtvLmJpbmRpbmdIYW5kbGVycyA9IHt9O1xuXG4gICAgLy8gVGhlIGZvbGxvd2luZyBlbGVtZW50IHR5cGVzIHdpbGwgbm90IGJlIHJlY3Vyc2VkIGludG8gZHVyaW5nIGJpbmRpbmcuXG4gICAgdmFyIGJpbmRpbmdEb2VzTm90UmVjdXJzZUludG9FbGVtZW50VHlwZXMgPSB7XG4gICAgICAgIC8vIERvbid0IHdhbnQgYmluZGluZ3MgdGhhdCBvcGVyYXRlIG9uIHRleHQgbm9kZXMgdG8gbXV0YXRlIDxzY3JpcHQ+IGFuZCA8dGV4dGFyZWE+IGNvbnRlbnRzLFxuICAgICAgICAvLyBiZWNhdXNlIGl0J3MgdW5leHBlY3RlZCBhbmQgYSBwb3RlbnRpYWwgWFNTIGlzc3VlLlxuICAgICAgICAvLyBBbHNvIGJpbmRpbmdzIHNob3VsZCBub3Qgb3BlcmF0ZSBvbiA8dGVtcGxhdGU+IGVsZW1lbnRzIHNpbmNlIHRoaXMgYnJlYWtzIGluIEludGVybmV0IEV4cGxvcmVyXG4gICAgICAgIC8vIGFuZCBiZWNhdXNlIHN1Y2ggZWxlbWVudHMnIGNvbnRlbnRzIGFyZSBhbHdheXMgaW50ZW5kZWQgdG8gYmUgYm91bmQgaW4gYSBkaWZmZXJlbnQgY29udGV4dFxuICAgICAgICAvLyBmcm9tIHdoZXJlIHRoZXkgYXBwZWFyIGluIHRoZSBkb2N1bWVudC5cbiAgICAgICAgJ3NjcmlwdCc6IHRydWUsXG4gICAgICAgICd0ZXh0YXJlYSc6IHRydWUsXG4gICAgICAgICd0ZW1wbGF0ZSc6IHRydWVcbiAgICB9O1xuXG4gICAgLy8gVXNlIGFuIG92ZXJyaWRhYmxlIG1ldGhvZCBmb3IgcmV0cmlldmluZyBiaW5kaW5nIGhhbmRsZXJzIHNvIHRoYXQgYSBwbHVnaW5zIG1heSBzdXBwb3J0IGR5bmFtaWNhbGx5IGNyZWF0ZWQgaGFuZGxlcnNcbiAgICBrb1snZ2V0QmluZGluZ0hhbmRsZXInXSA9IGZ1bmN0aW9uKGJpbmRpbmdLZXkpIHtcbiAgICAgICAgcmV0dXJuIGtvLmJpbmRpbmdIYW5kbGVyc1tiaW5kaW5nS2V5XTtcbiAgICB9O1xuXG4gICAgLy8gVGhlIGtvLmJpbmRpbmdDb250ZXh0IGNvbnN0cnVjdG9yIGlzIG9ubHkgY2FsbGVkIGRpcmVjdGx5IHRvIGNyZWF0ZSB0aGUgcm9vdCBjb250ZXh0LiBGb3IgY2hpbGRcbiAgICAvLyBjb250ZXh0cywgdXNlIGJpbmRpbmdDb250ZXh0LmNyZWF0ZUNoaWxkQ29udGV4dCBvciBiaW5kaW5nQ29udGV4dC5leHRlbmQuXG4gICAga28uYmluZGluZ0NvbnRleHQgPSBmdW5jdGlvbihkYXRhSXRlbU9yQWNjZXNzb3IsIHBhcmVudENvbnRleHQsIGRhdGFJdGVtQWxpYXMsIGV4dGVuZENhbGxiYWNrKSB7XG5cbiAgICAgICAgLy8gVGhlIGJpbmRpbmcgY29udGV4dCBvYmplY3QgaW5jbHVkZXMgc3RhdGljIHByb3BlcnRpZXMgZm9yIHRoZSBjdXJyZW50LCBwYXJlbnQsIGFuZCByb290IHZpZXcgbW9kZWxzLlxuICAgICAgICAvLyBJZiBhIHZpZXcgbW9kZWwgaXMgYWN0dWFsbHkgc3RvcmVkIGluIGFuIG9ic2VydmFibGUsIHRoZSBjb3JyZXNwb25kaW5nIGJpbmRpbmcgY29udGV4dCBvYmplY3QsIGFuZFxuICAgICAgICAvLyBhbnkgY2hpbGQgY29udGV4dHMsIG11c3QgYmUgdXBkYXRlZCB3aGVuIHRoZSB2aWV3IG1vZGVsIGlzIGNoYW5nZWQuXG4gICAgICAgIGZ1bmN0aW9uIHVwZGF0ZUNvbnRleHQoKSB7XG4gICAgICAgICAgICAvLyBNb3N0IG9mIHRoZSB0aW1lLCB0aGUgY29udGV4dCB3aWxsIGRpcmVjdGx5IGdldCBhIHZpZXcgbW9kZWwgb2JqZWN0LCBidXQgaWYgYSBmdW5jdGlvbiBpcyBnaXZlbixcbiAgICAgICAgICAgIC8vIHdlIGNhbGwgdGhlIGZ1bmN0aW9uIHRvIHJldHJpZXZlIHRoZSB2aWV3IG1vZGVsLiBJZiB0aGUgZnVuY3Rpb24gYWNjZXNzZXMgYW55IG9ic2VydmFibGVzIG9yIHJldHVybnNcbiAgICAgICAgICAgIC8vIGFuIG9ic2VydmFibGUsIHRoZSBkZXBlbmRlbmN5IGlzIHRyYWNrZWQsIGFuZCB0aG9zZSBvYnNlcnZhYmxlcyBjYW4gbGF0ZXIgY2F1c2UgdGhlIGJpbmRpbmdcbiAgICAgICAgICAgIC8vIGNvbnRleHQgdG8gYmUgdXBkYXRlZC5cbiAgICAgICAgICAgIHZhciBkYXRhSXRlbU9yT2JzZXJ2YWJsZSA9IGlzRnVuYyA/IGRhdGFJdGVtT3JBY2Nlc3NvcigpIDogZGF0YUl0ZW1PckFjY2Vzc29yLFxuICAgICAgICAgICAgICAgIGRhdGFJdGVtID0ga28udXRpbHMudW53cmFwT2JzZXJ2YWJsZShkYXRhSXRlbU9yT2JzZXJ2YWJsZSk7XG5cbiAgICAgICAgICAgIGlmIChwYXJlbnRDb250ZXh0KSB7XG4gICAgICAgICAgICAgICAgLy8gV2hlbiBhIFwicGFyZW50XCIgY29udGV4dCBpcyBnaXZlbiwgcmVnaXN0ZXIgYSBkZXBlbmRlbmN5IG9uIHRoZSBwYXJlbnQgY29udGV4dC4gVGh1cyB3aGVuZXZlciB0aGVcbiAgICAgICAgICAgICAgICAvLyBwYXJlbnQgY29udGV4dCBpcyB1cGRhdGVkLCB0aGlzIGNvbnRleHQgd2lsbCBhbHNvIGJlIHVwZGF0ZWQuXG4gICAgICAgICAgICAgICAgaWYgKHBhcmVudENvbnRleHQuX3N1YnNjcmliYWJsZSlcbiAgICAgICAgICAgICAgICAgICAgcGFyZW50Q29udGV4dC5fc3Vic2NyaWJhYmxlKCk7XG5cbiAgICAgICAgICAgICAgICAvLyBDb3B5ICRyb290IGFuZCBhbnkgY3VzdG9tIHByb3BlcnRpZXMgZnJvbSB0aGUgcGFyZW50IGNvbnRleHRcbiAgICAgICAgICAgICAgICBrby51dGlscy5leHRlbmQoc2VsZiwgcGFyZW50Q29udGV4dCk7XG5cbiAgICAgICAgICAgICAgICAvLyBCZWNhdXNlIHRoZSBhYm92ZSBjb3B5IG92ZXJ3cml0ZXMgb3VyIG93biBwcm9wZXJ0aWVzLCB3ZSBuZWVkIHRvIHJlc2V0IHRoZW0uXG4gICAgICAgICAgICAgICAgLy8gRHVyaW5nIHRoZSBmaXJzdCBleGVjdXRpb24sIFwic3Vic2NyaWJhYmxlXCIgaXNuJ3Qgc2V0LCBzbyBkb24ndCBib3RoZXIgZG9pbmcgdGhlIHVwZGF0ZSB0aGVuLlxuICAgICAgICAgICAgICAgIGlmIChzdWJzY3JpYmFibGUpIHtcbiAgICAgICAgICAgICAgICAgICAgc2VsZi5fc3Vic2NyaWJhYmxlID0gc3Vic2NyaWJhYmxlO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgc2VsZlsnJHBhcmVudHMnXSA9IFtdO1xuICAgICAgICAgICAgICAgIHNlbGZbJyRyb290J10gPSBkYXRhSXRlbTtcblxuICAgICAgICAgICAgICAgIC8vIEV4cG9ydCAna28nIGluIHRoZSBiaW5kaW5nIGNvbnRleHQgc28gaXQgd2lsbCBiZSBhdmFpbGFibGUgaW4gYmluZGluZ3MgYW5kIHRlbXBsYXRlc1xuICAgICAgICAgICAgICAgIC8vIGV2ZW4gaWYgJ2tvJyBpc24ndCBleHBvcnRlZCBhcyBhIGdsb2JhbCwgc3VjaCBhcyB3aGVuIHVzaW5nIGFuIEFNRCBsb2FkZXIuXG4gICAgICAgICAgICAgICAgLy8gU2VlIGh0dHBzOi8vZ2l0aHViLmNvbS9TdGV2ZVNhbmRlcnNvbi9rbm9ja291dC9pc3N1ZXMvNDkwXG4gICAgICAgICAgICAgICAgc2VsZlsna28nXSA9IGtvO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgc2VsZlsnJHJhd0RhdGEnXSA9IGRhdGFJdGVtT3JPYnNlcnZhYmxlO1xuICAgICAgICAgICAgc2VsZlsnJGRhdGEnXSA9IGRhdGFJdGVtO1xuICAgICAgICAgICAgaWYgKGRhdGFJdGVtQWxpYXMpXG4gICAgICAgICAgICAgICAgc2VsZltkYXRhSXRlbUFsaWFzXSA9IGRhdGFJdGVtO1xuXG4gICAgICAgICAgICAvLyBUaGUgZXh0ZW5kQ2FsbGJhY2sgZnVuY3Rpb24gaXMgcHJvdmlkZWQgd2hlbiBjcmVhdGluZyBhIGNoaWxkIGNvbnRleHQgb3IgZXh0ZW5kaW5nIGEgY29udGV4dC5cbiAgICAgICAgICAgIC8vIEl0IGhhbmRsZXMgdGhlIHNwZWNpZmljIGFjdGlvbnMgbmVlZGVkIHRvIGZpbmlzaCBzZXR0aW5nIHVwIHRoZSBiaW5kaW5nIGNvbnRleHQuIEFjdGlvbnMgaW4gdGhpc1xuICAgICAgICAgICAgLy8gZnVuY3Rpb24gY291bGQgYWxzbyBhZGQgZGVwZW5kZW5jaWVzIHRvIHRoaXMgYmluZGluZyBjb250ZXh0LlxuICAgICAgICAgICAgaWYgKGV4dGVuZENhbGxiYWNrKVxuICAgICAgICAgICAgICAgIGV4dGVuZENhbGxiYWNrKHNlbGYsIHBhcmVudENvbnRleHQsIGRhdGFJdGVtKTtcblxuICAgICAgICAgICAgcmV0dXJuIHNlbGZbJyRkYXRhJ107XG4gICAgICAgIH1cbiAgICAgICAgZnVuY3Rpb24gZGlzcG9zZVdoZW4oKSB7XG4gICAgICAgICAgICByZXR1cm4gbm9kZXMgJiYgIWtvLnV0aWxzLmFueURvbU5vZGVJc0F0dGFjaGVkVG9Eb2N1bWVudChub2Rlcyk7XG4gICAgICAgIH1cblxuICAgICAgICB2YXIgc2VsZiA9IHRoaXMsXG4gICAgICAgICAgICBpc0Z1bmMgPSB0eXBlb2YoZGF0YUl0ZW1PckFjY2Vzc29yKSA9PSBcImZ1bmN0aW9uXCIgJiYgIWtvLmlzT2JzZXJ2YWJsZShkYXRhSXRlbU9yQWNjZXNzb3IpLFxuICAgICAgICAgICAgbm9kZXMsXG4gICAgICAgICAgICBzdWJzY3JpYmFibGUgPSBrby5kZXBlbmRlbnRPYnNlcnZhYmxlKHVwZGF0ZUNvbnRleHQsIG51bGwsIHsgZGlzcG9zZVdoZW46IGRpc3Bvc2VXaGVuLCBkaXNwb3NlV2hlbk5vZGVJc1JlbW92ZWQ6IHRydWUgfSk7XG5cbiAgICAgICAgLy8gQXQgdGhpcyBwb2ludCwgdGhlIGJpbmRpbmcgY29udGV4dCBoYXMgYmVlbiBpbml0aWFsaXplZCwgYW5kIHRoZSBcInN1YnNjcmliYWJsZVwiIGNvbXB1dGVkIG9ic2VydmFibGUgaXNcbiAgICAgICAgLy8gc3Vic2NyaWJlZCB0byBhbnkgb2JzZXJ2YWJsZXMgdGhhdCB3ZXJlIGFjY2Vzc2VkIGluIHRoZSBwcm9jZXNzLiBJZiB0aGVyZSBpcyBub3RoaW5nIHRvIHRyYWNrLCB0aGVcbiAgICAgICAgLy8gY29tcHV0ZWQgd2lsbCBiZSBpbmFjdGl2ZSwgYW5kIHdlIGNhbiBzYWZlbHkgdGhyb3cgaXQgYXdheS4gSWYgaXQncyBhY3RpdmUsIHRoZSBjb21wdXRlZCBpcyBzdG9yZWQgaW5cbiAgICAgICAgLy8gdGhlIGNvbnRleHQgb2JqZWN0LlxuICAgICAgICBpZiAoc3Vic2NyaWJhYmxlLmlzQWN0aXZlKCkpIHtcbiAgICAgICAgICAgIHNlbGYuX3N1YnNjcmliYWJsZSA9IHN1YnNjcmliYWJsZTtcblxuICAgICAgICAgICAgLy8gQWx3YXlzIG5vdGlmeSBiZWNhdXNlIGV2ZW4gaWYgdGhlIG1vZGVsICgkZGF0YSkgaGFzbid0IGNoYW5nZWQsIG90aGVyIGNvbnRleHQgcHJvcGVydGllcyBtaWdodCBoYXZlIGNoYW5nZWRcbiAgICAgICAgICAgIHN1YnNjcmliYWJsZVsnZXF1YWxpdHlDb21wYXJlciddID0gbnVsbDtcblxuICAgICAgICAgICAgLy8gV2UgbmVlZCB0byBiZSBhYmxlIHRvIGRpc3Bvc2Ugb2YgdGhpcyBjb21wdXRlZCBvYnNlcnZhYmxlIHdoZW4gaXQncyBubyBsb25nZXIgbmVlZGVkLiBUaGlzIHdvdWxkIGJlXG4gICAgICAgICAgICAvLyBlYXN5IGlmIHdlIGhhZCBhIHNpbmdsZSBub2RlIHRvIHdhdGNoLCBidXQgYmluZGluZyBjb250ZXh0cyBjYW4gYmUgdXNlZCBieSBtYW55IGRpZmZlcmVudCBub2RlcywgYW5kXG4gICAgICAgICAgICAvLyB3ZSBjYW5ub3QgYXNzdW1lIHRoYXQgdGhvc2Ugbm9kZXMgaGF2ZSBhbnkgcmVsYXRpb24gdG8gZWFjaCBvdGhlci4gU28gaW5zdGVhZCB3ZSB0cmFjayBhbnkgbm9kZSB0aGF0XG4gICAgICAgICAgICAvLyB0aGUgY29udGV4dCBpcyBhdHRhY2hlZCB0bywgYW5kIGRpc3Bvc2UgdGhlIGNvbXB1dGVkIHdoZW4gYWxsIG9mIHRob3NlIG5vZGVzIGhhdmUgYmVlbiBjbGVhbmVkLlxuXG4gICAgICAgICAgICAvLyBBZGQgcHJvcGVydGllcyB0byAqc3Vic2NyaWJhYmxlKiBpbnN0ZWFkIG9mICpzZWxmKiBiZWNhdXNlIGFueSBwcm9wZXJ0aWVzIGFkZGVkIHRvICpzZWxmKiBtYXkgYmUgb3ZlcndyaXR0ZW4gb24gdXBkYXRlc1xuICAgICAgICAgICAgbm9kZXMgPSBbXTtcbiAgICAgICAgICAgIHN1YnNjcmliYWJsZS5fYWRkTm9kZSA9IGZ1bmN0aW9uKG5vZGUpIHtcbiAgICAgICAgICAgICAgICBub2Rlcy5wdXNoKG5vZGUpO1xuICAgICAgICAgICAgICAgIGtvLnV0aWxzLmRvbU5vZGVEaXNwb3NhbC5hZGREaXNwb3NlQ2FsbGJhY2sobm9kZSwgZnVuY3Rpb24obm9kZSkge1xuICAgICAgICAgICAgICAgICAgICBrby51dGlscy5hcnJheVJlbW92ZUl0ZW0obm9kZXMsIG5vZGUpO1xuICAgICAgICAgICAgICAgICAgICBpZiAoIW5vZGVzLmxlbmd0aCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgc3Vic2NyaWJhYmxlLmRpc3Bvc2UoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHNlbGYuX3N1YnNjcmliYWJsZSA9IHN1YnNjcmliYWJsZSA9IHVuZGVmaW5lZDtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIC8vIEV4dGVuZCB0aGUgYmluZGluZyBjb250ZXh0IGhpZXJhcmNoeSB3aXRoIGEgbmV3IHZpZXcgbW9kZWwgb2JqZWN0LiBJZiB0aGUgcGFyZW50IGNvbnRleHQgaXMgd2F0Y2hpbmdcbiAgICAvLyBhbnkgb2JzZXJ2YWJsZXMsIHRoZSBuZXcgY2hpbGQgY29udGV4dCB3aWxsIGF1dG9tYXRpY2FsbHkgZ2V0IGEgZGVwZW5kZW5jeSBvbiB0aGUgcGFyZW50IGNvbnRleHQuXG4gICAgLy8gQnV0IHRoaXMgZG9lcyBub3QgbWVhbiB0aGF0IHRoZSAkZGF0YSB2YWx1ZSBvZiB0aGUgY2hpbGQgY29udGV4dCB3aWxsIGFsc28gZ2V0IHVwZGF0ZWQuIElmIHRoZSBjaGlsZFxuICAgIC8vIHZpZXcgbW9kZWwgYWxzbyBkZXBlbmRzIG9uIHRoZSBwYXJlbnQgdmlldyBtb2RlbCwgeW91IG11c3QgcHJvdmlkZSBhIGZ1bmN0aW9uIHRoYXQgcmV0dXJucyB0aGUgY29ycmVjdFxuICAgIC8vIHZpZXcgbW9kZWwgb24gZWFjaCB1cGRhdGUuXG4gICAga28uYmluZGluZ0NvbnRleHQucHJvdG90eXBlWydjcmVhdGVDaGlsZENvbnRleHQnXSA9IGZ1bmN0aW9uIChkYXRhSXRlbU9yQWNjZXNzb3IsIGRhdGFJdGVtQWxpYXMsIGV4dGVuZENhbGxiYWNrKSB7XG4gICAgICAgIHJldHVybiBuZXcga28uYmluZGluZ0NvbnRleHQoZGF0YUl0ZW1PckFjY2Vzc29yLCB0aGlzLCBkYXRhSXRlbUFsaWFzLCBmdW5jdGlvbihzZWxmLCBwYXJlbnRDb250ZXh0KSB7XG4gICAgICAgICAgICAvLyBFeHRlbmQgdGhlIGNvbnRleHQgaGllcmFyY2h5IGJ5IHNldHRpbmcgdGhlIGFwcHJvcHJpYXRlIHBvaW50ZXJzXG4gICAgICAgICAgICBzZWxmWyckcGFyZW50Q29udGV4dCddID0gcGFyZW50Q29udGV4dDtcbiAgICAgICAgICAgIHNlbGZbJyRwYXJlbnQnXSA9IHBhcmVudENvbnRleHRbJyRkYXRhJ107XG4gICAgICAgICAgICBzZWxmWyckcGFyZW50cyddID0gKHBhcmVudENvbnRleHRbJyRwYXJlbnRzJ10gfHwgW10pLnNsaWNlKDApO1xuICAgICAgICAgICAgc2VsZlsnJHBhcmVudHMnXS51bnNoaWZ0KHNlbGZbJyRwYXJlbnQnXSk7XG4gICAgICAgICAgICBpZiAoZXh0ZW5kQ2FsbGJhY2spXG4gICAgICAgICAgICAgICAgZXh0ZW5kQ2FsbGJhY2soc2VsZik7XG4gICAgICAgIH0pO1xuICAgIH07XG5cbiAgICAvLyBFeHRlbmQgdGhlIGJpbmRpbmcgY29udGV4dCB3aXRoIG5ldyBjdXN0b20gcHJvcGVydGllcy4gVGhpcyBkb2Vzbid0IGNoYW5nZSB0aGUgY29udGV4dCBoaWVyYXJjaHkuXG4gICAgLy8gU2ltaWxhcmx5IHRvIFwiY2hpbGRcIiBjb250ZXh0cywgcHJvdmlkZSBhIGZ1bmN0aW9uIGhlcmUgdG8gbWFrZSBzdXJlIHRoYXQgdGhlIGNvcnJlY3QgdmFsdWVzIGFyZSBzZXRcbiAgICAvLyB3aGVuIGFuIG9ic2VydmFibGUgdmlldyBtb2RlbCBpcyB1cGRhdGVkLlxuICAgIGtvLmJpbmRpbmdDb250ZXh0LnByb3RvdHlwZVsnZXh0ZW5kJ10gPSBmdW5jdGlvbihwcm9wZXJ0aWVzKSB7XG4gICAgICAgIC8vIElmIHRoZSBwYXJlbnQgY29udGV4dCByZWZlcmVuY2VzIGFuIG9ic2VydmFibGUgdmlldyBtb2RlbCwgXCJfc3Vic2NyaWJhYmxlXCIgd2lsbCBhbHdheXMgYmUgdGhlXG4gICAgICAgIC8vIGxhdGVzdCB2aWV3IG1vZGVsIG9iamVjdC4gSWYgbm90LCBcIl9zdWJzY3JpYmFibGVcIiBpc24ndCBzZXQsIGFuZCB3ZSBjYW4gdXNlIHRoZSBzdGF0aWMgXCIkZGF0YVwiIHZhbHVlLlxuICAgICAgICByZXR1cm4gbmV3IGtvLmJpbmRpbmdDb250ZXh0KHRoaXMuX3N1YnNjcmliYWJsZSB8fCB0aGlzWyckZGF0YSddLCB0aGlzLCBudWxsLCBmdW5jdGlvbihzZWxmLCBwYXJlbnRDb250ZXh0KSB7XG4gICAgICAgICAgICAvLyBUaGlzIFwiY2hpbGRcIiBjb250ZXh0IGRvZXNuJ3QgZGlyZWN0bHkgdHJhY2sgYSBwYXJlbnQgb2JzZXJ2YWJsZSB2aWV3IG1vZGVsLFxuICAgICAgICAgICAgLy8gc28gd2UgbmVlZCB0byBtYW51YWxseSBzZXQgdGhlICRyYXdEYXRhIHZhbHVlIHRvIG1hdGNoIHRoZSBwYXJlbnQuXG4gICAgICAgICAgICBzZWxmWyckcmF3RGF0YSddID0gcGFyZW50Q29udGV4dFsnJHJhd0RhdGEnXTtcbiAgICAgICAgICAgIGtvLnV0aWxzLmV4dGVuZChzZWxmLCB0eXBlb2YocHJvcGVydGllcykgPT0gXCJmdW5jdGlvblwiID8gcHJvcGVydGllcygpIDogcHJvcGVydGllcyk7XG4gICAgICAgIH0pO1xuICAgIH07XG5cbiAgICAvLyBSZXR1cm5zIHRoZSB2YWx1ZUFjY2Vzb3IgZnVuY3Rpb24gZm9yIGEgYmluZGluZyB2YWx1ZVxuICAgIGZ1bmN0aW9uIG1ha2VWYWx1ZUFjY2Vzc29yKHZhbHVlKSB7XG4gICAgICAgIHJldHVybiBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgIHJldHVybiB2YWx1ZTtcbiAgICAgICAgfTtcbiAgICB9XG5cbiAgICAvLyBSZXR1cm5zIHRoZSB2YWx1ZSBvZiBhIHZhbHVlQWNjZXNzb3IgZnVuY3Rpb25cbiAgICBmdW5jdGlvbiBldmFsdWF0ZVZhbHVlQWNjZXNzb3IodmFsdWVBY2Nlc3Nvcikge1xuICAgICAgICByZXR1cm4gdmFsdWVBY2Nlc3NvcigpO1xuICAgIH1cblxuICAgIC8vIEdpdmVuIGEgZnVuY3Rpb24gdGhhdCByZXR1cm5zIGJpbmRpbmdzLCBjcmVhdGUgYW5kIHJldHVybiBhIG5ldyBvYmplY3QgdGhhdCBjb250YWluc1xuICAgIC8vIGJpbmRpbmcgdmFsdWUtYWNjZXNzb3JzIGZ1bmN0aW9ucy4gRWFjaCBhY2Nlc3NvciBmdW5jdGlvbiBjYWxscyB0aGUgb3JpZ2luYWwgZnVuY3Rpb25cbiAgICAvLyBzbyB0aGF0IGl0IGFsd2F5cyBnZXRzIHRoZSBsYXRlc3QgdmFsdWUgYW5kIGFsbCBkZXBlbmRlbmNpZXMgYXJlIGNhcHR1cmVkLiBUaGlzIGlzIHVzZWRcbiAgICAvLyBieSBrby5hcHBseUJpbmRpbmdzVG9Ob2RlIGFuZCBnZXRCaW5kaW5nc0FuZE1ha2VBY2Nlc3NvcnMuXG4gICAgZnVuY3Rpb24gbWFrZUFjY2Vzc29yc0Zyb21GdW5jdGlvbihjYWxsYmFjaykge1xuICAgICAgICByZXR1cm4ga28udXRpbHMub2JqZWN0TWFwKGtvLmRlcGVuZGVuY3lEZXRlY3Rpb24uaWdub3JlKGNhbGxiYWNrKSwgZnVuY3Rpb24odmFsdWUsIGtleSkge1xuICAgICAgICAgICAgcmV0dXJuIGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgICAgIHJldHVybiBjYWxsYmFjaygpW2tleV07XG4gICAgICAgICAgICB9O1xuICAgICAgICB9KTtcbiAgICB9XG5cbiAgICAvLyBHaXZlbiBhIGJpbmRpbmdzIGZ1bmN0aW9uIG9yIG9iamVjdCwgY3JlYXRlIGFuZCByZXR1cm4gYSBuZXcgb2JqZWN0IHRoYXQgY29udGFpbnNcbiAgICAvLyBiaW5kaW5nIHZhbHVlLWFjY2Vzc29ycyBmdW5jdGlvbnMuIFRoaXMgaXMgdXNlZCBieSBrby5hcHBseUJpbmRpbmdzVG9Ob2RlLlxuICAgIGZ1bmN0aW9uIG1ha2VCaW5kaW5nQWNjZXNzb3JzKGJpbmRpbmdzLCBjb250ZXh0LCBub2RlKSB7XG4gICAgICAgIGlmICh0eXBlb2YgYmluZGluZ3MgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgICAgIHJldHVybiBtYWtlQWNjZXNzb3JzRnJvbUZ1bmN0aW9uKGJpbmRpbmdzLmJpbmQobnVsbCwgY29udGV4dCwgbm9kZSkpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgcmV0dXJuIGtvLnV0aWxzLm9iamVjdE1hcChiaW5kaW5ncywgbWFrZVZhbHVlQWNjZXNzb3IpO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgLy8gVGhpcyBmdW5jdGlvbiBpcyB1c2VkIGlmIHRoZSBiaW5kaW5nIHByb3ZpZGVyIGRvZXNuJ3QgaW5jbHVkZSBhIGdldEJpbmRpbmdBY2Nlc3NvcnMgZnVuY3Rpb24uXG4gICAgLy8gSXQgbXVzdCBiZSBjYWxsZWQgd2l0aCAndGhpcycgc2V0IHRvIHRoZSBwcm92aWRlciBpbnN0YW5jZS5cbiAgICBmdW5jdGlvbiBnZXRCaW5kaW5nc0FuZE1ha2VBY2Nlc3NvcnMobm9kZSwgY29udGV4dCkge1xuICAgICAgICByZXR1cm4gbWFrZUFjY2Vzc29yc0Zyb21GdW5jdGlvbih0aGlzWydnZXRCaW5kaW5ncyddLmJpbmQodGhpcywgbm9kZSwgY29udGV4dCkpO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIHZhbGlkYXRlVGhhdEJpbmRpbmdJc0FsbG93ZWRGb3JWaXJ0dWFsRWxlbWVudHMoYmluZGluZ05hbWUpIHtcbiAgICAgICAgdmFyIHZhbGlkYXRvciA9IGtvLnZpcnR1YWxFbGVtZW50cy5hbGxvd2VkQmluZGluZ3NbYmluZGluZ05hbWVdO1xuICAgICAgICBpZiAoIXZhbGlkYXRvcilcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihcIlRoZSBiaW5kaW5nICdcIiArIGJpbmRpbmdOYW1lICsgXCInIGNhbm5vdCBiZSB1c2VkIHdpdGggdmlydHVhbCBlbGVtZW50c1wiKVxuICAgIH1cblxuICAgIGZ1bmN0aW9uIGFwcGx5QmluZGluZ3NUb0Rlc2NlbmRhbnRzSW50ZXJuYWwgKGJpbmRpbmdDb250ZXh0LCBlbGVtZW50T3JWaXJ0dWFsRWxlbWVudCwgYmluZGluZ0NvbnRleHRzTWF5RGlmZmVyRnJvbURvbVBhcmVudEVsZW1lbnQpIHtcbiAgICAgICAgdmFyIGN1cnJlbnRDaGlsZCxcbiAgICAgICAgICAgIG5leHRJblF1ZXVlID0ga28udmlydHVhbEVsZW1lbnRzLmZpcnN0Q2hpbGQoZWxlbWVudE9yVmlydHVhbEVsZW1lbnQpLFxuICAgICAgICAgICAgcHJvdmlkZXIgPSBrby5iaW5kaW5nUHJvdmlkZXJbJ2luc3RhbmNlJ10sXG4gICAgICAgICAgICBwcmVwcm9jZXNzTm9kZSA9IHByb3ZpZGVyWydwcmVwcm9jZXNzTm9kZSddO1xuXG4gICAgICAgIC8vIFByZXByb2Nlc3NpbmcgYWxsb3dzIGEgYmluZGluZyBwcm92aWRlciB0byBtdXRhdGUgYSBub2RlIGJlZm9yZSBiaW5kaW5ncyBhcmUgYXBwbGllZCB0byBpdC4gRm9yIGV4YW1wbGUgaXQnc1xuICAgICAgICAvLyBwb3NzaWJsZSB0byBpbnNlcnQgbmV3IHNpYmxpbmdzIGFmdGVyIGl0LCBhbmQvb3IgcmVwbGFjZSB0aGUgbm9kZSB3aXRoIGEgZGlmZmVyZW50IG9uZS4gVGhpcyBjYW4gYmUgdXNlZCB0b1xuICAgICAgICAvLyBpbXBsZW1lbnQgY3VzdG9tIGJpbmRpbmcgc3ludGF4ZXMsIHN1Y2ggYXMge3sgdmFsdWUgfX0gZm9yIHN0cmluZyBpbnRlcnBvbGF0aW9uLCBvciBjdXN0b20gZWxlbWVudCB0eXBlcyB0aGF0XG4gICAgICAgIC8vIHRyaWdnZXIgaW5zZXJ0aW9uIG9mIDx0ZW1wbGF0ZT4gY29udGVudHMgYXQgdGhhdCBwb2ludCBpbiB0aGUgZG9jdW1lbnQuXG4gICAgICAgIGlmIChwcmVwcm9jZXNzTm9kZSkge1xuICAgICAgICAgICAgd2hpbGUgKGN1cnJlbnRDaGlsZCA9IG5leHRJblF1ZXVlKSB7XG4gICAgICAgICAgICAgICAgbmV4dEluUXVldWUgPSBrby52aXJ0dWFsRWxlbWVudHMubmV4dFNpYmxpbmcoY3VycmVudENoaWxkKTtcbiAgICAgICAgICAgICAgICBwcmVwcm9jZXNzTm9kZS5jYWxsKHByb3ZpZGVyLCBjdXJyZW50Q2hpbGQpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgLy8gUmVzZXQgbmV4dEluUXVldWUgZm9yIHRoZSBuZXh0IGxvb3BcbiAgICAgICAgICAgIG5leHRJblF1ZXVlID0ga28udmlydHVhbEVsZW1lbnRzLmZpcnN0Q2hpbGQoZWxlbWVudE9yVmlydHVhbEVsZW1lbnQpO1xuICAgICAgICB9XG5cbiAgICAgICAgd2hpbGUgKGN1cnJlbnRDaGlsZCA9IG5leHRJblF1ZXVlKSB7XG4gICAgICAgICAgICAvLyBLZWVwIGEgcmVjb3JkIG9mIHRoZSBuZXh0IGNoaWxkICpiZWZvcmUqIGFwcGx5aW5nIGJpbmRpbmdzLCBpbiBjYXNlIHRoZSBiaW5kaW5nIHJlbW92ZXMgdGhlIGN1cnJlbnQgY2hpbGQgZnJvbSBpdHMgcG9zaXRpb25cbiAgICAgICAgICAgIG5leHRJblF1ZXVlID0ga28udmlydHVhbEVsZW1lbnRzLm5leHRTaWJsaW5nKGN1cnJlbnRDaGlsZCk7XG4gICAgICAgICAgICBhcHBseUJpbmRpbmdzVG9Ob2RlQW5kRGVzY2VuZGFudHNJbnRlcm5hbChiaW5kaW5nQ29udGV4dCwgY3VycmVudENoaWxkLCBiaW5kaW5nQ29udGV4dHNNYXlEaWZmZXJGcm9tRG9tUGFyZW50RWxlbWVudCk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBmdW5jdGlvbiBhcHBseUJpbmRpbmdzVG9Ob2RlQW5kRGVzY2VuZGFudHNJbnRlcm5hbCAoYmluZGluZ0NvbnRleHQsIG5vZGVWZXJpZmllZCwgYmluZGluZ0NvbnRleHRNYXlEaWZmZXJGcm9tRG9tUGFyZW50RWxlbWVudCkge1xuICAgICAgICB2YXIgc2hvdWxkQmluZERlc2NlbmRhbnRzID0gdHJ1ZTtcblxuICAgICAgICAvLyBQZXJmIG9wdGltaXNhdGlvbjogQXBwbHkgYmluZGluZ3Mgb25seSBpZi4uLlxuICAgICAgICAvLyAoMSkgV2UgbmVlZCB0byBzdG9yZSB0aGUgYmluZGluZyBjb250ZXh0IG9uIHRoaXMgbm9kZSAoYmVjYXVzZSBpdCBtYXkgZGlmZmVyIGZyb20gdGhlIERPTSBwYXJlbnQgbm9kZSdzIGJpbmRpbmcgY29udGV4dClcbiAgICAgICAgLy8gICAgIE5vdGUgdGhhdCB3ZSBjYW4ndCBzdG9yZSBiaW5kaW5nIGNvbnRleHRzIG9uIG5vbi1lbGVtZW50cyAoZS5nLiwgdGV4dCBub2RlcyksIGFzIElFIGRvZXNuJ3QgYWxsb3cgZXhwYW5kbyBwcm9wZXJ0aWVzIGZvciB0aG9zZVxuICAgICAgICAvLyAoMikgSXQgbWlnaHQgaGF2ZSBiaW5kaW5ncyAoZS5nLiwgaXQgaGFzIGEgZGF0YS1iaW5kIGF0dHJpYnV0ZSwgb3IgaXQncyBhIG1hcmtlciBmb3IgYSBjb250YWluZXJsZXNzIHRlbXBsYXRlKVxuICAgICAgICB2YXIgaXNFbGVtZW50ID0gKG5vZGVWZXJpZmllZC5ub2RlVHlwZSA9PT0gMSk7XG4gICAgICAgIGlmIChpc0VsZW1lbnQpIC8vIFdvcmthcm91bmQgSUUgPD0gOCBIVE1MIHBhcnNpbmcgd2VpcmRuZXNzXG4gICAgICAgICAgICBrby52aXJ0dWFsRWxlbWVudHMubm9ybWFsaXNlVmlydHVhbEVsZW1lbnREb21TdHJ1Y3R1cmUobm9kZVZlcmlmaWVkKTtcblxuICAgICAgICB2YXIgc2hvdWxkQXBwbHlCaW5kaW5ncyA9IChpc0VsZW1lbnQgJiYgYmluZGluZ0NvbnRleHRNYXlEaWZmZXJGcm9tRG9tUGFyZW50RWxlbWVudCkgICAgICAgICAgICAgLy8gQ2FzZSAoMSlcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8fCBrby5iaW5kaW5nUHJvdmlkZXJbJ2luc3RhbmNlJ11bJ25vZGVIYXNCaW5kaW5ncyddKG5vZGVWZXJpZmllZCk7ICAgICAgIC8vIENhc2UgKDIpXG4gICAgICAgIGlmIChzaG91bGRBcHBseUJpbmRpbmdzKVxuICAgICAgICAgICAgc2hvdWxkQmluZERlc2NlbmRhbnRzID0gYXBwbHlCaW5kaW5nc1RvTm9kZUludGVybmFsKG5vZGVWZXJpZmllZCwgbnVsbCwgYmluZGluZ0NvbnRleHQsIGJpbmRpbmdDb250ZXh0TWF5RGlmZmVyRnJvbURvbVBhcmVudEVsZW1lbnQpWydzaG91bGRCaW5kRGVzY2VuZGFudHMnXTtcblxuICAgICAgICBpZiAoc2hvdWxkQmluZERlc2NlbmRhbnRzICYmICFiaW5kaW5nRG9lc05vdFJlY3Vyc2VJbnRvRWxlbWVudFR5cGVzW2tvLnV0aWxzLnRhZ05hbWVMb3dlcihub2RlVmVyaWZpZWQpXSkge1xuICAgICAgICAgICAgLy8gV2UncmUgcmVjdXJzaW5nIGF1dG9tYXRpY2FsbHkgaW50byAocmVhbCBvciB2aXJ0dWFsKSBjaGlsZCBub2RlcyB3aXRob3V0IGNoYW5naW5nIGJpbmRpbmcgY29udGV4dHMuIFNvLFxuICAgICAgICAgICAgLy8gICogRm9yIGNoaWxkcmVuIG9mIGEgKnJlYWwqIGVsZW1lbnQsIHRoZSBiaW5kaW5nIGNvbnRleHQgaXMgY2VydGFpbmx5IHRoZSBzYW1lIGFzIG9uIHRoZWlyIERPTSAucGFyZW50Tm9kZSxcbiAgICAgICAgICAgIC8vICAgIGhlbmNlIGJpbmRpbmdDb250ZXh0c01heURpZmZlckZyb21Eb21QYXJlbnRFbGVtZW50IGlzIGZhbHNlXG4gICAgICAgICAgICAvLyAgKiBGb3IgY2hpbGRyZW4gb2YgYSAqdmlydHVhbCogZWxlbWVudCwgd2UgY2FuJ3QgYmUgc3VyZS4gRXZhbHVhdGluZyAucGFyZW50Tm9kZSBvbiB0aG9zZSBjaGlsZHJlbiBtYXlcbiAgICAgICAgICAgIC8vICAgIHNraXAgb3ZlciBhbnkgbnVtYmVyIG9mIGludGVybWVkaWF0ZSB2aXJ0dWFsIGVsZW1lbnRzLCBhbnkgb2Ygd2hpY2ggbWlnaHQgZGVmaW5lIGEgY3VzdG9tIGJpbmRpbmcgY29udGV4dCxcbiAgICAgICAgICAgIC8vICAgIGhlbmNlIGJpbmRpbmdDb250ZXh0c01heURpZmZlckZyb21Eb21QYXJlbnRFbGVtZW50IGlzIHRydWVcbiAgICAgICAgICAgIGFwcGx5QmluZGluZ3NUb0Rlc2NlbmRhbnRzSW50ZXJuYWwoYmluZGluZ0NvbnRleHQsIG5vZGVWZXJpZmllZCwgLyogYmluZGluZ0NvbnRleHRzTWF5RGlmZmVyRnJvbURvbVBhcmVudEVsZW1lbnQ6ICovICFpc0VsZW1lbnQpO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgdmFyIGJvdW5kRWxlbWVudERvbURhdGFLZXkgPSBrby51dGlscy5kb21EYXRhLm5leHRLZXkoKTtcblxuXG4gICAgZnVuY3Rpb24gdG9wb2xvZ2ljYWxTb3J0QmluZGluZ3MoYmluZGluZ3MpIHtcbiAgICAgICAgLy8gRGVwdGgtZmlyc3Qgc29ydFxuICAgICAgICB2YXIgcmVzdWx0ID0gW10sICAgICAgICAgICAgICAgIC8vIFRoZSBsaXN0IG9mIGtleS9oYW5kbGVyIHBhaXJzIHRoYXQgd2Ugd2lsbCByZXR1cm5cbiAgICAgICAgICAgIGJpbmRpbmdzQ29uc2lkZXJlZCA9IHt9LCAgICAvLyBBIHRlbXBvcmFyeSByZWNvcmQgb2Ygd2hpY2ggYmluZGluZ3MgYXJlIGFscmVhZHkgaW4gJ3Jlc3VsdCdcbiAgICAgICAgICAgIGN5Y2xpY0RlcGVuZGVuY3lTdGFjayA9IFtdOyAvLyBLZWVwcyB0cmFjayBvZiBhIGRlcHRoLXNlYXJjaCBzbyB0aGF0LCBpZiB0aGVyZSdzIGEgY3ljbGUsIHdlIGtub3cgd2hpY2ggYmluZGluZ3MgY2F1c2VkIGl0XG4gICAgICAgIGtvLnV0aWxzLm9iamVjdEZvckVhY2goYmluZGluZ3MsIGZ1bmN0aW9uIHB1c2hCaW5kaW5nKGJpbmRpbmdLZXkpIHtcbiAgICAgICAgICAgIGlmICghYmluZGluZ3NDb25zaWRlcmVkW2JpbmRpbmdLZXldKSB7XG4gICAgICAgICAgICAgICAgdmFyIGJpbmRpbmcgPSBrb1snZ2V0QmluZGluZ0hhbmRsZXInXShiaW5kaW5nS2V5KTtcbiAgICAgICAgICAgICAgICBpZiAoYmluZGluZykge1xuICAgICAgICAgICAgICAgICAgICAvLyBGaXJzdCBhZGQgZGVwZW5kZW5jaWVzIChpZiBhbnkpIG9mIHRoZSBjdXJyZW50IGJpbmRpbmdcbiAgICAgICAgICAgICAgICAgICAgaWYgKGJpbmRpbmdbJ2FmdGVyJ10pIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGN5Y2xpY0RlcGVuZGVuY3lTdGFjay5wdXNoKGJpbmRpbmdLZXkpO1xuICAgICAgICAgICAgICAgICAgICAgICAga28udXRpbHMuYXJyYXlGb3JFYWNoKGJpbmRpbmdbJ2FmdGVyJ10sIGZ1bmN0aW9uKGJpbmRpbmdEZXBlbmRlbmN5S2V5KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGJpbmRpbmdzW2JpbmRpbmdEZXBlbmRlbmN5S2V5XSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoa28udXRpbHMuYXJyYXlJbmRleE9mKGN5Y2xpY0RlcGVuZGVuY3lTdGFjaywgYmluZGluZ0RlcGVuZGVuY3lLZXkpICE9PSAtMSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhyb3cgRXJyb3IoXCJDYW5ub3QgY29tYmluZSB0aGUgZm9sbG93aW5nIGJpbmRpbmdzLCBiZWNhdXNlIHRoZXkgaGF2ZSBhIGN5Y2xpYyBkZXBlbmRlbmN5OiBcIiArIGN5Y2xpY0RlcGVuZGVuY3lTdGFjay5qb2luKFwiLCBcIikpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcHVzaEJpbmRpbmcoYmluZGluZ0RlcGVuZGVuY3lLZXkpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgICAgICAgICBjeWNsaWNEZXBlbmRlbmN5U3RhY2subGVuZ3RoLS07XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgLy8gTmV4dCBhZGQgdGhlIGN1cnJlbnQgYmluZGluZ1xuICAgICAgICAgICAgICAgICAgICByZXN1bHQucHVzaCh7IGtleTogYmluZGluZ0tleSwgaGFuZGxlcjogYmluZGluZyB9KTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgYmluZGluZ3NDb25zaWRlcmVkW2JpbmRpbmdLZXldID0gdHJ1ZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSk7XG5cbiAgICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBhcHBseUJpbmRpbmdzVG9Ob2RlSW50ZXJuYWwobm9kZSwgc291cmNlQmluZGluZ3MsIGJpbmRpbmdDb250ZXh0LCBiaW5kaW5nQ29udGV4dE1heURpZmZlckZyb21Eb21QYXJlbnRFbGVtZW50KSB7XG4gICAgICAgIC8vIFByZXZlbnQgbXVsdGlwbGUgYXBwbHlCaW5kaW5ncyBjYWxscyBmb3IgdGhlIHNhbWUgbm9kZSwgZXhjZXB0IHdoZW4gYSBiaW5kaW5nIHZhbHVlIGlzIHNwZWNpZmllZFxuICAgICAgICB2YXIgYWxyZWFkeUJvdW5kID0ga28udXRpbHMuZG9tRGF0YS5nZXQobm9kZSwgYm91bmRFbGVtZW50RG9tRGF0YUtleSk7XG4gICAgICAgIGlmICghc291cmNlQmluZGluZ3MpIHtcbiAgICAgICAgICAgIGlmIChhbHJlYWR5Qm91bmQpIHtcbiAgICAgICAgICAgICAgICB0aHJvdyBFcnJvcihcIllvdSBjYW5ub3QgYXBwbHkgYmluZGluZ3MgbXVsdGlwbGUgdGltZXMgdG8gdGhlIHNhbWUgZWxlbWVudC5cIik7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBrby51dGlscy5kb21EYXRhLnNldChub2RlLCBib3VuZEVsZW1lbnREb21EYXRhS2V5LCB0cnVlKTtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIE9wdGltaXphdGlvbjogRG9uJ3Qgc3RvcmUgdGhlIGJpbmRpbmcgY29udGV4dCBvbiB0aGlzIG5vZGUgaWYgaXQncyBkZWZpbml0ZWx5IHRoZSBzYW1lIGFzIG9uIG5vZGUucGFyZW50Tm9kZSwgYmVjYXVzZVxuICAgICAgICAvLyB3ZSBjYW4gZWFzaWx5IHJlY292ZXIgaXQganVzdCBieSBzY2FubmluZyB1cCB0aGUgbm9kZSdzIGFuY2VzdG9ycyBpbiB0aGUgRE9NXG4gICAgICAgIC8vIChub3RlOiBoZXJlLCBwYXJlbnQgbm9kZSBtZWFucyBcInJlYWwgRE9NIHBhcmVudFwiIG5vdCBcInZpcnR1YWwgcGFyZW50XCIsIGFzIHRoZXJlJ3Mgbm8gTygxKSB3YXkgdG8gZmluZCB0aGUgdmlydHVhbCBwYXJlbnQpXG4gICAgICAgIGlmICghYWxyZWFkeUJvdW5kICYmIGJpbmRpbmdDb250ZXh0TWF5RGlmZmVyRnJvbURvbVBhcmVudEVsZW1lbnQpXG4gICAgICAgICAgICBrby5zdG9yZWRCaW5kaW5nQ29udGV4dEZvck5vZGUobm9kZSwgYmluZGluZ0NvbnRleHQpO1xuXG4gICAgICAgIC8vIFVzZSBiaW5kaW5ncyBpZiBnaXZlbiwgb3RoZXJ3aXNlIGZhbGwgYmFjayBvbiBhc2tpbmcgdGhlIGJpbmRpbmdzIHByb3ZpZGVyIHRvIGdpdmUgdXMgc29tZSBiaW5kaW5nc1xuICAgICAgICB2YXIgYmluZGluZ3M7XG4gICAgICAgIGlmIChzb3VyY2VCaW5kaW5ncyAmJiB0eXBlb2Ygc291cmNlQmluZGluZ3MgIT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgICAgIGJpbmRpbmdzID0gc291cmNlQmluZGluZ3M7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICB2YXIgcHJvdmlkZXIgPSBrby5iaW5kaW5nUHJvdmlkZXJbJ2luc3RhbmNlJ10sXG4gICAgICAgICAgICAgICAgZ2V0QmluZGluZ3MgPSBwcm92aWRlclsnZ2V0QmluZGluZ0FjY2Vzc29ycyddIHx8IGdldEJpbmRpbmdzQW5kTWFrZUFjY2Vzc29ycztcblxuICAgICAgICAgICAgLy8gR2V0IHRoZSBiaW5kaW5nIGZyb20gdGhlIHByb3ZpZGVyIHdpdGhpbiBhIGNvbXB1dGVkIG9ic2VydmFibGUgc28gdGhhdCB3ZSBjYW4gdXBkYXRlIHRoZSBiaW5kaW5ncyB3aGVuZXZlclxuICAgICAgICAgICAgLy8gdGhlIGJpbmRpbmcgY29udGV4dCBpcyB1cGRhdGVkIG9yIGlmIHRoZSBiaW5kaW5nIHByb3ZpZGVyIGFjY2Vzc2VzIG9ic2VydmFibGVzLlxuICAgICAgICAgICAgdmFyIGJpbmRpbmdzVXBkYXRlciA9IGtvLmRlcGVuZGVudE9ic2VydmFibGUoXG4gICAgICAgICAgICAgICAgZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAgICAgICAgIGJpbmRpbmdzID0gc291cmNlQmluZGluZ3MgPyBzb3VyY2VCaW5kaW5ncyhiaW5kaW5nQ29udGV4dCwgbm9kZSkgOiBnZXRCaW5kaW5ncy5jYWxsKHByb3ZpZGVyLCBub2RlLCBiaW5kaW5nQ29udGV4dCk7XG4gICAgICAgICAgICAgICAgICAgIC8vIFJlZ2lzdGVyIGEgZGVwZW5kZW5jeSBvbiB0aGUgYmluZGluZyBjb250ZXh0IHRvIHN1cHBvcnQgb2JzZXJ2YWJsZSB2aWV3IG1vZGVscy5cbiAgICAgICAgICAgICAgICAgICAgaWYgKGJpbmRpbmdzICYmIGJpbmRpbmdDb250ZXh0Ll9zdWJzY3JpYmFibGUpXG4gICAgICAgICAgICAgICAgICAgICAgICBiaW5kaW5nQ29udGV4dC5fc3Vic2NyaWJhYmxlKCk7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBiaW5kaW5ncztcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIG51bGwsIHsgZGlzcG9zZVdoZW5Ob2RlSXNSZW1vdmVkOiBub2RlIH1cbiAgICAgICAgICAgICk7XG5cbiAgICAgICAgICAgIGlmICghYmluZGluZ3MgfHwgIWJpbmRpbmdzVXBkYXRlci5pc0FjdGl2ZSgpKVxuICAgICAgICAgICAgICAgIGJpbmRpbmdzVXBkYXRlciA9IG51bGw7XG4gICAgICAgIH1cblxuICAgICAgICB2YXIgYmluZGluZ0hhbmRsZXJUaGF0Q29udHJvbHNEZXNjZW5kYW50QmluZGluZ3M7XG4gICAgICAgIGlmIChiaW5kaW5ncykge1xuICAgICAgICAgICAgLy8gUmV0dXJuIHRoZSB2YWx1ZSBhY2Nlc3NvciBmb3IgYSBnaXZlbiBiaW5kaW5nLiBXaGVuIGJpbmRpbmdzIGFyZSBzdGF0aWMgKHdvbid0IGJlIHVwZGF0ZWQgYmVjYXVzZSBvZiBhIGJpbmRpbmdcbiAgICAgICAgICAgIC8vIGNvbnRleHQgdXBkYXRlKSwganVzdCByZXR1cm4gdGhlIHZhbHVlIGFjY2Vzc29yIGZyb20gdGhlIGJpbmRpbmcuIE90aGVyd2lzZSwgcmV0dXJuIGEgZnVuY3Rpb24gdGhhdCBhbHdheXMgZ2V0c1xuICAgICAgICAgICAgLy8gdGhlIGxhdGVzdCBiaW5kaW5nIHZhbHVlIGFuZCByZWdpc3RlcnMgYSBkZXBlbmRlbmN5IG9uIHRoZSBiaW5kaW5nIHVwZGF0ZXIuXG4gICAgICAgICAgICB2YXIgZ2V0VmFsdWVBY2Nlc3NvciA9IGJpbmRpbmdzVXBkYXRlclxuICAgICAgICAgICAgICAgID8gZnVuY3Rpb24oYmluZGluZ0tleSkge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gZXZhbHVhdGVWYWx1ZUFjY2Vzc29yKGJpbmRpbmdzVXBkYXRlcigpW2JpbmRpbmdLZXldKTtcbiAgICAgICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICAgICB9IDogZnVuY3Rpb24oYmluZGluZ0tleSkge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gYmluZGluZ3NbYmluZGluZ0tleV07XG4gICAgICAgICAgICAgICAgfTtcblxuICAgICAgICAgICAgLy8gVXNlIG9mIGFsbEJpbmRpbmdzIGFzIGEgZnVuY3Rpb24gaXMgbWFpbnRhaW5lZCBmb3IgYmFja3dhcmRzIGNvbXBhdGliaWxpdHksIGJ1dCBpdHMgdXNlIGlzIGRlcHJlY2F0ZWRcbiAgICAgICAgICAgIGZ1bmN0aW9uIGFsbEJpbmRpbmdzKCkge1xuICAgICAgICAgICAgICAgIHJldHVybiBrby51dGlscy5vYmplY3RNYXAoYmluZGluZ3NVcGRhdGVyID8gYmluZGluZ3NVcGRhdGVyKCkgOiBiaW5kaW5ncywgZXZhbHVhdGVWYWx1ZUFjY2Vzc29yKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIC8vIFRoZSBmb2xsb3dpbmcgaXMgdGhlIDMueCBhbGxCaW5kaW5ncyBBUElcbiAgICAgICAgICAgIGFsbEJpbmRpbmdzWydnZXQnXSA9IGZ1bmN0aW9uKGtleSkge1xuICAgICAgICAgICAgICAgIHJldHVybiBiaW5kaW5nc1trZXldICYmIGV2YWx1YXRlVmFsdWVBY2Nlc3NvcihnZXRWYWx1ZUFjY2Vzc29yKGtleSkpO1xuICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIGFsbEJpbmRpbmdzWydoYXMnXSA9IGZ1bmN0aW9uKGtleSkge1xuICAgICAgICAgICAgICAgIHJldHVybiBrZXkgaW4gYmluZGluZ3M7XG4gICAgICAgICAgICB9O1xuXG4gICAgICAgICAgICAvLyBGaXJzdCBwdXQgdGhlIGJpbmRpbmdzIGludG8gdGhlIHJpZ2h0IG9yZGVyXG4gICAgICAgICAgICB2YXIgb3JkZXJlZEJpbmRpbmdzID0gdG9wb2xvZ2ljYWxTb3J0QmluZGluZ3MoYmluZGluZ3MpO1xuXG4gICAgICAgICAgICAvLyBHbyB0aHJvdWdoIHRoZSBzb3J0ZWQgYmluZGluZ3MsIGNhbGxpbmcgaW5pdCBhbmQgdXBkYXRlIGZvciBlYWNoXG4gICAgICAgICAgICBrby51dGlscy5hcnJheUZvckVhY2gob3JkZXJlZEJpbmRpbmdzLCBmdW5jdGlvbihiaW5kaW5nS2V5QW5kSGFuZGxlcikge1xuICAgICAgICAgICAgICAgIC8vIE5vdGUgdGhhdCB0b3BvbG9naWNhbFNvcnRCaW5kaW5ncyBoYXMgYWxyZWFkeSBmaWx0ZXJlZCBvdXQgYW55IG5vbmV4aXN0ZW50IGJpbmRpbmcgaGFuZGxlcnMsXG4gICAgICAgICAgICAgICAgLy8gc28gYmluZGluZ0tleUFuZEhhbmRsZXIuaGFuZGxlciB3aWxsIGFsd2F5cyBiZSBub25udWxsLlxuICAgICAgICAgICAgICAgIHZhciBoYW5kbGVySW5pdEZuID0gYmluZGluZ0tleUFuZEhhbmRsZXIuaGFuZGxlcltcImluaXRcIl0sXG4gICAgICAgICAgICAgICAgICAgIGhhbmRsZXJVcGRhdGVGbiA9IGJpbmRpbmdLZXlBbmRIYW5kbGVyLmhhbmRsZXJbXCJ1cGRhdGVcIl0sXG4gICAgICAgICAgICAgICAgICAgIGJpbmRpbmdLZXkgPSBiaW5kaW5nS2V5QW5kSGFuZGxlci5rZXk7XG5cbiAgICAgICAgICAgICAgICBpZiAobm9kZS5ub2RlVHlwZSA9PT0gOCkge1xuICAgICAgICAgICAgICAgICAgICB2YWxpZGF0ZVRoYXRCaW5kaW5nSXNBbGxvd2VkRm9yVmlydHVhbEVsZW1lbnRzKGJpbmRpbmdLZXkpO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgICAgIC8vIFJ1biBpbml0LCBpZ25vcmluZyBhbnkgZGVwZW5kZW5jaWVzXG4gICAgICAgICAgICAgICAgICAgIGlmICh0eXBlb2YgaGFuZGxlckluaXRGbiA9PSBcImZ1bmN0aW9uXCIpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGtvLmRlcGVuZGVuY3lEZXRlY3Rpb24uaWdub3JlKGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBpbml0UmVzdWx0ID0gaGFuZGxlckluaXRGbihub2RlLCBnZXRWYWx1ZUFjY2Vzc29yKGJpbmRpbmdLZXkpLCBhbGxCaW5kaW5ncywgYmluZGluZ0NvbnRleHRbJyRkYXRhJ10sIGJpbmRpbmdDb250ZXh0KTtcblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIElmIHRoaXMgYmluZGluZyBoYW5kbGVyIGNsYWltcyB0byBjb250cm9sIGRlc2NlbmRhbnQgYmluZGluZ3MsIG1ha2UgYSBub3RlIG9mIHRoaXNcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoaW5pdFJlc3VsdCAmJiBpbml0UmVzdWx0Wydjb250cm9sc0Rlc2NlbmRhbnRCaW5kaW5ncyddKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChiaW5kaW5nSGFuZGxlclRoYXRDb250cm9sc0Rlc2NlbmRhbnRCaW5kaW5ncyAhPT0gdW5kZWZpbmVkKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiTXVsdGlwbGUgYmluZGluZ3MgKFwiICsgYmluZGluZ0hhbmRsZXJUaGF0Q29udHJvbHNEZXNjZW5kYW50QmluZGluZ3MgKyBcIiBhbmQgXCIgKyBiaW5kaW5nS2V5ICsgXCIpIGFyZSB0cnlpbmcgdG8gY29udHJvbCBkZXNjZW5kYW50IGJpbmRpbmdzIG9mIHRoZSBzYW1lIGVsZW1lbnQuIFlvdSBjYW5ub3QgdXNlIHRoZXNlIGJpbmRpbmdzIHRvZ2V0aGVyIG9uIHRoZSBzYW1lIGVsZW1lbnQuXCIpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBiaW5kaW5nSGFuZGxlclRoYXRDb250cm9sc0Rlc2NlbmRhbnRCaW5kaW5ncyA9IGJpbmRpbmdLZXk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICAvLyBSdW4gdXBkYXRlIGluIGl0cyBvd24gY29tcHV0ZWQgd3JhcHBlclxuICAgICAgICAgICAgICAgICAgICBpZiAodHlwZW9mIGhhbmRsZXJVcGRhdGVGbiA9PSBcImZ1bmN0aW9uXCIpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGtvLmRlcGVuZGVudE9ic2VydmFibGUoXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGhhbmRsZXJVcGRhdGVGbihub2RlLCBnZXRWYWx1ZUFjY2Vzc29yKGJpbmRpbmdLZXkpLCBhbGxCaW5kaW5ncywgYmluZGluZ0NvbnRleHRbJyRkYXRhJ10sIGJpbmRpbmdDb250ZXh0KTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG51bGwsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgeyBkaXNwb3NlV2hlbk5vZGVJc1JlbW92ZWQ6IG5vZGUgfVxuICAgICAgICAgICAgICAgICAgICAgICAgKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH0gY2F0Y2ggKGV4KSB7XG4gICAgICAgICAgICAgICAgICAgIGV4Lm1lc3NhZ2UgPSBcIlVuYWJsZSB0byBwcm9jZXNzIGJpbmRpbmcgXFxcIlwiICsgYmluZGluZ0tleSArIFwiOiBcIiArIGJpbmRpbmdzW2JpbmRpbmdLZXldICsgXCJcXFwiXFxuTWVzc2FnZTogXCIgKyBleC5tZXNzYWdlO1xuICAgICAgICAgICAgICAgICAgICB0aHJvdyBleDtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICAnc2hvdWxkQmluZERlc2NlbmRhbnRzJzogYmluZGluZ0hhbmRsZXJUaGF0Q29udHJvbHNEZXNjZW5kYW50QmluZGluZ3MgPT09IHVuZGVmaW5lZFxuICAgICAgICB9O1xuICAgIH07XG5cbiAgICB2YXIgc3RvcmVkQmluZGluZ0NvbnRleHREb21EYXRhS2V5ID0ga28udXRpbHMuZG9tRGF0YS5uZXh0S2V5KCk7XG4gICAga28uc3RvcmVkQmluZGluZ0NvbnRleHRGb3JOb2RlID0gZnVuY3Rpb24gKG5vZGUsIGJpbmRpbmdDb250ZXh0KSB7XG4gICAgICAgIGlmIChhcmd1bWVudHMubGVuZ3RoID09IDIpIHtcbiAgICAgICAgICAgIGtvLnV0aWxzLmRvbURhdGEuc2V0KG5vZGUsIHN0b3JlZEJpbmRpbmdDb250ZXh0RG9tRGF0YUtleSwgYmluZGluZ0NvbnRleHQpO1xuICAgICAgICAgICAgaWYgKGJpbmRpbmdDb250ZXh0Ll9zdWJzY3JpYmFibGUpXG4gICAgICAgICAgICAgICAgYmluZGluZ0NvbnRleHQuX3N1YnNjcmliYWJsZS5fYWRkTm9kZShub2RlKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHJldHVybiBrby51dGlscy5kb21EYXRhLmdldChub2RlLCBzdG9yZWRCaW5kaW5nQ29udGV4dERvbURhdGFLZXkpO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gZ2V0QmluZGluZ0NvbnRleHQodmlld01vZGVsT3JCaW5kaW5nQ29udGV4dCkge1xuICAgICAgICByZXR1cm4gdmlld01vZGVsT3JCaW5kaW5nQ29udGV4dCAmJiAodmlld01vZGVsT3JCaW5kaW5nQ29udGV4dCBpbnN0YW5jZW9mIGtvLmJpbmRpbmdDb250ZXh0KVxuICAgICAgICAgICAgPyB2aWV3TW9kZWxPckJpbmRpbmdDb250ZXh0XG4gICAgICAgICAgICA6IG5ldyBrby5iaW5kaW5nQ29udGV4dCh2aWV3TW9kZWxPckJpbmRpbmdDb250ZXh0KTtcbiAgICB9XG5cbiAgICBrby5hcHBseUJpbmRpbmdBY2Nlc3NvcnNUb05vZGUgPSBmdW5jdGlvbiAobm9kZSwgYmluZGluZ3MsIHZpZXdNb2RlbE9yQmluZGluZ0NvbnRleHQpIHtcbiAgICAgICAgaWYgKG5vZGUubm9kZVR5cGUgPT09IDEpIC8vIElmIGl0J3MgYW4gZWxlbWVudCwgd29ya2Fyb3VuZCBJRSA8PSA4IEhUTUwgcGFyc2luZyB3ZWlyZG5lc3NcbiAgICAgICAgICAgIGtvLnZpcnR1YWxFbGVtZW50cy5ub3JtYWxpc2VWaXJ0dWFsRWxlbWVudERvbVN0cnVjdHVyZShub2RlKTtcbiAgICAgICAgcmV0dXJuIGFwcGx5QmluZGluZ3NUb05vZGVJbnRlcm5hbChub2RlLCBiaW5kaW5ncywgZ2V0QmluZGluZ0NvbnRleHQodmlld01vZGVsT3JCaW5kaW5nQ29udGV4dCksIHRydWUpO1xuICAgIH07XG5cbiAgICBrby5hcHBseUJpbmRpbmdzVG9Ob2RlID0gZnVuY3Rpb24gKG5vZGUsIGJpbmRpbmdzLCB2aWV3TW9kZWxPckJpbmRpbmdDb250ZXh0KSB7XG4gICAgICAgIHZhciBjb250ZXh0ID0gZ2V0QmluZGluZ0NvbnRleHQodmlld01vZGVsT3JCaW5kaW5nQ29udGV4dCk7XG4gICAgICAgIHJldHVybiBrby5hcHBseUJpbmRpbmdBY2Nlc3NvcnNUb05vZGUobm9kZSwgbWFrZUJpbmRpbmdBY2Nlc3NvcnMoYmluZGluZ3MsIGNvbnRleHQsIG5vZGUpLCBjb250ZXh0KTtcbiAgICB9O1xuXG4gICAga28uYXBwbHlCaW5kaW5nc1RvRGVzY2VuZGFudHMgPSBmdW5jdGlvbih2aWV3TW9kZWxPckJpbmRpbmdDb250ZXh0LCByb290Tm9kZSkge1xuICAgICAgICBpZiAocm9vdE5vZGUubm9kZVR5cGUgPT09IDEgfHwgcm9vdE5vZGUubm9kZVR5cGUgPT09IDgpXG4gICAgICAgICAgICBhcHBseUJpbmRpbmdzVG9EZXNjZW5kYW50c0ludGVybmFsKGdldEJpbmRpbmdDb250ZXh0KHZpZXdNb2RlbE9yQmluZGluZ0NvbnRleHQpLCByb290Tm9kZSwgdHJ1ZSk7XG4gICAgfTtcblxuICAgIGtvLmFwcGx5QmluZGluZ3MgPSBmdW5jdGlvbiAodmlld01vZGVsT3JCaW5kaW5nQ29udGV4dCwgcm9vdE5vZGUpIHtcbiAgICAgICAgLy8gSWYgalF1ZXJ5IGlzIGxvYWRlZCBhZnRlciBLbm9ja291dCwgd2Ugd29uJ3QgaW5pdGlhbGx5IGhhdmUgYWNjZXNzIHRvIGl0LiBTbyBzYXZlIGl0IGhlcmUuXG4gICAgICAgIGlmICghalF1ZXJ5SW5zdGFuY2UgJiYgd2luZG93WydqUXVlcnknXSkge1xuICAgICAgICAgICAgalF1ZXJ5SW5zdGFuY2UgPSB3aW5kb3dbJ2pRdWVyeSddO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKHJvb3ROb2RlICYmIChyb290Tm9kZS5ub2RlVHlwZSAhPT0gMSkgJiYgKHJvb3ROb2RlLm5vZGVUeXBlICE9PSA4KSlcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihcImtvLmFwcGx5QmluZGluZ3M6IGZpcnN0IHBhcmFtZXRlciBzaG91bGQgYmUgeW91ciB2aWV3IG1vZGVsOyBzZWNvbmQgcGFyYW1ldGVyIHNob3VsZCBiZSBhIERPTSBub2RlXCIpO1xuICAgICAgICByb290Tm9kZSA9IHJvb3ROb2RlIHx8IHdpbmRvdy5kb2N1bWVudC5ib2R5OyAvLyBNYWtlIFwicm9vdE5vZGVcIiBwYXJhbWV0ZXIgb3B0aW9uYWxcblxuICAgICAgICBhcHBseUJpbmRpbmdzVG9Ob2RlQW5kRGVzY2VuZGFudHNJbnRlcm5hbChnZXRCaW5kaW5nQ29udGV4dCh2aWV3TW9kZWxPckJpbmRpbmdDb250ZXh0KSwgcm9vdE5vZGUsIHRydWUpO1xuICAgIH07XG5cbiAgICAvLyBSZXRyaWV2aW5nIGJpbmRpbmcgY29udGV4dCBmcm9tIGFyYml0cmFyeSBub2Rlc1xuICAgIGtvLmNvbnRleHRGb3IgPSBmdW5jdGlvbihub2RlKSB7XG4gICAgICAgIC8vIFdlIGNhbiBvbmx5IGRvIHNvbWV0aGluZyBtZWFuaW5nZnVsIGZvciBlbGVtZW50cyBhbmQgY29tbWVudCBub2RlcyAoaW4gcGFydGljdWxhciwgbm90IHRleHQgbm9kZXMsIGFzIElFIGNhbid0IHN0b3JlIGRvbWRhdGEgZm9yIHRoZW0pXG4gICAgICAgIHN3aXRjaCAobm9kZS5ub2RlVHlwZSkge1xuICAgICAgICAgICAgY2FzZSAxOlxuICAgICAgICAgICAgY2FzZSA4OlxuICAgICAgICAgICAgICAgIHZhciBjb250ZXh0ID0ga28uc3RvcmVkQmluZGluZ0NvbnRleHRGb3JOb2RlKG5vZGUpO1xuICAgICAgICAgICAgICAgIGlmIChjb250ZXh0KSByZXR1cm4gY29udGV4dDtcbiAgICAgICAgICAgICAgICBpZiAobm9kZS5wYXJlbnROb2RlKSByZXR1cm4ga28uY29udGV4dEZvcihub2RlLnBhcmVudE5vZGUpO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB1bmRlZmluZWQ7XG4gICAgfTtcbiAgICBrby5kYXRhRm9yID0gZnVuY3Rpb24obm9kZSkge1xuICAgICAgICB2YXIgY29udGV4dCA9IGtvLmNvbnRleHRGb3Iobm9kZSk7XG4gICAgICAgIHJldHVybiBjb250ZXh0ID8gY29udGV4dFsnJGRhdGEnXSA6IHVuZGVmaW5lZDtcbiAgICB9O1xuXG4gICAga28uZXhwb3J0U3ltYm9sKCdiaW5kaW5nSGFuZGxlcnMnLCBrby5iaW5kaW5nSGFuZGxlcnMpO1xuICAgIGtvLmV4cG9ydFN5bWJvbCgnYXBwbHlCaW5kaW5ncycsIGtvLmFwcGx5QmluZGluZ3MpO1xuICAgIGtvLmV4cG9ydFN5bWJvbCgnYXBwbHlCaW5kaW5nc1RvRGVzY2VuZGFudHMnLCBrby5hcHBseUJpbmRpbmdzVG9EZXNjZW5kYW50cyk7XG4gICAga28uZXhwb3J0U3ltYm9sKCdhcHBseUJpbmRpbmdBY2Nlc3NvcnNUb05vZGUnLCBrby5hcHBseUJpbmRpbmdBY2Nlc3NvcnNUb05vZGUpO1xuICAgIGtvLmV4cG9ydFN5bWJvbCgnYXBwbHlCaW5kaW5nc1RvTm9kZScsIGtvLmFwcGx5QmluZGluZ3NUb05vZGUpO1xuICAgIGtvLmV4cG9ydFN5bWJvbCgnY29udGV4dEZvcicsIGtvLmNvbnRleHRGb3IpO1xuICAgIGtvLmV4cG9ydFN5bWJvbCgnZGF0YUZvcicsIGtvLmRhdGFGb3IpO1xufSkoKTtcbihmdW5jdGlvbih1bmRlZmluZWQpIHtcbiAgICB2YXIgbG9hZGluZ1N1YnNjcmliYWJsZXNDYWNoZSA9IHt9LCAvLyBUcmFja3MgY29tcG9uZW50IGxvYWRzIHRoYXQgYXJlIGN1cnJlbnRseSBpbiBmbGlnaHRcbiAgICAgICAgbG9hZGVkRGVmaW5pdGlvbnNDYWNoZSA9IHt9OyAgICAvLyBUcmFja3MgY29tcG9uZW50IGxvYWRzIHRoYXQgaGF2ZSBhbHJlYWR5IGNvbXBsZXRlZFxuXG4gICAga28uY29tcG9uZW50cyA9IHtcbiAgICAgICAgZ2V0OiBmdW5jdGlvbihjb21wb25lbnROYW1lLCBjYWxsYmFjaykge1xuICAgICAgICAgICAgdmFyIGNhY2hlZERlZmluaXRpb24gPSBnZXRPYmplY3RPd25Qcm9wZXJ0eShsb2FkZWREZWZpbml0aW9uc0NhY2hlLCBjb21wb25lbnROYW1lKTtcbiAgICAgICAgICAgIGlmIChjYWNoZWREZWZpbml0aW9uKSB7XG4gICAgICAgICAgICAgICAgLy8gSXQncyBhbHJlYWR5IGxvYWRlZCBhbmQgY2FjaGVkLiBSZXVzZSB0aGUgc2FtZSBkZWZpbml0aW9uIG9iamVjdC5cbiAgICAgICAgICAgICAgICAvLyBOb3RlIHRoYXQgZm9yIEFQSSBjb25zaXN0ZW5jeSwgZXZlbiBjYWNoZSBoaXRzIGNvbXBsZXRlIGFzeW5jaHJvbm91c2x5IGJ5IGRlZmF1bHQuXG4gICAgICAgICAgICAgICAgLy8gWW91IGNhbiBieXBhc3MgdGhpcyBieSBwdXR0aW5nIHN5bmNocm9ub3VzOnRydWUgb24geW91ciBjb21wb25lbnQgY29uZmlnLlxuICAgICAgICAgICAgICAgIGlmIChjYWNoZWREZWZpbml0aW9uLmlzU3luY2hyb25vdXNDb21wb25lbnQpIHtcbiAgICAgICAgICAgICAgICAgICAga28uZGVwZW5kZW5jeURldGVjdGlvbi5pZ25vcmUoZnVuY3Rpb24oKSB7IC8vIFNlZSBjb21tZW50IGluIGxvYWRlclJlZ2lzdHJ5QmVoYXZpb3JzLmpzIGZvciByZWFzb25pbmdcbiAgICAgICAgICAgICAgICAgICAgICAgIGNhbGxiYWNrKGNhY2hlZERlZmluaXRpb24uZGVmaW5pdGlvbik7XG4gICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIGtvLnRhc2tzLnNjaGVkdWxlKGZ1bmN0aW9uKCkgeyBjYWxsYmFjayhjYWNoZWREZWZpbml0aW9uLmRlZmluaXRpb24pOyB9KTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIC8vIEpvaW4gdGhlIGxvYWRpbmcgcHJvY2VzcyB0aGF0IGlzIGFscmVhZHkgdW5kZXJ3YXksIG9yIHN0YXJ0IGEgbmV3IG9uZS5cbiAgICAgICAgICAgICAgICBsb2FkQ29tcG9uZW50QW5kTm90aWZ5KGNvbXBvbmVudE5hbWUsIGNhbGxiYWNrKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSxcblxuICAgICAgICBjbGVhckNhY2hlZERlZmluaXRpb246IGZ1bmN0aW9uKGNvbXBvbmVudE5hbWUpIHtcbiAgICAgICAgICAgIGRlbGV0ZSBsb2FkZWREZWZpbml0aW9uc0NhY2hlW2NvbXBvbmVudE5hbWVdO1xuICAgICAgICB9LFxuXG4gICAgICAgIF9nZXRGaXJzdFJlc3VsdEZyb21Mb2FkZXJzOiBnZXRGaXJzdFJlc3VsdEZyb21Mb2FkZXJzXG4gICAgfTtcblxuICAgIGZ1bmN0aW9uIGdldE9iamVjdE93blByb3BlcnR5KG9iaiwgcHJvcE5hbWUpIHtcbiAgICAgICAgcmV0dXJuIG9iai5oYXNPd25Qcm9wZXJ0eShwcm9wTmFtZSkgPyBvYmpbcHJvcE5hbWVdIDogdW5kZWZpbmVkO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGxvYWRDb21wb25lbnRBbmROb3RpZnkoY29tcG9uZW50TmFtZSwgY2FsbGJhY2spIHtcbiAgICAgICAgdmFyIHN1YnNjcmliYWJsZSA9IGdldE9iamVjdE93blByb3BlcnR5KGxvYWRpbmdTdWJzY3JpYmFibGVzQ2FjaGUsIGNvbXBvbmVudE5hbWUpLFxuICAgICAgICAgICAgY29tcGxldGVkQXN5bmM7XG4gICAgICAgIGlmICghc3Vic2NyaWJhYmxlKSB7XG4gICAgICAgICAgICAvLyBJdCdzIG5vdCBzdGFydGVkIGxvYWRpbmcgeWV0LiBTdGFydCBsb2FkaW5nLCBhbmQgd2hlbiBpdCdzIGRvbmUsIG1vdmUgaXQgdG8gbG9hZGVkRGVmaW5pdGlvbnNDYWNoZS5cbiAgICAgICAgICAgIHN1YnNjcmliYWJsZSA9IGxvYWRpbmdTdWJzY3JpYmFibGVzQ2FjaGVbY29tcG9uZW50TmFtZV0gPSBuZXcga28uc3Vic2NyaWJhYmxlKCk7XG4gICAgICAgICAgICBzdWJzY3JpYmFibGUuc3Vic2NyaWJlKGNhbGxiYWNrKTtcblxuICAgICAgICAgICAgYmVnaW5Mb2FkaW5nQ29tcG9uZW50KGNvbXBvbmVudE5hbWUsIGZ1bmN0aW9uKGRlZmluaXRpb24sIGNvbmZpZykge1xuICAgICAgICAgICAgICAgIHZhciBpc1N5bmNocm9ub3VzQ29tcG9uZW50ID0gISEoY29uZmlnICYmIGNvbmZpZ1snc3luY2hyb25vdXMnXSk7XG4gICAgICAgICAgICAgICAgbG9hZGVkRGVmaW5pdGlvbnNDYWNoZVtjb21wb25lbnROYW1lXSA9IHsgZGVmaW5pdGlvbjogZGVmaW5pdGlvbiwgaXNTeW5jaHJvbm91c0NvbXBvbmVudDogaXNTeW5jaHJvbm91c0NvbXBvbmVudCB9O1xuICAgICAgICAgICAgICAgIGRlbGV0ZSBsb2FkaW5nU3Vic2NyaWJhYmxlc0NhY2hlW2NvbXBvbmVudE5hbWVdO1xuXG4gICAgICAgICAgICAgICAgLy8gRm9yIEFQSSBjb25zaXN0ZW5jeSwgYWxsIGxvYWRzIGNvbXBsZXRlIGFzeW5jaHJvbm91c2x5LiBIb3dldmVyIHdlIHdhbnQgdG8gYXZvaWRcbiAgICAgICAgICAgICAgICAvLyBhZGRpbmcgYW4gZXh0cmEgdGFzayBzY2hlZHVsZSBpZiBpdCdzIHVubmVjZXNzYXJ5IChpLmUuLCB0aGUgY29tcGxldGlvbiBpcyBhbHJlYWR5XG4gICAgICAgICAgICAgICAgLy8gYXN5bmMpLlxuICAgICAgICAgICAgICAgIC8vXG4gICAgICAgICAgICAgICAgLy8gWW91IGNhbiBieXBhc3MgdGhlICdhbHdheXMgYXN5bmNocm9ub3VzJyBmZWF0dXJlIGJ5IHB1dHRpbmcgdGhlIHN5bmNocm9ub3VzOnRydWVcbiAgICAgICAgICAgICAgICAvLyBmbGFnIG9uIHlvdXIgY29tcG9uZW50IGNvbmZpZ3VyYXRpb24gd2hlbiB5b3UgcmVnaXN0ZXIgaXQuXG4gICAgICAgICAgICAgICAgaWYgKGNvbXBsZXRlZEFzeW5jIHx8IGlzU3luY2hyb25vdXNDb21wb25lbnQpIHtcbiAgICAgICAgICAgICAgICAgICAgLy8gTm90ZSB0aGF0IG5vdGlmeVN1YnNjcmliZXJzIGlnbm9yZXMgYW55IGRlcGVuZGVuY2llcyByZWFkIHdpdGhpbiB0aGUgY2FsbGJhY2suXG4gICAgICAgICAgICAgICAgICAgIC8vIFNlZSBjb21tZW50IGluIGxvYWRlclJlZ2lzdHJ5QmVoYXZpb3JzLmpzIGZvciByZWFzb25pbmdcbiAgICAgICAgICAgICAgICAgICAgc3Vic2NyaWJhYmxlWydub3RpZnlTdWJzY3JpYmVycyddKGRlZmluaXRpb24pO1xuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIGtvLnRhc2tzLnNjaGVkdWxlKGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgc3Vic2NyaWJhYmxlWydub3RpZnlTdWJzY3JpYmVycyddKGRlZmluaXRpb24pO1xuICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIGNvbXBsZXRlZEFzeW5jID0gdHJ1ZTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHN1YnNjcmliYWJsZS5zdWJzY3JpYmUoY2FsbGJhY2spO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gYmVnaW5Mb2FkaW5nQ29tcG9uZW50KGNvbXBvbmVudE5hbWUsIGNhbGxiYWNrKSB7XG4gICAgICAgIGdldEZpcnN0UmVzdWx0RnJvbUxvYWRlcnMoJ2dldENvbmZpZycsIFtjb21wb25lbnROYW1lXSwgZnVuY3Rpb24oY29uZmlnKSB7XG4gICAgICAgICAgICBpZiAoY29uZmlnKSB7XG4gICAgICAgICAgICAgICAgLy8gV2UgaGF2ZSBhIGNvbmZpZywgc28gbm93IGxvYWQgaXRzIGRlZmluaXRpb25cbiAgICAgICAgICAgICAgICBnZXRGaXJzdFJlc3VsdEZyb21Mb2FkZXJzKCdsb2FkQ29tcG9uZW50JywgW2NvbXBvbmVudE5hbWUsIGNvbmZpZ10sIGZ1bmN0aW9uKGRlZmluaXRpb24pIHtcbiAgICAgICAgICAgICAgICAgICAgY2FsbGJhY2soZGVmaW5pdGlvbiwgY29uZmlnKTtcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgLy8gVGhlIGNvbXBvbmVudCBoYXMgbm8gY29uZmlnIC0gaXQncyB1bmtub3duIHRvIGFsbCB0aGUgbG9hZGVycy5cbiAgICAgICAgICAgICAgICAvLyBOb3RlIHRoYXQgdGhpcyBpcyBub3QgYW4gZXJyb3IgKGUuZy4sIGEgbW9kdWxlIGxvYWRpbmcgZXJyb3IpIC0gdGhhdCB3b3VsZCBhYm9ydCB0aGVcbiAgICAgICAgICAgICAgICAvLyBwcm9jZXNzIGFuZCB0aGlzIGNhbGxiYWNrIHdvdWxkIG5vdCBydW4uIEZvciB0aGlzIGNhbGxiYWNrIHRvIHJ1biwgYWxsIGxvYWRlcnMgbXVzdFxuICAgICAgICAgICAgICAgIC8vIGhhdmUgY29uZmlybWVkIHRoZXkgZG9uJ3Qga25vdyBhYm91dCB0aGlzIGNvbXBvbmVudC5cbiAgICAgICAgICAgICAgICBjYWxsYmFjayhudWxsLCBudWxsKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gZ2V0Rmlyc3RSZXN1bHRGcm9tTG9hZGVycyhtZXRob2ROYW1lLCBhcmdzRXhjZXB0Q2FsbGJhY2ssIGNhbGxiYWNrLCBjYW5kaWRhdGVMb2FkZXJzKSB7XG4gICAgICAgIC8vIE9uIHRoZSBmaXJzdCBjYWxsIGluIHRoZSBzdGFjaywgc3RhcnQgd2l0aCB0aGUgZnVsbCBzZXQgb2YgbG9hZGVyc1xuICAgICAgICBpZiAoIWNhbmRpZGF0ZUxvYWRlcnMpIHtcbiAgICAgICAgICAgIGNhbmRpZGF0ZUxvYWRlcnMgPSBrby5jb21wb25lbnRzWydsb2FkZXJzJ10uc2xpY2UoMCk7IC8vIFVzZSBhIGNvcHksIGJlY2F1c2Ugd2UnbGwgYmUgbXV0YXRpbmcgdGhpcyBhcnJheVxuICAgICAgICB9XG5cbiAgICAgICAgLy8gVHJ5IHRoZSBuZXh0IGNhbmRpZGF0ZVxuICAgICAgICB2YXIgY3VycmVudENhbmRpZGF0ZUxvYWRlciA9IGNhbmRpZGF0ZUxvYWRlcnMuc2hpZnQoKTtcbiAgICAgICAgaWYgKGN1cnJlbnRDYW5kaWRhdGVMb2FkZXIpIHtcbiAgICAgICAgICAgIHZhciBtZXRob2RJbnN0YW5jZSA9IGN1cnJlbnRDYW5kaWRhdGVMb2FkZXJbbWV0aG9kTmFtZV07XG4gICAgICAgICAgICBpZiAobWV0aG9kSW5zdGFuY2UpIHtcbiAgICAgICAgICAgICAgICB2YXIgd2FzQWJvcnRlZCA9IGZhbHNlLFxuICAgICAgICAgICAgICAgICAgICBzeW5jaHJvbm91c1JldHVyblZhbHVlID0gbWV0aG9kSW5zdGFuY2UuYXBwbHkoY3VycmVudENhbmRpZGF0ZUxvYWRlciwgYXJnc0V4Y2VwdENhbGxiYWNrLmNvbmNhdChmdW5jdGlvbihyZXN1bHQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICh3YXNBYm9ydGVkKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY2FsbGJhY2sobnVsbCk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKHJlc3VsdCAhPT0gbnVsbCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIFRoaXMgY2FuZGlkYXRlIHJldHVybmVkIGEgdmFsdWUuIFVzZSBpdC5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjYWxsYmFjayhyZXN1bHQpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBUcnkgdGhlIG5leHQgY2FuZGlkYXRlXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZ2V0Rmlyc3RSZXN1bHRGcm9tTG9hZGVycyhtZXRob2ROYW1lLCBhcmdzRXhjZXB0Q2FsbGJhY2ssIGNhbGxiYWNrLCBjYW5kaWRhdGVMb2FkZXJzKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfSkpO1xuXG4gICAgICAgICAgICAgICAgLy8gQ3VycmVudGx5LCBsb2FkZXJzIG1heSBub3QgcmV0dXJuIGFueXRoaW5nIHN5bmNocm9ub3VzbHkuIFRoaXMgbGVhdmVzIG9wZW4gdGhlIHBvc3NpYmlsaXR5XG4gICAgICAgICAgICAgICAgLy8gdGhhdCB3ZSdsbCBleHRlbmQgdGhlIEFQSSB0byBzdXBwb3J0IHN5bmNocm9ub3VzIHJldHVybiB2YWx1ZXMgaW4gdGhlIGZ1dHVyZS4gSXQgd29uJ3QgYmVcbiAgICAgICAgICAgICAgICAvLyBhIGJyZWFraW5nIGNoYW5nZSwgYmVjYXVzZSBjdXJyZW50bHkgbm8gbG9hZGVyIGlzIGFsbG93ZWQgdG8gcmV0dXJuIGFueXRoaW5nIGV4Y2VwdCB1bmRlZmluZWQuXG4gICAgICAgICAgICAgICAgaWYgKHN5bmNocm9ub3VzUmV0dXJuVmFsdWUgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgICAgICAgICB3YXNBYm9ydGVkID0gdHJ1ZTtcblxuICAgICAgICAgICAgICAgICAgICAvLyBNZXRob2QgdG8gc3VwcHJlc3MgZXhjZXB0aW9ucyB3aWxsIHJlbWFpbiB1bmRvY3VtZW50ZWQuIFRoaXMgaXMgb25seSB0byBrZWVwXG4gICAgICAgICAgICAgICAgICAgIC8vIEtPJ3Mgc3BlY3MgcnVubmluZyB0aWRpbHksIHNpbmNlIHdlIGNhbiBvYnNlcnZlIHRoZSBsb2FkaW5nIGdvdCBhYm9ydGVkIHdpdGhvdXRcbiAgICAgICAgICAgICAgICAgICAgLy8gaGF2aW5nIGV4Y2VwdGlvbnMgY2x1dHRlcmluZyB1cCB0aGUgY29uc29sZSB0b28uXG4gICAgICAgICAgICAgICAgICAgIGlmICghY3VycmVudENhbmRpZGF0ZUxvYWRlclsnc3VwcHJlc3NMb2FkZXJFeGNlcHRpb25zJ10pIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcignQ29tcG9uZW50IGxvYWRlcnMgbXVzdCBzdXBwbHkgdmFsdWVzIGJ5IGludm9raW5nIHRoZSBjYWxsYmFjaywgbm90IGJ5IHJldHVybmluZyB2YWx1ZXMgc3luY2hyb25vdXNseS4nKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgLy8gVGhpcyBjYW5kaWRhdGUgZG9lc24ndCBoYXZlIHRoZSByZWxldmFudCBoYW5kbGVyLiBTeW5jaHJvbm91c2x5IG1vdmUgb24gdG8gdGhlIG5leHQgb25lLlxuICAgICAgICAgICAgICAgIGdldEZpcnN0UmVzdWx0RnJvbUxvYWRlcnMobWV0aG9kTmFtZSwgYXJnc0V4Y2VwdENhbGxiYWNrLCBjYWxsYmFjaywgY2FuZGlkYXRlTG9hZGVycyk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAvLyBObyBjYW5kaWRhdGVzIHJldHVybmVkIGEgdmFsdWVcbiAgICAgICAgICAgIGNhbGxiYWNrKG51bGwpO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgLy8gUmVmZXJlbmNlIHRoZSBsb2FkZXJzIHZpYSBzdHJpbmcgbmFtZSBzbyBpdCdzIHBvc3NpYmxlIGZvciBkZXZlbG9wZXJzXG4gICAgLy8gdG8gcmVwbGFjZSB0aGUgd2hvbGUgYXJyYXkgYnkgYXNzaWduaW5nIHRvIGtvLmNvbXBvbmVudHMubG9hZGVyc1xuICAgIGtvLmNvbXBvbmVudHNbJ2xvYWRlcnMnXSA9IFtdO1xuXG4gICAga28uZXhwb3J0U3ltYm9sKCdjb21wb25lbnRzJywga28uY29tcG9uZW50cyk7XG4gICAga28uZXhwb3J0U3ltYm9sKCdjb21wb25lbnRzLmdldCcsIGtvLmNvbXBvbmVudHMuZ2V0KTtcbiAgICBrby5leHBvcnRTeW1ib2woJ2NvbXBvbmVudHMuY2xlYXJDYWNoZWREZWZpbml0aW9uJywga28uY29tcG9uZW50cy5jbGVhckNhY2hlZERlZmluaXRpb24pO1xufSkoKTtcbihmdW5jdGlvbih1bmRlZmluZWQpIHtcblxuICAgIC8vIFRoZSBkZWZhdWx0IGxvYWRlciBpcyByZXNwb25zaWJsZSBmb3IgdHdvIHRoaW5nczpcbiAgICAvLyAxLiBNYWludGFpbmluZyB0aGUgZGVmYXVsdCBpbi1tZW1vcnkgcmVnaXN0cnkgb2YgY29tcG9uZW50IGNvbmZpZ3VyYXRpb24gb2JqZWN0c1xuICAgIC8vICAgIChpLmUuLCB0aGUgdGhpbmcgeW91J3JlIHdyaXRpbmcgdG8gd2hlbiB5b3UgY2FsbCBrby5jb21wb25lbnRzLnJlZ2lzdGVyKHNvbWVOYW1lLCAuLi4pKVxuICAgIC8vIDIuIEFuc3dlcmluZyByZXF1ZXN0cyBmb3IgY29tcG9uZW50cyBieSBmZXRjaGluZyBjb25maWd1cmF0aW9uIG9iamVjdHNcbiAgICAvLyAgICBmcm9tIHRoYXQgZGVmYXVsdCBpbi1tZW1vcnkgcmVnaXN0cnkgYW5kIHJlc29sdmluZyB0aGVtIGludG8gc3RhbmRhcmRcbiAgICAvLyAgICBjb21wb25lbnQgZGVmaW5pdGlvbiBvYmplY3RzIChvZiB0aGUgZm9ybSB7IGNyZWF0ZVZpZXdNb2RlbDogLi4uLCB0ZW1wbGF0ZTogLi4uIH0pXG4gICAgLy8gQ3VzdG9tIGxvYWRlcnMgbWF5IG92ZXJyaWRlIGVpdGhlciBvZiB0aGVzZSBmYWNpbGl0aWVzLCBpLmUuLFxuICAgIC8vIDEuIFRvIHN1cHBseSBjb25maWd1cmF0aW9uIG9iamVjdHMgZnJvbSBzb21lIG90aGVyIHNvdXJjZSAoZS5nLiwgY29udmVudGlvbnMpXG4gICAgLy8gMi4gT3IsIHRvIHJlc29sdmUgY29uZmlndXJhdGlvbiBvYmplY3RzIGJ5IGxvYWRpbmcgdmlld21vZGVscy90ZW1wbGF0ZXMgdmlhIGFyYml0cmFyeSBsb2dpYy5cblxuICAgIHZhciBkZWZhdWx0Q29uZmlnUmVnaXN0cnkgPSB7fTtcblxuICAgIGtvLmNvbXBvbmVudHMucmVnaXN0ZXIgPSBmdW5jdGlvbihjb21wb25lbnROYW1lLCBjb25maWcpIHtcbiAgICAgICAgaWYgKCFjb25maWcpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcignSW52YWxpZCBjb25maWd1cmF0aW9uIGZvciAnICsgY29tcG9uZW50TmFtZSk7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoa28uY29tcG9uZW50cy5pc1JlZ2lzdGVyZWQoY29tcG9uZW50TmFtZSkpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcignQ29tcG9uZW50ICcgKyBjb21wb25lbnROYW1lICsgJyBpcyBhbHJlYWR5IHJlZ2lzdGVyZWQnKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGRlZmF1bHRDb25maWdSZWdpc3RyeVtjb21wb25lbnROYW1lXSA9IGNvbmZpZztcbiAgICB9O1xuXG4gICAga28uY29tcG9uZW50cy5pc1JlZ2lzdGVyZWQgPSBmdW5jdGlvbihjb21wb25lbnROYW1lKSB7XG4gICAgICAgIHJldHVybiBkZWZhdWx0Q29uZmlnUmVnaXN0cnkuaGFzT3duUHJvcGVydHkoY29tcG9uZW50TmFtZSk7XG4gICAgfTtcblxuICAgIGtvLmNvbXBvbmVudHMudW5yZWdpc3RlciA9IGZ1bmN0aW9uKGNvbXBvbmVudE5hbWUpIHtcbiAgICAgICAgZGVsZXRlIGRlZmF1bHRDb25maWdSZWdpc3RyeVtjb21wb25lbnROYW1lXTtcbiAgICAgICAga28uY29tcG9uZW50cy5jbGVhckNhY2hlZERlZmluaXRpb24oY29tcG9uZW50TmFtZSk7XG4gICAgfTtcblxuICAgIGtvLmNvbXBvbmVudHMuZGVmYXVsdExvYWRlciA9IHtcbiAgICAgICAgJ2dldENvbmZpZyc6IGZ1bmN0aW9uKGNvbXBvbmVudE5hbWUsIGNhbGxiYWNrKSB7XG4gICAgICAgICAgICB2YXIgcmVzdWx0ID0gZGVmYXVsdENvbmZpZ1JlZ2lzdHJ5Lmhhc093blByb3BlcnR5KGNvbXBvbmVudE5hbWUpXG4gICAgICAgICAgICAgICAgPyBkZWZhdWx0Q29uZmlnUmVnaXN0cnlbY29tcG9uZW50TmFtZV1cbiAgICAgICAgICAgICAgICA6IG51bGw7XG4gICAgICAgICAgICBjYWxsYmFjayhyZXN1bHQpO1xuICAgICAgICB9LFxuXG4gICAgICAgICdsb2FkQ29tcG9uZW50JzogZnVuY3Rpb24oY29tcG9uZW50TmFtZSwgY29uZmlnLCBjYWxsYmFjaykge1xuICAgICAgICAgICAgdmFyIGVycm9yQ2FsbGJhY2sgPSBtYWtlRXJyb3JDYWxsYmFjayhjb21wb25lbnROYW1lKTtcbiAgICAgICAgICAgIHBvc3NpYmx5R2V0Q29uZmlnRnJvbUFtZChlcnJvckNhbGxiYWNrLCBjb25maWcsIGZ1bmN0aW9uKGxvYWRlZENvbmZpZykge1xuICAgICAgICAgICAgICAgIHJlc29sdmVDb25maWcoY29tcG9uZW50TmFtZSwgZXJyb3JDYWxsYmFjaywgbG9hZGVkQ29uZmlnLCBjYWxsYmFjayk7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfSxcblxuICAgICAgICAnbG9hZFRlbXBsYXRlJzogZnVuY3Rpb24oY29tcG9uZW50TmFtZSwgdGVtcGxhdGVDb25maWcsIGNhbGxiYWNrKSB7XG4gICAgICAgICAgICByZXNvbHZlVGVtcGxhdGUobWFrZUVycm9yQ2FsbGJhY2soY29tcG9uZW50TmFtZSksIHRlbXBsYXRlQ29uZmlnLCBjYWxsYmFjayk7XG4gICAgICAgIH0sXG5cbiAgICAgICAgJ2xvYWRWaWV3TW9kZWwnOiBmdW5jdGlvbihjb21wb25lbnROYW1lLCB2aWV3TW9kZWxDb25maWcsIGNhbGxiYWNrKSB7XG4gICAgICAgICAgICByZXNvbHZlVmlld01vZGVsKG1ha2VFcnJvckNhbGxiYWNrKGNvbXBvbmVudE5hbWUpLCB2aWV3TW9kZWxDb25maWcsIGNhbGxiYWNrKTtcbiAgICAgICAgfVxuICAgIH07XG5cbiAgICB2YXIgY3JlYXRlVmlld01vZGVsS2V5ID0gJ2NyZWF0ZVZpZXdNb2RlbCc7XG5cbiAgICAvLyBUYWtlcyBhIGNvbmZpZyBvYmplY3Qgb2YgdGhlIGZvcm0geyB0ZW1wbGF0ZTogLi4uLCB2aWV3TW9kZWw6IC4uLiB9LCBhbmQgYXN5bmNocm9ub3VzbHkgY29udmVydCBpdFxuICAgIC8vIGludG8gdGhlIHN0YW5kYXJkIGNvbXBvbmVudCBkZWZpbml0aW9uIGZvcm1hdDpcbiAgICAvLyAgICB7IHRlbXBsYXRlOiA8QXJyYXlPZkRvbU5vZGVzPiwgY3JlYXRlVmlld01vZGVsOiBmdW5jdGlvbihwYXJhbXMsIGNvbXBvbmVudEluZm8pIHsgLi4uIH0gfS5cbiAgICAvLyBTaW5jZSBib3RoIHRlbXBsYXRlIGFuZCB2aWV3TW9kZWwgbWF5IG5lZWQgdG8gYmUgcmVzb2x2ZWQgYXN5bmNocm9ub3VzbHksIGJvdGggdGFza3MgYXJlIHBlcmZvcm1lZFxuICAgIC8vIGluIHBhcmFsbGVsLCBhbmQgdGhlIHJlc3VsdHMgam9pbmVkIHdoZW4gYm90aCBhcmUgcmVhZHkuIFdlIGRvbid0IGRlcGVuZCBvbiBhbnkgcHJvbWlzZXMgaW5mcmFzdHJ1Y3R1cmUsXG4gICAgLy8gc28gdGhpcyBpcyBpbXBsZW1lbnRlZCBtYW51YWxseSBiZWxvdy5cbiAgICBmdW5jdGlvbiByZXNvbHZlQ29uZmlnKGNvbXBvbmVudE5hbWUsIGVycm9yQ2FsbGJhY2ssIGNvbmZpZywgY2FsbGJhY2spIHtcbiAgICAgICAgdmFyIHJlc3VsdCA9IHt9LFxuICAgICAgICAgICAgbWFrZUNhbGxCYWNrV2hlblplcm8gPSAyLFxuICAgICAgICAgICAgdHJ5SXNzdWVDYWxsYmFjayA9IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgICAgIGlmICgtLW1ha2VDYWxsQmFja1doZW5aZXJvID09PSAwKSB7XG4gICAgICAgICAgICAgICAgICAgIGNhbGxiYWNrKHJlc3VsdCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHRlbXBsYXRlQ29uZmlnID0gY29uZmlnWyd0ZW1wbGF0ZSddLFxuICAgICAgICAgICAgdmlld01vZGVsQ29uZmlnID0gY29uZmlnWyd2aWV3TW9kZWwnXTtcblxuICAgICAgICBpZiAodGVtcGxhdGVDb25maWcpIHtcbiAgICAgICAgICAgIHBvc3NpYmx5R2V0Q29uZmlnRnJvbUFtZChlcnJvckNhbGxiYWNrLCB0ZW1wbGF0ZUNvbmZpZywgZnVuY3Rpb24obG9hZGVkQ29uZmlnKSB7XG4gICAgICAgICAgICAgICAga28uY29tcG9uZW50cy5fZ2V0Rmlyc3RSZXN1bHRGcm9tTG9hZGVycygnbG9hZFRlbXBsYXRlJywgW2NvbXBvbmVudE5hbWUsIGxvYWRlZENvbmZpZ10sIGZ1bmN0aW9uKHJlc29sdmVkVGVtcGxhdGUpIHtcbiAgICAgICAgICAgICAgICAgICAgcmVzdWx0Wyd0ZW1wbGF0ZSddID0gcmVzb2x2ZWRUZW1wbGF0ZTtcbiAgICAgICAgICAgICAgICAgICAgdHJ5SXNzdWVDYWxsYmFjaygpO1xuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICB0cnlJc3N1ZUNhbGxiYWNrKCk7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAodmlld01vZGVsQ29uZmlnKSB7XG4gICAgICAgICAgICBwb3NzaWJseUdldENvbmZpZ0Zyb21BbWQoZXJyb3JDYWxsYmFjaywgdmlld01vZGVsQ29uZmlnLCBmdW5jdGlvbihsb2FkZWRDb25maWcpIHtcbiAgICAgICAgICAgICAgICBrby5jb21wb25lbnRzLl9nZXRGaXJzdFJlc3VsdEZyb21Mb2FkZXJzKCdsb2FkVmlld01vZGVsJywgW2NvbXBvbmVudE5hbWUsIGxvYWRlZENvbmZpZ10sIGZ1bmN0aW9uKHJlc29sdmVkVmlld01vZGVsKSB7XG4gICAgICAgICAgICAgICAgICAgIHJlc3VsdFtjcmVhdGVWaWV3TW9kZWxLZXldID0gcmVzb2x2ZWRWaWV3TW9kZWw7XG4gICAgICAgICAgICAgICAgICAgIHRyeUlzc3VlQ2FsbGJhY2soKTtcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgdHJ5SXNzdWVDYWxsYmFjaygpO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gcmVzb2x2ZVRlbXBsYXRlKGVycm9yQ2FsbGJhY2ssIHRlbXBsYXRlQ29uZmlnLCBjYWxsYmFjaykge1xuICAgICAgICBpZiAodHlwZW9mIHRlbXBsYXRlQ29uZmlnID09PSAnc3RyaW5nJykge1xuICAgICAgICAgICAgLy8gTWFya3VwIC0gcGFyc2UgaXRcbiAgICAgICAgICAgIGNhbGxiYWNrKGtvLnV0aWxzLnBhcnNlSHRtbEZyYWdtZW50KHRlbXBsYXRlQ29uZmlnKSk7XG4gICAgICAgIH0gZWxzZSBpZiAodGVtcGxhdGVDb25maWcgaW5zdGFuY2VvZiBBcnJheSkge1xuICAgICAgICAgICAgLy8gQXNzdW1lIGFscmVhZHkgYW4gYXJyYXkgb2YgRE9NIG5vZGVzIC0gcGFzcyB0aHJvdWdoIHVuY2hhbmdlZFxuICAgICAgICAgICAgY2FsbGJhY2sodGVtcGxhdGVDb25maWcpO1xuICAgICAgICB9IGVsc2UgaWYgKGlzRG9jdW1lbnRGcmFnbWVudCh0ZW1wbGF0ZUNvbmZpZykpIHtcbiAgICAgICAgICAgIC8vIERvY3VtZW50IGZyYWdtZW50IC0gdXNlIGl0cyBjaGlsZCBub2Rlc1xuICAgICAgICAgICAgY2FsbGJhY2soa28udXRpbHMubWFrZUFycmF5KHRlbXBsYXRlQ29uZmlnLmNoaWxkTm9kZXMpKTtcbiAgICAgICAgfSBlbHNlIGlmICh0ZW1wbGF0ZUNvbmZpZ1snZWxlbWVudCddKSB7XG4gICAgICAgICAgICB2YXIgZWxlbWVudCA9IHRlbXBsYXRlQ29uZmlnWydlbGVtZW50J107XG4gICAgICAgICAgICBpZiAoaXNEb21FbGVtZW50KGVsZW1lbnQpKSB7XG4gICAgICAgICAgICAgICAgLy8gRWxlbWVudCBpbnN0YW5jZSAtIGNvcHkgaXRzIGNoaWxkIG5vZGVzXG4gICAgICAgICAgICAgICAgY2FsbGJhY2soY2xvbmVOb2Rlc0Zyb21UZW1wbGF0ZVNvdXJjZUVsZW1lbnQoZWxlbWVudCkpO1xuICAgICAgICAgICAgfSBlbHNlIGlmICh0eXBlb2YgZWxlbWVudCA9PT0gJ3N0cmluZycpIHtcbiAgICAgICAgICAgICAgICAvLyBFbGVtZW50IElEIC0gZmluZCBpdCwgdGhlbiBjb3B5IGl0cyBjaGlsZCBub2Rlc1xuICAgICAgICAgICAgICAgIHZhciBlbGVtSW5zdGFuY2UgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChlbGVtZW50KTtcbiAgICAgICAgICAgICAgICBpZiAoZWxlbUluc3RhbmNlKSB7XG4gICAgICAgICAgICAgICAgICAgIGNhbGxiYWNrKGNsb25lTm9kZXNGcm9tVGVtcGxhdGVTb3VyY2VFbGVtZW50KGVsZW1JbnN0YW5jZSkpO1xuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIGVycm9yQ2FsbGJhY2soJ0Nhbm5vdCBmaW5kIGVsZW1lbnQgd2l0aCBJRCAnICsgZWxlbWVudCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICBlcnJvckNhbGxiYWNrKCdVbmtub3duIGVsZW1lbnQgdHlwZTogJyArIGVsZW1lbnQpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgZXJyb3JDYWxsYmFjaygnVW5rbm93biB0ZW1wbGF0ZSB2YWx1ZTogJyArIHRlbXBsYXRlQ29uZmlnKTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIGZ1bmN0aW9uIHJlc29sdmVWaWV3TW9kZWwoZXJyb3JDYWxsYmFjaywgdmlld01vZGVsQ29uZmlnLCBjYWxsYmFjaykge1xuICAgICAgICBpZiAodHlwZW9mIHZpZXdNb2RlbENvbmZpZyA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICAgICAgLy8gQ29uc3RydWN0b3IgLSBjb252ZXJ0IHRvIHN0YW5kYXJkIGZhY3RvcnkgZnVuY3Rpb24gZm9ybWF0XG4gICAgICAgICAgICAvLyBCeSBkZXNpZ24sIHRoaXMgZG9lcyAqbm90KiBzdXBwbHkgY29tcG9uZW50SW5mbyB0byB0aGUgY29uc3RydWN0b3IsIGFzIHRoZSBpbnRlbnQgaXMgdGhhdFxuICAgICAgICAgICAgLy8gY29tcG9uZW50SW5mbyBjb250YWlucyBub24tdmlld21vZGVsIGRhdGEgKGUuZy4sIHRoZSBjb21wb25lbnQncyBlbGVtZW50KSB0aGF0IHNob3VsZCBvbmx5XG4gICAgICAgICAgICAvLyBiZSB1c2VkIGluIGZhY3RvcnkgZnVuY3Rpb25zLCBub3Qgdmlld21vZGVsIGNvbnN0cnVjdG9ycy5cbiAgICAgICAgICAgIGNhbGxiYWNrKGZ1bmN0aW9uIChwYXJhbXMgLyosIGNvbXBvbmVudEluZm8gKi8pIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gbmV3IHZpZXdNb2RlbENvbmZpZyhwYXJhbXMpO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgIH0gZWxzZSBpZiAodHlwZW9mIHZpZXdNb2RlbENvbmZpZ1tjcmVhdGVWaWV3TW9kZWxLZXldID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgICAgICAvLyBBbHJlYWR5IGEgZmFjdG9yeSBmdW5jdGlvbiAtIHVzZSBpdCBhcy1pc1xuICAgICAgICAgICAgY2FsbGJhY2sodmlld01vZGVsQ29uZmlnW2NyZWF0ZVZpZXdNb2RlbEtleV0pO1xuICAgICAgICB9IGVsc2UgaWYgKCdpbnN0YW5jZScgaW4gdmlld01vZGVsQ29uZmlnKSB7XG4gICAgICAgICAgICAvLyBGaXhlZCBvYmplY3QgaW5zdGFuY2UgLSBwcm9tb3RlIHRvIGNyZWF0ZVZpZXdNb2RlbCBmb3JtYXQgZm9yIEFQSSBjb25zaXN0ZW5jeVxuICAgICAgICAgICAgdmFyIGZpeGVkSW5zdGFuY2UgPSB2aWV3TW9kZWxDb25maWdbJ2luc3RhbmNlJ107XG4gICAgICAgICAgICBjYWxsYmFjayhmdW5jdGlvbiAocGFyYW1zLCBjb21wb25lbnRJbmZvKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGZpeGVkSW5zdGFuY2U7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfSBlbHNlIGlmICgndmlld01vZGVsJyBpbiB2aWV3TW9kZWxDb25maWcpIHtcbiAgICAgICAgICAgIC8vIFJlc29sdmVkIEFNRCBtb2R1bGUgd2hvc2UgdmFsdWUgaXMgb2YgdGhlIGZvcm0geyB2aWV3TW9kZWw6IC4uLiB9XG4gICAgICAgICAgICByZXNvbHZlVmlld01vZGVsKGVycm9yQ2FsbGJhY2ssIHZpZXdNb2RlbENvbmZpZ1sndmlld01vZGVsJ10sIGNhbGxiYWNrKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGVycm9yQ2FsbGJhY2soJ1Vua25vd24gdmlld01vZGVsIHZhbHVlOiAnICsgdmlld01vZGVsQ29uZmlnKTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIGZ1bmN0aW9uIGNsb25lTm9kZXNGcm9tVGVtcGxhdGVTb3VyY2VFbGVtZW50KGVsZW1JbnN0YW5jZSkge1xuICAgICAgICBzd2l0Y2ggKGtvLnV0aWxzLnRhZ05hbWVMb3dlcihlbGVtSW5zdGFuY2UpKSB7XG4gICAgICAgICAgICBjYXNlICdzY3JpcHQnOlxuICAgICAgICAgICAgICAgIHJldHVybiBrby51dGlscy5wYXJzZUh0bWxGcmFnbWVudChlbGVtSW5zdGFuY2UudGV4dCk7XG4gICAgICAgICAgICBjYXNlICd0ZXh0YXJlYSc6XG4gICAgICAgICAgICAgICAgcmV0dXJuIGtvLnV0aWxzLnBhcnNlSHRtbEZyYWdtZW50KGVsZW1JbnN0YW5jZS52YWx1ZSk7XG4gICAgICAgICAgICBjYXNlICd0ZW1wbGF0ZSc6XG4gICAgICAgICAgICAgICAgLy8gRm9yIGJyb3dzZXJzIHdpdGggcHJvcGVyIDx0ZW1wbGF0ZT4gZWxlbWVudCBzdXBwb3J0IChpLmUuLCB3aGVyZSB0aGUgLmNvbnRlbnQgcHJvcGVydHlcbiAgICAgICAgICAgICAgICAvLyBnaXZlcyBhIGRvY3VtZW50IGZyYWdtZW50KSwgdXNlIHRoYXQgZG9jdW1lbnQgZnJhZ21lbnQuXG4gICAgICAgICAgICAgICAgaWYgKGlzRG9jdW1lbnRGcmFnbWVudChlbGVtSW5zdGFuY2UuY29udGVudCkpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGtvLnV0aWxzLmNsb25lTm9kZXMoZWxlbUluc3RhbmNlLmNvbnRlbnQuY2hpbGROb2Rlcyk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgLy8gUmVndWxhciBlbGVtZW50cyBzdWNoIGFzIDxkaXY+LCBhbmQgPHRlbXBsYXRlPiBlbGVtZW50cyBvbiBvbGQgYnJvd3NlcnMgdGhhdCBkb24ndCByZWFsbHlcbiAgICAgICAgLy8gdW5kZXJzdGFuZCA8dGVtcGxhdGU+IGFuZCBqdXN0IHRyZWF0IGl0IGFzIGEgcmVndWxhciBjb250YWluZXJcbiAgICAgICAgcmV0dXJuIGtvLnV0aWxzLmNsb25lTm9kZXMoZWxlbUluc3RhbmNlLmNoaWxkTm9kZXMpO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGlzRG9tRWxlbWVudChvYmopIHtcbiAgICAgICAgaWYgKHdpbmRvd1snSFRNTEVsZW1lbnQnXSkge1xuICAgICAgICAgICAgcmV0dXJuIG9iaiBpbnN0YW5jZW9mIEhUTUxFbGVtZW50O1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgcmV0dXJuIG9iaiAmJiBvYmoudGFnTmFtZSAmJiBvYmoubm9kZVR5cGUgPT09IDE7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBmdW5jdGlvbiBpc0RvY3VtZW50RnJhZ21lbnQob2JqKSB7XG4gICAgICAgIGlmICh3aW5kb3dbJ0RvY3VtZW50RnJhZ21lbnQnXSkge1xuICAgICAgICAgICAgcmV0dXJuIG9iaiBpbnN0YW5jZW9mIERvY3VtZW50RnJhZ21lbnQ7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICByZXR1cm4gb2JqICYmIG9iai5ub2RlVHlwZSA9PT0gMTE7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBmdW5jdGlvbiBwb3NzaWJseUdldENvbmZpZ0Zyb21BbWQoZXJyb3JDYWxsYmFjaywgY29uZmlnLCBjYWxsYmFjaykge1xuICAgICAgICBpZiAodHlwZW9mIGNvbmZpZ1sncmVxdWlyZSddID09PSAnc3RyaW5nJykge1xuICAgICAgICAgICAgLy8gVGhlIGNvbmZpZyBpcyB0aGUgdmFsdWUgb2YgYW4gQU1EIG1vZHVsZVxuICAgICAgICAgICAgaWYgKGFtZFJlcXVpcmUgfHwgd2luZG93WydyZXF1aXJlJ10pIHtcbiAgICAgICAgICAgICAgICAoYW1kUmVxdWlyZSB8fCB3aW5kb3dbJ3JlcXVpcmUnXSkoW2NvbmZpZ1sncmVxdWlyZSddXSwgY2FsbGJhY2spO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICBlcnJvckNhbGxiYWNrKCdVc2VzIHJlcXVpcmUsIGJ1dCBubyBBTUQgbG9hZGVyIGlzIHByZXNlbnQnKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGNhbGxiYWNrKGNvbmZpZyk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBmdW5jdGlvbiBtYWtlRXJyb3JDYWxsYmFjayhjb21wb25lbnROYW1lKSB7XG4gICAgICAgIHJldHVybiBmdW5jdGlvbiAobWVzc2FnZSkge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdDb21wb25lbnQgXFwnJyArIGNvbXBvbmVudE5hbWUgKyAnXFwnOiAnICsgbWVzc2FnZSk7XG4gICAgICAgIH07XG4gICAgfVxuXG4gICAga28uZXhwb3J0U3ltYm9sKCdjb21wb25lbnRzLnJlZ2lzdGVyJywga28uY29tcG9uZW50cy5yZWdpc3Rlcik7XG4gICAga28uZXhwb3J0U3ltYm9sKCdjb21wb25lbnRzLmlzUmVnaXN0ZXJlZCcsIGtvLmNvbXBvbmVudHMuaXNSZWdpc3RlcmVkKTtcbiAgICBrby5leHBvcnRTeW1ib2woJ2NvbXBvbmVudHMudW5yZWdpc3RlcicsIGtvLmNvbXBvbmVudHMudW5yZWdpc3Rlcik7XG5cbiAgICAvLyBFeHBvc2UgdGhlIGRlZmF1bHQgbG9hZGVyIHNvIHRoYXQgZGV2ZWxvcGVycyBjYW4gZGlyZWN0bHkgYXNrIGl0IGZvciBjb25maWd1cmF0aW9uXG4gICAgLy8gb3IgdG8gcmVzb2x2ZSBjb25maWd1cmF0aW9uXG4gICAga28uZXhwb3J0U3ltYm9sKCdjb21wb25lbnRzLmRlZmF1bHRMb2FkZXInLCBrby5jb21wb25lbnRzLmRlZmF1bHRMb2FkZXIpO1xuXG4gICAgLy8gQnkgZGVmYXVsdCwgdGhlIGRlZmF1bHQgbG9hZGVyIGlzIHRoZSBvbmx5IHJlZ2lzdGVyZWQgY29tcG9uZW50IGxvYWRlclxuICAgIGtvLmNvbXBvbmVudHNbJ2xvYWRlcnMnXS5wdXNoKGtvLmNvbXBvbmVudHMuZGVmYXVsdExvYWRlcik7XG5cbiAgICAvLyBQcml2YXRlbHkgZXhwb3NlIHRoZSB1bmRlcmx5aW5nIGNvbmZpZyByZWdpc3RyeSBmb3IgdXNlIGluIG9sZC1JRSBzaGltXG4gICAga28uY29tcG9uZW50cy5fYWxsUmVnaXN0ZXJlZENvbXBvbmVudHMgPSBkZWZhdWx0Q29uZmlnUmVnaXN0cnk7XG59KSgpO1xuKGZ1bmN0aW9uICh1bmRlZmluZWQpIHtcbiAgICAvLyBPdmVycmlkYWJsZSBBUEkgZm9yIGRldGVybWluaW5nIHdoaWNoIGNvbXBvbmVudCBuYW1lIGFwcGxpZXMgdG8gYSBnaXZlbiBub2RlLiBCeSBvdmVycmlkaW5nIHRoaXMsXG4gICAgLy8geW91IGNhbiBmb3IgZXhhbXBsZSBtYXAgc3BlY2lmaWMgdGFnTmFtZXMgdG8gY29tcG9uZW50cyB0aGF0IGFyZSBub3QgcHJlcmVnaXN0ZXJlZC5cbiAgICBrby5jb21wb25lbnRzWydnZXRDb21wb25lbnROYW1lRm9yTm9kZSddID0gZnVuY3Rpb24obm9kZSkge1xuICAgICAgICB2YXIgdGFnTmFtZUxvd2VyID0ga28udXRpbHMudGFnTmFtZUxvd2VyKG5vZGUpO1xuICAgICAgICBpZiAoa28uY29tcG9uZW50cy5pc1JlZ2lzdGVyZWQodGFnTmFtZUxvd2VyKSkge1xuICAgICAgICAgICAgLy8gVHJ5IHRvIGRldGVybWluZSB0aGF0IHRoaXMgbm9kZSBjYW4gYmUgY29uc2lkZXJlZCBhICpjdXN0b20qIGVsZW1lbnQ7IHNlZSBodHRwczovL2dpdGh1Yi5jb20va25vY2tvdXQva25vY2tvdXQvaXNzdWVzLzE2MDNcbiAgICAgICAgICAgIGlmICh0YWdOYW1lTG93ZXIuaW5kZXhPZignLScpICE9IC0xIHx8ICgnJyArIG5vZGUpID09IFwiW29iamVjdCBIVE1MVW5rbm93bkVsZW1lbnRdXCIgfHwgKGtvLnV0aWxzLmllVmVyc2lvbiA8PSA4ICYmIG5vZGUudGFnTmFtZSA9PT0gdGFnTmFtZUxvd2VyKSkge1xuICAgICAgICAgICAgICAgIHJldHVybiB0YWdOYW1lTG93ZXI7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9O1xuXG4gICAga28uY29tcG9uZW50cy5hZGRCaW5kaW5nc0ZvckN1c3RvbUVsZW1lbnQgPSBmdW5jdGlvbihhbGxCaW5kaW5ncywgbm9kZSwgYmluZGluZ0NvbnRleHQsIHZhbHVlQWNjZXNzb3JzKSB7XG4gICAgICAgIC8vIERldGVybWluZSBpZiBpdCdzIHJlYWxseSBhIGN1c3RvbSBlbGVtZW50IG1hdGNoaW5nIGEgY29tcG9uZW50XG4gICAgICAgIGlmIChub2RlLm5vZGVUeXBlID09PSAxKSB7XG4gICAgICAgICAgICB2YXIgY29tcG9uZW50TmFtZSA9IGtvLmNvbXBvbmVudHNbJ2dldENvbXBvbmVudE5hbWVGb3JOb2RlJ10obm9kZSk7XG4gICAgICAgICAgICBpZiAoY29tcG9uZW50TmFtZSkge1xuICAgICAgICAgICAgICAgIC8vIEl0IGRvZXMgcmVwcmVzZW50IGEgY29tcG9uZW50LCBzbyBhZGQgYSBjb21wb25lbnQgYmluZGluZyBmb3IgaXRcbiAgICAgICAgICAgICAgICBhbGxCaW5kaW5ncyA9IGFsbEJpbmRpbmdzIHx8IHt9O1xuXG4gICAgICAgICAgICAgICAgaWYgKGFsbEJpbmRpbmdzWydjb21wb25lbnQnXSkge1xuICAgICAgICAgICAgICAgICAgICAvLyBBdm9pZCBzaWxlbnRseSBvdmVyd3JpdGluZyBzb21lIG90aGVyICdjb21wb25lbnQnIGJpbmRpbmcgdGhhdCBtYXkgYWxyZWFkeSBiZSBvbiB0aGUgZWxlbWVudFxuICAgICAgICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ0Nhbm5vdCB1c2UgdGhlIFwiY29tcG9uZW50XCIgYmluZGluZyBvbiBhIGN1c3RvbSBlbGVtZW50IG1hdGNoaW5nIGEgY29tcG9uZW50Jyk7XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgdmFyIGNvbXBvbmVudEJpbmRpbmdWYWx1ZSA9IHsgJ25hbWUnOiBjb21wb25lbnROYW1lLCAncGFyYW1zJzogZ2V0Q29tcG9uZW50UGFyYW1zRnJvbUN1c3RvbUVsZW1lbnQobm9kZSwgYmluZGluZ0NvbnRleHQpIH07XG5cbiAgICAgICAgICAgICAgICBhbGxCaW5kaW5nc1snY29tcG9uZW50J10gPSB2YWx1ZUFjY2Vzc29yc1xuICAgICAgICAgICAgICAgICAgICA/IGZ1bmN0aW9uKCkgeyByZXR1cm4gY29tcG9uZW50QmluZGluZ1ZhbHVlOyB9XG4gICAgICAgICAgICAgICAgICAgIDogY29tcG9uZW50QmluZGluZ1ZhbHVlO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIGFsbEJpbmRpbmdzO1xuICAgIH1cblxuICAgIHZhciBuYXRpdmVCaW5kaW5nUHJvdmlkZXJJbnN0YW5jZSA9IG5ldyBrby5iaW5kaW5nUHJvdmlkZXIoKTtcblxuICAgIGZ1bmN0aW9uIGdldENvbXBvbmVudFBhcmFtc0Zyb21DdXN0b21FbGVtZW50KGVsZW0sIGJpbmRpbmdDb250ZXh0KSB7XG4gICAgICAgIHZhciBwYXJhbXNBdHRyaWJ1dGUgPSBlbGVtLmdldEF0dHJpYnV0ZSgncGFyYW1zJyk7XG5cbiAgICAgICAgaWYgKHBhcmFtc0F0dHJpYnV0ZSkge1xuICAgICAgICAgICAgdmFyIHBhcmFtcyA9IG5hdGl2ZUJpbmRpbmdQcm92aWRlckluc3RhbmNlWydwYXJzZUJpbmRpbmdzU3RyaW5nJ10ocGFyYW1zQXR0cmlidXRlLCBiaW5kaW5nQ29udGV4dCwgZWxlbSwgeyAndmFsdWVBY2Nlc3NvcnMnOiB0cnVlLCAnYmluZGluZ1BhcmFtcyc6IHRydWUgfSksXG4gICAgICAgICAgICAgICAgcmF3UGFyYW1Db21wdXRlZFZhbHVlcyA9IGtvLnV0aWxzLm9iamVjdE1hcChwYXJhbXMsIGZ1bmN0aW9uKHBhcmFtVmFsdWUsIHBhcmFtTmFtZSkge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4ga28uY29tcHV0ZWQocGFyYW1WYWx1ZSwgbnVsbCwgeyBkaXNwb3NlV2hlbk5vZGVJc1JlbW92ZWQ6IGVsZW0gfSk7XG4gICAgICAgICAgICAgICAgfSksXG4gICAgICAgICAgICAgICAgcmVzdWx0ID0ga28udXRpbHMub2JqZWN0TWFwKHJhd1BhcmFtQ29tcHV0ZWRWYWx1ZXMsIGZ1bmN0aW9uKHBhcmFtVmFsdWVDb21wdXRlZCwgcGFyYW1OYW1lKSB7XG4gICAgICAgICAgICAgICAgICAgIHZhciBwYXJhbVZhbHVlID0gcGFyYW1WYWx1ZUNvbXB1dGVkLnBlZWsoKTtcbiAgICAgICAgICAgICAgICAgICAgLy8gRG9lcyB0aGUgZXZhbHVhdGlvbiBvZiB0aGUgcGFyYW1ldGVyIHZhbHVlIHVud3JhcCBhbnkgb2JzZXJ2YWJsZXM/XG4gICAgICAgICAgICAgICAgICAgIGlmICghcGFyYW1WYWx1ZUNvbXB1dGVkLmlzQWN0aXZlKCkpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIE5vIGl0IGRvZXNuJ3QsIHNvIHRoZXJlJ3Mgbm8gbmVlZCBmb3IgYW55IGNvbXB1dGVkIHdyYXBwZXIuIEp1c3QgcGFzcyB0aHJvdWdoIHRoZSBzdXBwbGllZCB2YWx1ZSBkaXJlY3RseS5cbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIEV4YW1wbGU6IFwic29tZVZhbDogZmlyc3ROYW1lLCBhZ2U6IDEyM1wiICh3aGV0aGVyIG9yIG5vdCBmaXJzdE5hbWUgaXMgYW4gb2JzZXJ2YWJsZS9jb21wdXRlZClcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBwYXJhbVZhbHVlO1xuICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgLy8gWWVzIGl0IGRvZXMuIFN1cHBseSBhIGNvbXB1dGVkIHByb3BlcnR5IHRoYXQgdW53cmFwcyBib3RoIHRoZSBvdXRlciAoYmluZGluZyBleHByZXNzaW9uKVxuICAgICAgICAgICAgICAgICAgICAgICAgLy8gbGV2ZWwgb2Ygb2JzZXJ2YWJpbGl0eSwgYW5kIGFueSBpbm5lciAocmVzdWx0aW5nIG1vZGVsIHZhbHVlKSBsZXZlbCBvZiBvYnNlcnZhYmlsaXR5LlxuICAgICAgICAgICAgICAgICAgICAgICAgLy8gVGhpcyBtZWFucyB0aGUgY29tcG9uZW50IGRvZXNuJ3QgaGF2ZSB0byB3b3JyeSBhYm91dCBtdWx0aXBsZSB1bndyYXBwaW5nLiBJZiB0aGUgdmFsdWUgaXMgYVxuICAgICAgICAgICAgICAgICAgICAgICAgLy8gd3JpdGFibGUgb2JzZXJ2YWJsZSwgdGhlIGNvbXB1dGVkIHdpbGwgYWxzbyBiZSB3cml0YWJsZSBhbmQgcGFzcyB0aGUgdmFsdWUgb24gdG8gdGhlIG9ic2VydmFibGUuXG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4ga28uY29tcHV0ZWQoe1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICdyZWFkJzogZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBrby51dGlscy51bndyYXBPYnNlcnZhYmxlKHBhcmFtVmFsdWVDb21wdXRlZCgpKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICd3cml0ZSc6IGtvLmlzV3JpdGVhYmxlT2JzZXJ2YWJsZShwYXJhbVZhbHVlKSAmJiBmdW5jdGlvbih2YWx1ZSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBwYXJhbVZhbHVlQ29tcHV0ZWQoKSh2YWx1ZSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBkaXNwb3NlV2hlbk5vZGVJc1JlbW92ZWQ6IGVsZW1cbiAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgIC8vIEdpdmUgYWNjZXNzIHRvIHRoZSByYXcgY29tcHV0ZWRzLCBhcyBsb25nIGFzIHRoYXQgd291bGRuJ3Qgb3ZlcndyaXRlIGFueSBjdXN0b20gcGFyYW0gYWxzbyBjYWxsZWQgJyRyYXcnXG4gICAgICAgICAgICAvLyBUaGlzIGlzIGluIGNhc2UgdGhlIGRldmVsb3BlciB3YW50cyB0byByZWFjdCB0byBvdXRlciAoYmluZGluZykgb2JzZXJ2YWJpbGl0eSBzZXBhcmF0ZWx5IGZyb20gaW5uZXJcbiAgICAgICAgICAgIC8vIChtb2RlbCB2YWx1ZSkgb2JzZXJ2YWJpbGl0eSwgb3IgaW4gY2FzZSB0aGUgbW9kZWwgdmFsdWUgb2JzZXJ2YWJsZSBoYXMgc3Vib2JzZXJ2YWJsZXMuXG4gICAgICAgICAgICBpZiAoIXJlc3VsdC5oYXNPd25Qcm9wZXJ0eSgnJHJhdycpKSB7XG4gICAgICAgICAgICAgICAgcmVzdWx0WyckcmF3J10gPSByYXdQYXJhbUNvbXB1dGVkVmFsdWVzO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICByZXR1cm4gcmVzdWx0O1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgLy8gRm9yIGNvbnNpc3RlbmN5LCBhYnNlbmNlIG9mIGEgXCJwYXJhbXNcIiBhdHRyaWJ1dGUgaXMgdHJlYXRlZCB0aGUgc2FtZSBhcyB0aGUgcHJlc2VuY2Ugb2ZcbiAgICAgICAgICAgIC8vIGFueSBlbXB0eSBvbmUuIE90aGVyd2lzZSBjb21wb25lbnQgdmlld21vZGVscyBuZWVkIHNwZWNpYWwgY29kZSB0byBjaGVjayB3aGV0aGVyIG9yIG5vdFxuICAgICAgICAgICAgLy8gJ3BhcmFtcycgb3IgJ3BhcmFtcy4kcmF3JyBpcyBudWxsL3VuZGVmaW5lZCBiZWZvcmUgcmVhZGluZyBzdWJwcm9wZXJ0aWVzLCB3aGljaCBpcyBhbm5veWluZy5cbiAgICAgICAgICAgIHJldHVybiB7ICckcmF3Jzoge30gfTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIC8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gICAgLy8gQ29tcGF0aWJpbGl0eSBjb2RlIGZvciBvbGRlciAocHJlLUhUTUw1KSBJRSBicm93c2Vyc1xuXG4gICAgaWYgKGtvLnV0aWxzLmllVmVyc2lvbiA8IDkpIHtcbiAgICAgICAgLy8gV2hlbmV2ZXIgeW91IHByZXJlZ2lzdGVyIGEgY29tcG9uZW50LCBlbmFibGUgaXQgYXMgYSBjdXN0b20gZWxlbWVudCBpbiB0aGUgY3VycmVudCBkb2N1bWVudFxuICAgICAgICBrby5jb21wb25lbnRzWydyZWdpc3RlciddID0gKGZ1bmN0aW9uKG9yaWdpbmFsRnVuY3Rpb24pIHtcbiAgICAgICAgICAgIHJldHVybiBmdW5jdGlvbihjb21wb25lbnROYW1lKSB7XG4gICAgICAgICAgICAgICAgZG9jdW1lbnQuY3JlYXRlRWxlbWVudChjb21wb25lbnROYW1lKTsgLy8gQWxsb3dzIElFPDkgdG8gcGFyc2UgbWFya3VwIGNvbnRhaW5pbmcgdGhlIGN1c3RvbSBlbGVtZW50XG4gICAgICAgICAgICAgICAgcmV0dXJuIG9yaWdpbmFsRnVuY3Rpb24uYXBwbHkodGhpcywgYXJndW1lbnRzKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSkoa28uY29tcG9uZW50c1sncmVnaXN0ZXInXSk7XG5cbiAgICAgICAgLy8gV2hlbmV2ZXIgeW91IGNyZWF0ZSBhIGRvY3VtZW50IGZyYWdtZW50LCBlbmFibGUgYWxsIHByZXJlZ2lzdGVyZWQgY29tcG9uZW50IG5hbWVzIGFzIGN1c3RvbSBlbGVtZW50c1xuICAgICAgICAvLyBUaGlzIGlzIG5lZWRlZCB0byBtYWtlIGlubmVyU2hpdi9qUXVlcnkgSFRNTCBwYXJzaW5nIGNvcnJlY3RseSBoYW5kbGUgdGhlIGN1c3RvbSBlbGVtZW50c1xuICAgICAgICBkb2N1bWVudC5jcmVhdGVEb2N1bWVudEZyYWdtZW50ID0gKGZ1bmN0aW9uKG9yaWdpbmFsRnVuY3Rpb24pIHtcbiAgICAgICAgICAgIHJldHVybiBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgICAgICB2YXIgbmV3RG9jRnJhZyA9IG9yaWdpbmFsRnVuY3Rpb24oKSxcbiAgICAgICAgICAgICAgICAgICAgYWxsQ29tcG9uZW50cyA9IGtvLmNvbXBvbmVudHMuX2FsbFJlZ2lzdGVyZWRDb21wb25lbnRzO1xuICAgICAgICAgICAgICAgIGZvciAodmFyIGNvbXBvbmVudE5hbWUgaW4gYWxsQ29tcG9uZW50cykge1xuICAgICAgICAgICAgICAgICAgICBpZiAoYWxsQ29tcG9uZW50cy5oYXNPd25Qcm9wZXJ0eShjb21wb25lbnROYW1lKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgbmV3RG9jRnJhZy5jcmVhdGVFbGVtZW50KGNvbXBvbmVudE5hbWUpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHJldHVybiBuZXdEb2NGcmFnO1xuICAgICAgICAgICAgfTtcbiAgICAgICAgfSkoZG9jdW1lbnQuY3JlYXRlRG9jdW1lbnRGcmFnbWVudCk7XG4gICAgfVxufSkoKTsoZnVuY3Rpb24odW5kZWZpbmVkKSB7XG5cbiAgICB2YXIgY29tcG9uZW50TG9hZGluZ09wZXJhdGlvblVuaXF1ZUlkID0gMDtcblxuICAgIGtvLmJpbmRpbmdIYW5kbGVyc1snY29tcG9uZW50J10gPSB7XG4gICAgICAgICdpbml0JzogZnVuY3Rpb24oZWxlbWVudCwgdmFsdWVBY2Nlc3NvciwgaWdub3JlZDEsIGlnbm9yZWQyLCBiaW5kaW5nQ29udGV4dCkge1xuICAgICAgICAgICAgdmFyIGN1cnJlbnRWaWV3TW9kZWwsXG4gICAgICAgICAgICAgICAgY3VycmVudExvYWRpbmdPcGVyYXRpb25JZCxcbiAgICAgICAgICAgICAgICBkaXNwb3NlQXNzb2NpYXRlZENvbXBvbmVudFZpZXdNb2RlbCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICAgICAgdmFyIGN1cnJlbnRWaWV3TW9kZWxEaXNwb3NlID0gY3VycmVudFZpZXdNb2RlbCAmJiBjdXJyZW50Vmlld01vZGVsWydkaXNwb3NlJ107XG4gICAgICAgICAgICAgICAgICAgIGlmICh0eXBlb2YgY3VycmVudFZpZXdNb2RlbERpc3Bvc2UgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGN1cnJlbnRWaWV3TW9kZWxEaXNwb3NlLmNhbGwoY3VycmVudFZpZXdNb2RlbCk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgY3VycmVudFZpZXdNb2RlbCA9IG51bGw7XG4gICAgICAgICAgICAgICAgICAgIC8vIEFueSBpbi1mbGlnaHQgbG9hZGluZyBvcGVyYXRpb24gaXMgbm8gbG9uZ2VyIHJlbGV2YW50LCBzbyBtYWtlIHN1cmUgd2UgaWdub3JlIGl0cyBjb21wbGV0aW9uXG4gICAgICAgICAgICAgICAgICAgIGN1cnJlbnRMb2FkaW5nT3BlcmF0aW9uSWQgPSBudWxsO1xuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgb3JpZ2luYWxDaGlsZE5vZGVzID0ga28udXRpbHMubWFrZUFycmF5KGtvLnZpcnR1YWxFbGVtZW50cy5jaGlsZE5vZGVzKGVsZW1lbnQpKTtcblxuICAgICAgICAgICAga28udXRpbHMuZG9tTm9kZURpc3Bvc2FsLmFkZERpc3Bvc2VDYWxsYmFjayhlbGVtZW50LCBkaXNwb3NlQXNzb2NpYXRlZENvbXBvbmVudFZpZXdNb2RlbCk7XG5cbiAgICAgICAgICAgIGtvLmNvbXB1dGVkKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICB2YXIgdmFsdWUgPSBrby51dGlscy51bndyYXBPYnNlcnZhYmxlKHZhbHVlQWNjZXNzb3IoKSksXG4gICAgICAgICAgICAgICAgICAgIGNvbXBvbmVudE5hbWUsIGNvbXBvbmVudFBhcmFtcztcblxuICAgICAgICAgICAgICAgIGlmICh0eXBlb2YgdmFsdWUgPT09ICdzdHJpbmcnKSB7XG4gICAgICAgICAgICAgICAgICAgIGNvbXBvbmVudE5hbWUgPSB2YWx1ZTtcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICBjb21wb25lbnROYW1lID0ga28udXRpbHMudW53cmFwT2JzZXJ2YWJsZSh2YWx1ZVsnbmFtZSddKTtcbiAgICAgICAgICAgICAgICAgICAgY29tcG9uZW50UGFyYW1zID0ga28udXRpbHMudW53cmFwT2JzZXJ2YWJsZSh2YWx1ZVsncGFyYW1zJ10pO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIGlmICghY29tcG9uZW50TmFtZSkge1xuICAgICAgICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ05vIGNvbXBvbmVudCBuYW1lIHNwZWNpZmllZCcpO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIHZhciBsb2FkaW5nT3BlcmF0aW9uSWQgPSBjdXJyZW50TG9hZGluZ09wZXJhdGlvbklkID0gKytjb21wb25lbnRMb2FkaW5nT3BlcmF0aW9uVW5pcXVlSWQ7XG4gICAgICAgICAgICAgICAga28uY29tcG9uZW50cy5nZXQoY29tcG9uZW50TmFtZSwgZnVuY3Rpb24oY29tcG9uZW50RGVmaW5pdGlvbikge1xuICAgICAgICAgICAgICAgICAgICAvLyBJZiB0aGlzIGlzIG5vdCB0aGUgY3VycmVudCBsb2FkIG9wZXJhdGlvbiBmb3IgdGhpcyBlbGVtZW50LCBpZ25vcmUgaXQuXG4gICAgICAgICAgICAgICAgICAgIGlmIChjdXJyZW50TG9hZGluZ09wZXJhdGlvbklkICE9PSBsb2FkaW5nT3BlcmF0aW9uSWQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgIC8vIENsZWFuIHVwIHByZXZpb3VzIHN0YXRlXG4gICAgICAgICAgICAgICAgICAgIGRpc3Bvc2VBc3NvY2lhdGVkQ29tcG9uZW50Vmlld01vZGVsKCk7XG5cbiAgICAgICAgICAgICAgICAgICAgLy8gSW5zdGFudGlhdGUgYW5kIGJpbmQgbmV3IGNvbXBvbmVudC4gSW1wbGljaXRseSB0aGlzIGNsZWFucyBhbnkgb2xkIERPTSBub2Rlcy5cbiAgICAgICAgICAgICAgICAgICAgaWYgKCFjb21wb25lbnREZWZpbml0aW9uKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ1Vua25vd24gY29tcG9uZW50IFxcJycgKyBjb21wb25lbnROYW1lICsgJ1xcJycpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIGNsb25lVGVtcGxhdGVJbnRvRWxlbWVudChjb21wb25lbnROYW1lLCBjb21wb25lbnREZWZpbml0aW9uLCBlbGVtZW50KTtcbiAgICAgICAgICAgICAgICAgICAgdmFyIGNvbXBvbmVudFZpZXdNb2RlbCA9IGNyZWF0ZVZpZXdNb2RlbChjb21wb25lbnREZWZpbml0aW9uLCBlbGVtZW50LCBvcmlnaW5hbENoaWxkTm9kZXMsIGNvbXBvbmVudFBhcmFtcyksXG4gICAgICAgICAgICAgICAgICAgICAgICBjaGlsZEJpbmRpbmdDb250ZXh0ID0gYmluZGluZ0NvbnRleHRbJ2NyZWF0ZUNoaWxkQ29udGV4dCddKGNvbXBvbmVudFZpZXdNb2RlbCwgLyogZGF0YUl0ZW1BbGlhcyAqLyB1bmRlZmluZWQsIGZ1bmN0aW9uKGN0eCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGN0eFsnJGNvbXBvbmVudCddID0gY29tcG9uZW50Vmlld01vZGVsO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGN0eFsnJGNvbXBvbmVudFRlbXBsYXRlTm9kZXMnXSA9IG9yaWdpbmFsQ2hpbGROb2RlcztcbiAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgICBjdXJyZW50Vmlld01vZGVsID0gY29tcG9uZW50Vmlld01vZGVsO1xuICAgICAgICAgICAgICAgICAgICBrby5hcHBseUJpbmRpbmdzVG9EZXNjZW5kYW50cyhjaGlsZEJpbmRpbmdDb250ZXh0LCBlbGVtZW50KTtcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH0sIG51bGwsIHsgZGlzcG9zZVdoZW5Ob2RlSXNSZW1vdmVkOiBlbGVtZW50IH0pO1xuXG4gICAgICAgICAgICByZXR1cm4geyAnY29udHJvbHNEZXNjZW5kYW50QmluZGluZ3MnOiB0cnVlIH07XG4gICAgICAgIH1cbiAgICB9O1xuXG4gICAga28udmlydHVhbEVsZW1lbnRzLmFsbG93ZWRCaW5kaW5nc1snY29tcG9uZW50J10gPSB0cnVlO1xuXG4gICAgZnVuY3Rpb24gY2xvbmVUZW1wbGF0ZUludG9FbGVtZW50KGNvbXBvbmVudE5hbWUsIGNvbXBvbmVudERlZmluaXRpb24sIGVsZW1lbnQpIHtcbiAgICAgICAgdmFyIHRlbXBsYXRlID0gY29tcG9uZW50RGVmaW5pdGlvblsndGVtcGxhdGUnXTtcbiAgICAgICAgaWYgKCF0ZW1wbGF0ZSkge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdDb21wb25lbnQgXFwnJyArIGNvbXBvbmVudE5hbWUgKyAnXFwnIGhhcyBubyB0ZW1wbGF0ZScpO1xuICAgICAgICB9XG5cbiAgICAgICAgdmFyIGNsb25lZE5vZGVzQXJyYXkgPSBrby51dGlscy5jbG9uZU5vZGVzKHRlbXBsYXRlKTtcbiAgICAgICAga28udmlydHVhbEVsZW1lbnRzLnNldERvbU5vZGVDaGlsZHJlbihlbGVtZW50LCBjbG9uZWROb2Rlc0FycmF5KTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBjcmVhdGVWaWV3TW9kZWwoY29tcG9uZW50RGVmaW5pdGlvbiwgZWxlbWVudCwgb3JpZ2luYWxDaGlsZE5vZGVzLCBjb21wb25lbnRQYXJhbXMpIHtcbiAgICAgICAgdmFyIGNvbXBvbmVudFZpZXdNb2RlbEZhY3RvcnkgPSBjb21wb25lbnREZWZpbml0aW9uWydjcmVhdGVWaWV3TW9kZWwnXTtcbiAgICAgICAgcmV0dXJuIGNvbXBvbmVudFZpZXdNb2RlbEZhY3RvcnlcbiAgICAgICAgICAgID8gY29tcG9uZW50Vmlld01vZGVsRmFjdG9yeS5jYWxsKGNvbXBvbmVudERlZmluaXRpb24sIGNvbXBvbmVudFBhcmFtcywgeyAnZWxlbWVudCc6IGVsZW1lbnQsICd0ZW1wbGF0ZU5vZGVzJzogb3JpZ2luYWxDaGlsZE5vZGVzIH0pXG4gICAgICAgICAgICA6IGNvbXBvbmVudFBhcmFtczsgLy8gVGVtcGxhdGUtb25seSBjb21wb25lbnRcbiAgICB9XG5cbn0pKCk7XG52YXIgYXR0ckh0bWxUb0phdmFzY3JpcHRNYXAgPSB7ICdjbGFzcyc6ICdjbGFzc05hbWUnLCAnZm9yJzogJ2h0bWxGb3InIH07XG5rby5iaW5kaW5nSGFuZGxlcnNbJ2F0dHInXSA9IHtcbiAgICAndXBkYXRlJzogZnVuY3Rpb24oZWxlbWVudCwgdmFsdWVBY2Nlc3NvciwgYWxsQmluZGluZ3MpIHtcbiAgICAgICAgdmFyIHZhbHVlID0ga28udXRpbHMudW53cmFwT2JzZXJ2YWJsZSh2YWx1ZUFjY2Vzc29yKCkpIHx8IHt9O1xuICAgICAgICBrby51dGlscy5vYmplY3RGb3JFYWNoKHZhbHVlLCBmdW5jdGlvbihhdHRyTmFtZSwgYXR0clZhbHVlKSB7XG4gICAgICAgICAgICBhdHRyVmFsdWUgPSBrby51dGlscy51bndyYXBPYnNlcnZhYmxlKGF0dHJWYWx1ZSk7XG5cbiAgICAgICAgICAgIC8vIFRvIGNvdmVyIGNhc2VzIGxpa2UgXCJhdHRyOiB7IGNoZWNrZWQ6c29tZVByb3AgfVwiLCB3ZSB3YW50IHRvIHJlbW92ZSB0aGUgYXR0cmlidXRlIGVudGlyZWx5XG4gICAgICAgICAgICAvLyB3aGVuIHNvbWVQcm9wIGlzIGEgXCJubyB2YWx1ZVwiLWxpa2UgdmFsdWUgKHN0cmljdGx5IG51bGwsIGZhbHNlLCBvciB1bmRlZmluZWQpXG4gICAgICAgICAgICAvLyAoYmVjYXVzZSB0aGUgYWJzZW5jZSBvZiB0aGUgXCJjaGVja2VkXCIgYXR0ciBpcyBob3cgdG8gbWFyayBhbiBlbGVtZW50IGFzIG5vdCBjaGVja2VkLCBldGMuKVxuICAgICAgICAgICAgdmFyIHRvUmVtb3ZlID0gKGF0dHJWYWx1ZSA9PT0gZmFsc2UpIHx8IChhdHRyVmFsdWUgPT09IG51bGwpIHx8IChhdHRyVmFsdWUgPT09IHVuZGVmaW5lZCk7XG4gICAgICAgICAgICBpZiAodG9SZW1vdmUpXG4gICAgICAgICAgICAgICAgZWxlbWVudC5yZW1vdmVBdHRyaWJ1dGUoYXR0ck5hbWUpO1xuXG4gICAgICAgICAgICAvLyBJbiBJRSA8PSA3IGFuZCBJRTggUXVpcmtzIE1vZGUsIHlvdSBoYXZlIHRvIHVzZSB0aGUgSmF2YXNjcmlwdCBwcm9wZXJ0eSBuYW1lIGluc3RlYWQgb2YgdGhlXG4gICAgICAgICAgICAvLyBIVE1MIGF0dHJpYnV0ZSBuYW1lIGZvciBjZXJ0YWluIGF0dHJpYnV0ZXMuIElFOCBTdGFuZGFyZHMgTW9kZSBzdXBwb3J0cyB0aGUgY29ycmVjdCBiZWhhdmlvcixcbiAgICAgICAgICAgIC8vIGJ1dCBpbnN0ZWFkIG9mIGZpZ3VyaW5nIG91dCB0aGUgbW9kZSwgd2UnbGwganVzdCBzZXQgdGhlIGF0dHJpYnV0ZSB0aHJvdWdoIHRoZSBKYXZhc2NyaXB0XG4gICAgICAgICAgICAvLyBwcm9wZXJ0eSBmb3IgSUUgPD0gOC5cbiAgICAgICAgICAgIGlmIChrby51dGlscy5pZVZlcnNpb24gPD0gOCAmJiBhdHRyTmFtZSBpbiBhdHRySHRtbFRvSmF2YXNjcmlwdE1hcCkge1xuICAgICAgICAgICAgICAgIGF0dHJOYW1lID0gYXR0ckh0bWxUb0phdmFzY3JpcHRNYXBbYXR0ck5hbWVdO1xuICAgICAgICAgICAgICAgIGlmICh0b1JlbW92ZSlcbiAgICAgICAgICAgICAgICAgICAgZWxlbWVudC5yZW1vdmVBdHRyaWJ1dGUoYXR0ck5hbWUpO1xuICAgICAgICAgICAgICAgIGVsc2VcbiAgICAgICAgICAgICAgICAgICAgZWxlbWVudFthdHRyTmFtZV0gPSBhdHRyVmFsdWU7XG4gICAgICAgICAgICB9IGVsc2UgaWYgKCF0b1JlbW92ZSkge1xuICAgICAgICAgICAgICAgIGVsZW1lbnQuc2V0QXR0cmlidXRlKGF0dHJOYW1lLCBhdHRyVmFsdWUudG9TdHJpbmcoKSk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIC8vIFRyZWF0IFwibmFtZVwiIHNwZWNpYWxseSAtIGFsdGhvdWdoIHlvdSBjYW4gdGhpbmsgb2YgaXQgYXMgYW4gYXR0cmlidXRlLCBpdCBhbHNvIG5lZWRzXG4gICAgICAgICAgICAvLyBzcGVjaWFsIGhhbmRsaW5nIG9uIG9sZGVyIHZlcnNpb25zIG9mIElFIChodHRwczovL2dpdGh1Yi5jb20vU3RldmVTYW5kZXJzb24va25vY2tvdXQvcHVsbC8zMzMpXG4gICAgICAgICAgICAvLyBEZWxpYmVyYXRlbHkgYmVpbmcgY2FzZS1zZW5zaXRpdmUgaGVyZSBiZWNhdXNlIFhIVE1MIHdvdWxkIHJlZ2FyZCBcIk5hbWVcIiBhcyBhIGRpZmZlcmVudCB0aGluZ1xuICAgICAgICAgICAgLy8gZW50aXJlbHksIGFuZCB0aGVyZSdzIG5vIHN0cm9uZyByZWFzb24gdG8gYWxsb3cgZm9yIHN1Y2ggY2FzaW5nIGluIEhUTUwuXG4gICAgICAgICAgICBpZiAoYXR0ck5hbWUgPT09IFwibmFtZVwiKSB7XG4gICAgICAgICAgICAgICAga28udXRpbHMuc2V0RWxlbWVudE5hbWUoZWxlbWVudCwgdG9SZW1vdmUgPyBcIlwiIDogYXR0clZhbHVlLnRvU3RyaW5nKCkpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICB9XG59O1xuKGZ1bmN0aW9uKCkge1xuXG5rby5iaW5kaW5nSGFuZGxlcnNbJ2NoZWNrZWQnXSA9IHtcbiAgICAnYWZ0ZXInOiBbJ3ZhbHVlJywgJ2F0dHInXSxcbiAgICAnaW5pdCc6IGZ1bmN0aW9uIChlbGVtZW50LCB2YWx1ZUFjY2Vzc29yLCBhbGxCaW5kaW5ncykge1xuICAgICAgICB2YXIgY2hlY2tlZFZhbHVlID0ga28ucHVyZUNvbXB1dGVkKGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgLy8gVHJlYXQgXCJ2YWx1ZVwiIGxpa2UgXCJjaGVja2VkVmFsdWVcIiB3aGVuIGl0IGlzIGluY2x1ZGVkIHdpdGggXCJjaGVja2VkXCIgYmluZGluZ1xuICAgICAgICAgICAgaWYgKGFsbEJpbmRpbmdzWydoYXMnXSgnY2hlY2tlZFZhbHVlJykpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4ga28udXRpbHMudW53cmFwT2JzZXJ2YWJsZShhbGxCaW5kaW5ncy5nZXQoJ2NoZWNrZWRWYWx1ZScpKTtcbiAgICAgICAgICAgIH0gZWxzZSBpZiAoYWxsQmluZGluZ3NbJ2hhcyddKCd2YWx1ZScpKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGtvLnV0aWxzLnVud3JhcE9ic2VydmFibGUoYWxsQmluZGluZ3MuZ2V0KCd2YWx1ZScpKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgcmV0dXJuIGVsZW1lbnQudmFsdWU7XG4gICAgICAgIH0pO1xuXG4gICAgICAgIGZ1bmN0aW9uIHVwZGF0ZU1vZGVsKCkge1xuICAgICAgICAgICAgLy8gVGhpcyB1cGRhdGVzIHRoZSBtb2RlbCB2YWx1ZSBmcm9tIHRoZSB2aWV3IHZhbHVlLlxuICAgICAgICAgICAgLy8gSXQgcnVucyBpbiByZXNwb25zZSB0byBET00gZXZlbnRzIChjbGljaykgYW5kIGNoYW5nZXMgaW4gY2hlY2tlZFZhbHVlLlxuICAgICAgICAgICAgdmFyIGlzQ2hlY2tlZCA9IGVsZW1lbnQuY2hlY2tlZCxcbiAgICAgICAgICAgICAgICBlbGVtVmFsdWUgPSB1c2VDaGVja2VkVmFsdWUgPyBjaGVja2VkVmFsdWUoKSA6IGlzQ2hlY2tlZDtcblxuICAgICAgICAgICAgLy8gV2hlbiB3ZSdyZSBmaXJzdCBzZXR0aW5nIHVwIHRoaXMgY29tcHV0ZWQsIGRvbid0IGNoYW5nZSBhbnkgbW9kZWwgc3RhdGUuXG4gICAgICAgICAgICBpZiAoa28uY29tcHV0ZWRDb250ZXh0LmlzSW5pdGlhbCgpKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAvLyBXZSBjYW4gaWdub3JlIHVuY2hlY2tlZCByYWRpbyBidXR0b25zLCBiZWNhdXNlIHNvbWUgb3RoZXIgcmFkaW9cbiAgICAgICAgICAgIC8vIGJ1dHRvbiB3aWxsIGJlIGdldHRpbmcgY2hlY2tlZCwgYW5kIHRoYXQgb25lIGNhbiB0YWtlIGNhcmUgb2YgdXBkYXRpbmcgc3RhdGUuXG4gICAgICAgICAgICBpZiAoaXNSYWRpbyAmJiAhaXNDaGVja2VkKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICB2YXIgbW9kZWxWYWx1ZSA9IGtvLmRlcGVuZGVuY3lEZXRlY3Rpb24uaWdub3JlKHZhbHVlQWNjZXNzb3IpO1xuICAgICAgICAgICAgaWYgKHZhbHVlSXNBcnJheSkge1xuICAgICAgICAgICAgICAgIHZhciB3cml0YWJsZVZhbHVlID0gcmF3VmFsdWVJc05vbkFycmF5T2JzZXJ2YWJsZSA/IG1vZGVsVmFsdWUucGVlaygpIDogbW9kZWxWYWx1ZTtcbiAgICAgICAgICAgICAgICBpZiAob2xkRWxlbVZhbHVlICE9PSBlbGVtVmFsdWUpIHtcbiAgICAgICAgICAgICAgICAgICAgLy8gV2hlbiB3ZSdyZSByZXNwb25kaW5nIHRvIHRoZSBjaGVja2VkVmFsdWUgY2hhbmdpbmcsIGFuZCB0aGUgZWxlbWVudCBpc1xuICAgICAgICAgICAgICAgICAgICAvLyBjdXJyZW50bHkgY2hlY2tlZCwgcmVwbGFjZSB0aGUgb2xkIGVsZW0gdmFsdWUgd2l0aCB0aGUgbmV3IGVsZW0gdmFsdWVcbiAgICAgICAgICAgICAgICAgICAgLy8gaW4gdGhlIG1vZGVsIGFycmF5LlxuICAgICAgICAgICAgICAgICAgICBpZiAoaXNDaGVja2VkKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBrby51dGlscy5hZGRPclJlbW92ZUl0ZW0od3JpdGFibGVWYWx1ZSwgZWxlbVZhbHVlLCB0cnVlKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGtvLnV0aWxzLmFkZE9yUmVtb3ZlSXRlbSh3cml0YWJsZVZhbHVlLCBvbGRFbGVtVmFsdWUsIGZhbHNlKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgIG9sZEVsZW1WYWx1ZSA9IGVsZW1WYWx1ZTtcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAvLyBXaGVuIHdlJ3JlIHJlc3BvbmRpbmcgdG8gdGhlIHVzZXIgaGF2aW5nIGNoZWNrZWQvdW5jaGVja2VkIGEgY2hlY2tib3gsXG4gICAgICAgICAgICAgICAgICAgIC8vIGFkZC9yZW1vdmUgdGhlIGVsZW1lbnQgdmFsdWUgdG8gdGhlIG1vZGVsIGFycmF5LlxuICAgICAgICAgICAgICAgICAgICBrby51dGlscy5hZGRPclJlbW92ZUl0ZW0od3JpdGFibGVWYWx1ZSwgZWxlbVZhbHVlLCBpc0NoZWNrZWQpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBpZiAocmF3VmFsdWVJc05vbkFycmF5T2JzZXJ2YWJsZSAmJiBrby5pc1dyaXRlYWJsZU9ic2VydmFibGUobW9kZWxWYWx1ZSkpIHtcbiAgICAgICAgICAgICAgICAgICAgbW9kZWxWYWx1ZSh3cml0YWJsZVZhbHVlKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIGtvLmV4cHJlc3Npb25SZXdyaXRpbmcud3JpdGVWYWx1ZVRvUHJvcGVydHkobW9kZWxWYWx1ZSwgYWxsQmluZGluZ3MsICdjaGVja2VkJywgZWxlbVZhbHVlLCB0cnVlKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfTtcblxuICAgICAgICBmdW5jdGlvbiB1cGRhdGVWaWV3KCkge1xuICAgICAgICAgICAgLy8gVGhpcyB1cGRhdGVzIHRoZSB2aWV3IHZhbHVlIGZyb20gdGhlIG1vZGVsIHZhbHVlLlxuICAgICAgICAgICAgLy8gSXQgcnVucyBpbiByZXNwb25zZSB0byBjaGFuZ2VzIGluIHRoZSBib3VuZCAoY2hlY2tlZCkgdmFsdWUuXG4gICAgICAgICAgICB2YXIgbW9kZWxWYWx1ZSA9IGtvLnV0aWxzLnVud3JhcE9ic2VydmFibGUodmFsdWVBY2Nlc3NvcigpKTtcblxuICAgICAgICAgICAgaWYgKHZhbHVlSXNBcnJheSkge1xuICAgICAgICAgICAgICAgIC8vIFdoZW4gYSBjaGVja2JveCBpcyBib3VuZCB0byBhbiBhcnJheSwgYmVpbmcgY2hlY2tlZCByZXByZXNlbnRzIGl0cyB2YWx1ZSBiZWluZyBwcmVzZW50IGluIHRoYXQgYXJyYXlcbiAgICAgICAgICAgICAgICBlbGVtZW50LmNoZWNrZWQgPSBrby51dGlscy5hcnJheUluZGV4T2YobW9kZWxWYWx1ZSwgY2hlY2tlZFZhbHVlKCkpID49IDA7XG4gICAgICAgICAgICB9IGVsc2UgaWYgKGlzQ2hlY2tib3gpIHtcbiAgICAgICAgICAgICAgICAvLyBXaGVuIGEgY2hlY2tib3ggaXMgYm91bmQgdG8gYW55IG90aGVyIHZhbHVlIChub3QgYW4gYXJyYXkpLCBiZWluZyBjaGVja2VkIHJlcHJlc2VudHMgdGhlIHZhbHVlIGJlaW5nIHRydWVpc2hcbiAgICAgICAgICAgICAgICBlbGVtZW50LmNoZWNrZWQgPSBtb2RlbFZhbHVlO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAvLyBGb3IgcmFkaW8gYnV0dG9ucywgYmVpbmcgY2hlY2tlZCBtZWFucyB0aGF0IHRoZSByYWRpbyBidXR0b24ncyB2YWx1ZSBjb3JyZXNwb25kcyB0byB0aGUgbW9kZWwgdmFsdWVcbiAgICAgICAgICAgICAgICBlbGVtZW50LmNoZWNrZWQgPSAoY2hlY2tlZFZhbHVlKCkgPT09IG1vZGVsVmFsdWUpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9O1xuXG4gICAgICAgIHZhciBpc0NoZWNrYm94ID0gZWxlbWVudC50eXBlID09IFwiY2hlY2tib3hcIixcbiAgICAgICAgICAgIGlzUmFkaW8gPSBlbGVtZW50LnR5cGUgPT0gXCJyYWRpb1wiO1xuXG4gICAgICAgIC8vIE9ubHkgYmluZCB0byBjaGVjayBib3hlcyBhbmQgcmFkaW8gYnV0dG9uc1xuICAgICAgICBpZiAoIWlzQ2hlY2tib3ggJiYgIWlzUmFkaW8pIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuXG4gICAgICAgIHZhciByYXdWYWx1ZSA9IHZhbHVlQWNjZXNzb3IoKSxcbiAgICAgICAgICAgIHZhbHVlSXNBcnJheSA9IGlzQ2hlY2tib3ggJiYgKGtvLnV0aWxzLnVud3JhcE9ic2VydmFibGUocmF3VmFsdWUpIGluc3RhbmNlb2YgQXJyYXkpLFxuICAgICAgICAgICAgcmF3VmFsdWVJc05vbkFycmF5T2JzZXJ2YWJsZSA9ICEodmFsdWVJc0FycmF5ICYmIHJhd1ZhbHVlLnB1c2ggJiYgcmF3VmFsdWUuc3BsaWNlKSxcbiAgICAgICAgICAgIG9sZEVsZW1WYWx1ZSA9IHZhbHVlSXNBcnJheSA/IGNoZWNrZWRWYWx1ZSgpIDogdW5kZWZpbmVkLFxuICAgICAgICAgICAgdXNlQ2hlY2tlZFZhbHVlID0gaXNSYWRpbyB8fCB2YWx1ZUlzQXJyYXk7XG5cbiAgICAgICAgLy8gSUUgNiB3b24ndCBhbGxvdyByYWRpbyBidXR0b25zIHRvIGJlIHNlbGVjdGVkIHVubGVzcyB0aGV5IGhhdmUgYSBuYW1lXG4gICAgICAgIGlmIChpc1JhZGlvICYmICFlbGVtZW50Lm5hbWUpXG4gICAgICAgICAgICBrby5iaW5kaW5nSGFuZGxlcnNbJ3VuaXF1ZU5hbWUnXVsnaW5pdCddKGVsZW1lbnQsIGZ1bmN0aW9uKCkgeyByZXR1cm4gdHJ1ZSB9KTtcblxuICAgICAgICAvLyBTZXQgdXAgdHdvIGNvbXB1dGVkcyB0byB1cGRhdGUgdGhlIGJpbmRpbmc6XG5cbiAgICAgICAgLy8gVGhlIGZpcnN0IHJlc3BvbmRzIHRvIGNoYW5nZXMgaW4gdGhlIGNoZWNrZWRWYWx1ZSB2YWx1ZSBhbmQgdG8gZWxlbWVudCBjbGlja3NcbiAgICAgICAga28uY29tcHV0ZWQodXBkYXRlTW9kZWwsIG51bGwsIHsgZGlzcG9zZVdoZW5Ob2RlSXNSZW1vdmVkOiBlbGVtZW50IH0pO1xuICAgICAgICBrby51dGlscy5yZWdpc3RlckV2ZW50SGFuZGxlcihlbGVtZW50LCBcImNsaWNrXCIsIHVwZGF0ZU1vZGVsKTtcblxuICAgICAgICAvLyBUaGUgc2Vjb25kIHJlc3BvbmRzIHRvIGNoYW5nZXMgaW4gdGhlIG1vZGVsIHZhbHVlICh0aGUgb25lIGFzc29jaWF0ZWQgd2l0aCB0aGUgY2hlY2tlZCBiaW5kaW5nKVxuICAgICAgICBrby5jb21wdXRlZCh1cGRhdGVWaWV3LCBudWxsLCB7IGRpc3Bvc2VXaGVuTm9kZUlzUmVtb3ZlZDogZWxlbWVudCB9KTtcblxuICAgICAgICByYXdWYWx1ZSA9IHVuZGVmaW5lZDtcbiAgICB9XG59O1xua28uZXhwcmVzc2lvblJld3JpdGluZy50d29XYXlCaW5kaW5nc1snY2hlY2tlZCddID0gdHJ1ZTtcblxua28uYmluZGluZ0hhbmRsZXJzWydjaGVja2VkVmFsdWUnXSA9IHtcbiAgICAndXBkYXRlJzogZnVuY3Rpb24gKGVsZW1lbnQsIHZhbHVlQWNjZXNzb3IpIHtcbiAgICAgICAgZWxlbWVudC52YWx1ZSA9IGtvLnV0aWxzLnVud3JhcE9ic2VydmFibGUodmFsdWVBY2Nlc3NvcigpKTtcbiAgICB9XG59O1xuXG59KSgpO3ZhciBjbGFzc2VzV3JpdHRlbkJ5QmluZGluZ0tleSA9ICdfX2tvX19jc3NWYWx1ZSc7XG5rby5iaW5kaW5nSGFuZGxlcnNbJ2NzcyddID0ge1xuICAgICd1cGRhdGUnOiBmdW5jdGlvbiAoZWxlbWVudCwgdmFsdWVBY2Nlc3Nvcikge1xuICAgICAgICB2YXIgdmFsdWUgPSBrby51dGlscy51bndyYXBPYnNlcnZhYmxlKHZhbHVlQWNjZXNzb3IoKSk7XG4gICAgICAgIGlmICh2YWx1ZSAhPT0gbnVsbCAmJiB0eXBlb2YgdmFsdWUgPT0gXCJvYmplY3RcIikge1xuICAgICAgICAgICAga28udXRpbHMub2JqZWN0Rm9yRWFjaCh2YWx1ZSwgZnVuY3Rpb24oY2xhc3NOYW1lLCBzaG91bGRIYXZlQ2xhc3MpIHtcbiAgICAgICAgICAgICAgICBzaG91bGRIYXZlQ2xhc3MgPSBrby51dGlscy51bndyYXBPYnNlcnZhYmxlKHNob3VsZEhhdmVDbGFzcyk7XG4gICAgICAgICAgICAgICAga28udXRpbHMudG9nZ2xlRG9tTm9kZUNzc0NsYXNzKGVsZW1lbnQsIGNsYXNzTmFtZSwgc2hvdWxkSGF2ZUNsYXNzKTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgdmFsdWUgPSBrby51dGlscy5zdHJpbmdUcmltKFN0cmluZyh2YWx1ZSB8fCAnJykpOyAvLyBNYWtlIHN1cmUgd2UgZG9uJ3QgdHJ5IHRvIHN0b3JlIG9yIHNldCBhIG5vbi1zdHJpbmcgdmFsdWVcbiAgICAgICAgICAgIGtvLnV0aWxzLnRvZ2dsZURvbU5vZGVDc3NDbGFzcyhlbGVtZW50LCBlbGVtZW50W2NsYXNzZXNXcml0dGVuQnlCaW5kaW5nS2V5XSwgZmFsc2UpO1xuICAgICAgICAgICAgZWxlbWVudFtjbGFzc2VzV3JpdHRlbkJ5QmluZGluZ0tleV0gPSB2YWx1ZTtcbiAgICAgICAgICAgIGtvLnV0aWxzLnRvZ2dsZURvbU5vZGVDc3NDbGFzcyhlbGVtZW50LCB2YWx1ZSwgdHJ1ZSk7XG4gICAgICAgIH1cbiAgICB9XG59O1xua28uYmluZGluZ0hhbmRsZXJzWydlbmFibGUnXSA9IHtcbiAgICAndXBkYXRlJzogZnVuY3Rpb24gKGVsZW1lbnQsIHZhbHVlQWNjZXNzb3IpIHtcbiAgICAgICAgdmFyIHZhbHVlID0ga28udXRpbHMudW53cmFwT2JzZXJ2YWJsZSh2YWx1ZUFjY2Vzc29yKCkpO1xuICAgICAgICBpZiAodmFsdWUgJiYgZWxlbWVudC5kaXNhYmxlZClcbiAgICAgICAgICAgIGVsZW1lbnQucmVtb3ZlQXR0cmlidXRlKFwiZGlzYWJsZWRcIik7XG4gICAgICAgIGVsc2UgaWYgKCghdmFsdWUpICYmICghZWxlbWVudC5kaXNhYmxlZCkpXG4gICAgICAgICAgICBlbGVtZW50LmRpc2FibGVkID0gdHJ1ZTtcbiAgICB9XG59O1xuXG5rby5iaW5kaW5nSGFuZGxlcnNbJ2Rpc2FibGUnXSA9IHtcbiAgICAndXBkYXRlJzogZnVuY3Rpb24gKGVsZW1lbnQsIHZhbHVlQWNjZXNzb3IpIHtcbiAgICAgICAga28uYmluZGluZ0hhbmRsZXJzWydlbmFibGUnXVsndXBkYXRlJ10oZWxlbWVudCwgZnVuY3Rpb24oKSB7IHJldHVybiAha28udXRpbHMudW53cmFwT2JzZXJ2YWJsZSh2YWx1ZUFjY2Vzc29yKCkpIH0pO1xuICAgIH1cbn07XG4vLyBGb3IgY2VydGFpbiBjb21tb24gZXZlbnRzIChjdXJyZW50bHkganVzdCAnY2xpY2snKSwgYWxsb3cgYSBzaW1wbGlmaWVkIGRhdGEtYmluZGluZyBzeW50YXhcbi8vIGUuZy4gY2xpY2s6aGFuZGxlciBpbnN0ZWFkIG9mIHRoZSB1c3VhbCBmdWxsLWxlbmd0aCBldmVudDp7Y2xpY2s6aGFuZGxlcn1cbmZ1bmN0aW9uIG1ha2VFdmVudEhhbmRsZXJTaG9ydGN1dChldmVudE5hbWUpIHtcbiAgICBrby5iaW5kaW5nSGFuZGxlcnNbZXZlbnROYW1lXSA9IHtcbiAgICAgICAgJ2luaXQnOiBmdW5jdGlvbihlbGVtZW50LCB2YWx1ZUFjY2Vzc29yLCBhbGxCaW5kaW5ncywgdmlld01vZGVsLCBiaW5kaW5nQ29udGV4dCkge1xuICAgICAgICAgICAgdmFyIG5ld1ZhbHVlQWNjZXNzb3IgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgdmFyIHJlc3VsdCA9IHt9O1xuICAgICAgICAgICAgICAgIHJlc3VsdFtldmVudE5hbWVdID0gdmFsdWVBY2Nlc3NvcigpO1xuICAgICAgICAgICAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgICAgICAgICB9O1xuICAgICAgICAgICAgcmV0dXJuIGtvLmJpbmRpbmdIYW5kbGVyc1snZXZlbnQnXVsnaW5pdCddLmNhbGwodGhpcywgZWxlbWVudCwgbmV3VmFsdWVBY2Nlc3NvciwgYWxsQmluZGluZ3MsIHZpZXdNb2RlbCwgYmluZGluZ0NvbnRleHQpO1xuICAgICAgICB9XG4gICAgfVxufVxuXG5rby5iaW5kaW5nSGFuZGxlcnNbJ2V2ZW50J10gPSB7XG4gICAgJ2luaXQnIDogZnVuY3Rpb24gKGVsZW1lbnQsIHZhbHVlQWNjZXNzb3IsIGFsbEJpbmRpbmdzLCB2aWV3TW9kZWwsIGJpbmRpbmdDb250ZXh0KSB7XG4gICAgICAgIHZhciBldmVudHNUb0hhbmRsZSA9IHZhbHVlQWNjZXNzb3IoKSB8fCB7fTtcbiAgICAgICAga28udXRpbHMub2JqZWN0Rm9yRWFjaChldmVudHNUb0hhbmRsZSwgZnVuY3Rpb24oZXZlbnROYW1lKSB7XG4gICAgICAgICAgICBpZiAodHlwZW9mIGV2ZW50TmFtZSA9PSBcInN0cmluZ1wiKSB7XG4gICAgICAgICAgICAgICAga28udXRpbHMucmVnaXN0ZXJFdmVudEhhbmRsZXIoZWxlbWVudCwgZXZlbnROYW1lLCBmdW5jdGlvbiAoZXZlbnQpIHtcbiAgICAgICAgICAgICAgICAgICAgdmFyIGhhbmRsZXJSZXR1cm5WYWx1ZTtcbiAgICAgICAgICAgICAgICAgICAgdmFyIGhhbmRsZXJGdW5jdGlvbiA9IHZhbHVlQWNjZXNzb3IoKVtldmVudE5hbWVdO1xuICAgICAgICAgICAgICAgICAgICBpZiAoIWhhbmRsZXJGdW5jdGlvbilcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybjtcblxuICAgICAgICAgICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgICAgICAgICAgLy8gVGFrZSBhbGwgdGhlIGV2ZW50IGFyZ3MsIGFuZCBwcmVmaXggd2l0aCB0aGUgdmlld21vZGVsXG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgYXJnc0ZvckhhbmRsZXIgPSBrby51dGlscy5tYWtlQXJyYXkoYXJndW1lbnRzKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHZpZXdNb2RlbCA9IGJpbmRpbmdDb250ZXh0WyckZGF0YSddO1xuICAgICAgICAgICAgICAgICAgICAgICAgYXJnc0ZvckhhbmRsZXIudW5zaGlmdCh2aWV3TW9kZWwpO1xuICAgICAgICAgICAgICAgICAgICAgICAgaGFuZGxlclJldHVyblZhbHVlID0gaGFuZGxlckZ1bmN0aW9uLmFwcGx5KHZpZXdNb2RlbCwgYXJnc0ZvckhhbmRsZXIpO1xuICAgICAgICAgICAgICAgICAgICB9IGZpbmFsbHkge1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGhhbmRsZXJSZXR1cm5WYWx1ZSAhPT0gdHJ1ZSkgeyAvLyBOb3JtYWxseSB3ZSB3YW50IHRvIHByZXZlbnQgZGVmYXVsdCBhY3Rpb24uIERldmVsb3BlciBjYW4gb3ZlcnJpZGUgdGhpcyBiZSBleHBsaWNpdGx5IHJldHVybmluZyB0cnVlLlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChldmVudC5wcmV2ZW50RGVmYXVsdClcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZXZlbnQucHJldmVudERlZmF1bHQoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBlbHNlXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGV2ZW50LnJldHVyblZhbHVlID0gZmFsc2U7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICB2YXIgYnViYmxlID0gYWxsQmluZGluZ3MuZ2V0KGV2ZW50TmFtZSArICdCdWJibGUnKSAhPT0gZmFsc2U7XG4gICAgICAgICAgICAgICAgICAgIGlmICghYnViYmxlKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBldmVudC5jYW5jZWxCdWJibGUgPSB0cnVlO1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGV2ZW50LnN0b3BQcm9wYWdhdGlvbilcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBldmVudC5zdG9wUHJvcGFnYXRpb24oKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICB9XG59O1xuLy8gXCJmb3JlYWNoOiBzb21lRXhwcmVzc2lvblwiIGlzIGVxdWl2YWxlbnQgdG8gXCJ0ZW1wbGF0ZTogeyBmb3JlYWNoOiBzb21lRXhwcmVzc2lvbiB9XCJcbi8vIFwiZm9yZWFjaDogeyBkYXRhOiBzb21lRXhwcmVzc2lvbiwgYWZ0ZXJBZGQ6IG15Zm4gfVwiIGlzIGVxdWl2YWxlbnQgdG8gXCJ0ZW1wbGF0ZTogeyBmb3JlYWNoOiBzb21lRXhwcmVzc2lvbiwgYWZ0ZXJBZGQ6IG15Zm4gfVwiXG5rby5iaW5kaW5nSGFuZGxlcnNbJ2ZvcmVhY2gnXSA9IHtcbiAgICBtYWtlVGVtcGxhdGVWYWx1ZUFjY2Vzc29yOiBmdW5jdGlvbih2YWx1ZUFjY2Vzc29yKSB7XG4gICAgICAgIHJldHVybiBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgIHZhciBtb2RlbFZhbHVlID0gdmFsdWVBY2Nlc3NvcigpLFxuICAgICAgICAgICAgICAgIHVud3JhcHBlZFZhbHVlID0ga28udXRpbHMucGVla09ic2VydmFibGUobW9kZWxWYWx1ZSk7ICAgIC8vIFVud3JhcCB3aXRob3V0IHNldHRpbmcgYSBkZXBlbmRlbmN5IGhlcmVcblxuICAgICAgICAgICAgLy8gSWYgdW53cmFwcGVkVmFsdWUgaXMgdGhlIGFycmF5LCBwYXNzIGluIHRoZSB3cmFwcGVkIHZhbHVlIG9uIGl0cyBvd25cbiAgICAgICAgICAgIC8vIFRoZSB2YWx1ZSB3aWxsIGJlIHVud3JhcHBlZCBhbmQgdHJhY2tlZCB3aXRoaW4gdGhlIHRlbXBsYXRlIGJpbmRpbmdcbiAgICAgICAgICAgIC8vIChTZWUgaHR0cHM6Ly9naXRodWIuY29tL1N0ZXZlU2FuZGVyc29uL2tub2Nrb3V0L2lzc3Vlcy81MjMpXG4gICAgICAgICAgICBpZiAoKCF1bndyYXBwZWRWYWx1ZSkgfHwgdHlwZW9mIHVud3JhcHBlZFZhbHVlLmxlbmd0aCA9PSBcIm51bWJlclwiKVxuICAgICAgICAgICAgICAgIHJldHVybiB7ICdmb3JlYWNoJzogbW9kZWxWYWx1ZSwgJ3RlbXBsYXRlRW5naW5lJzoga28ubmF0aXZlVGVtcGxhdGVFbmdpbmUuaW5zdGFuY2UgfTtcblxuICAgICAgICAgICAgLy8gSWYgdW53cmFwcGVkVmFsdWUuZGF0YSBpcyB0aGUgYXJyYXksIHByZXNlcnZlIGFsbCByZWxldmFudCBvcHRpb25zIGFuZCB1bndyYXAgYWdhaW4gdmFsdWUgc28gd2UgZ2V0IHVwZGF0ZXNcbiAgICAgICAgICAgIGtvLnV0aWxzLnVud3JhcE9ic2VydmFibGUobW9kZWxWYWx1ZSk7XG4gICAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgICAgICdmb3JlYWNoJzogdW53cmFwcGVkVmFsdWVbJ2RhdGEnXSxcbiAgICAgICAgICAgICAgICAnYXMnOiB1bndyYXBwZWRWYWx1ZVsnYXMnXSxcbiAgICAgICAgICAgICAgICAnaW5jbHVkZURlc3Ryb3llZCc6IHVud3JhcHBlZFZhbHVlWydpbmNsdWRlRGVzdHJveWVkJ10sXG4gICAgICAgICAgICAgICAgJ2FmdGVyQWRkJzogdW53cmFwcGVkVmFsdWVbJ2FmdGVyQWRkJ10sXG4gICAgICAgICAgICAgICAgJ2JlZm9yZVJlbW92ZSc6IHVud3JhcHBlZFZhbHVlWydiZWZvcmVSZW1vdmUnXSxcbiAgICAgICAgICAgICAgICAnYWZ0ZXJSZW5kZXInOiB1bndyYXBwZWRWYWx1ZVsnYWZ0ZXJSZW5kZXInXSxcbiAgICAgICAgICAgICAgICAnYmVmb3JlTW92ZSc6IHVud3JhcHBlZFZhbHVlWydiZWZvcmVNb3ZlJ10sXG4gICAgICAgICAgICAgICAgJ2FmdGVyTW92ZSc6IHVud3JhcHBlZFZhbHVlWydhZnRlck1vdmUnXSxcbiAgICAgICAgICAgICAgICAndGVtcGxhdGVFbmdpbmUnOiBrby5uYXRpdmVUZW1wbGF0ZUVuZ2luZS5pbnN0YW5jZVxuICAgICAgICAgICAgfTtcbiAgICAgICAgfTtcbiAgICB9LFxuICAgICdpbml0JzogZnVuY3Rpb24oZWxlbWVudCwgdmFsdWVBY2Nlc3NvciwgYWxsQmluZGluZ3MsIHZpZXdNb2RlbCwgYmluZGluZ0NvbnRleHQpIHtcbiAgICAgICAgcmV0dXJuIGtvLmJpbmRpbmdIYW5kbGVyc1sndGVtcGxhdGUnXVsnaW5pdCddKGVsZW1lbnQsIGtvLmJpbmRpbmdIYW5kbGVyc1snZm9yZWFjaCddLm1ha2VUZW1wbGF0ZVZhbHVlQWNjZXNzb3IodmFsdWVBY2Nlc3NvcikpO1xuICAgIH0sXG4gICAgJ3VwZGF0ZSc6IGZ1bmN0aW9uKGVsZW1lbnQsIHZhbHVlQWNjZXNzb3IsIGFsbEJpbmRpbmdzLCB2aWV3TW9kZWwsIGJpbmRpbmdDb250ZXh0KSB7XG4gICAgICAgIHJldHVybiBrby5iaW5kaW5nSGFuZGxlcnNbJ3RlbXBsYXRlJ11bJ3VwZGF0ZSddKGVsZW1lbnQsIGtvLmJpbmRpbmdIYW5kbGVyc1snZm9yZWFjaCddLm1ha2VUZW1wbGF0ZVZhbHVlQWNjZXNzb3IodmFsdWVBY2Nlc3NvciksIGFsbEJpbmRpbmdzLCB2aWV3TW9kZWwsIGJpbmRpbmdDb250ZXh0KTtcbiAgICB9XG59O1xua28uZXhwcmVzc2lvblJld3JpdGluZy5iaW5kaW5nUmV3cml0ZVZhbGlkYXRvcnNbJ2ZvcmVhY2gnXSA9IGZhbHNlOyAvLyBDYW4ndCByZXdyaXRlIGNvbnRyb2wgZmxvdyBiaW5kaW5nc1xua28udmlydHVhbEVsZW1lbnRzLmFsbG93ZWRCaW5kaW5nc1snZm9yZWFjaCddID0gdHJ1ZTtcbnZhciBoYXNmb2N1c1VwZGF0aW5nUHJvcGVydHkgPSAnX19rb19oYXNmb2N1c1VwZGF0aW5nJztcbnZhciBoYXNmb2N1c0xhc3RWYWx1ZSA9ICdfX2tvX2hhc2ZvY3VzTGFzdFZhbHVlJztcbmtvLmJpbmRpbmdIYW5kbGVyc1snaGFzZm9jdXMnXSA9IHtcbiAgICAnaW5pdCc6IGZ1bmN0aW9uKGVsZW1lbnQsIHZhbHVlQWNjZXNzb3IsIGFsbEJpbmRpbmdzKSB7XG4gICAgICAgIHZhciBoYW5kbGVFbGVtZW50Rm9jdXNDaGFuZ2UgPSBmdW5jdGlvbihpc0ZvY3VzZWQpIHtcbiAgICAgICAgICAgIC8vIFdoZXJlIHBvc3NpYmxlLCBpZ25vcmUgd2hpY2ggZXZlbnQgd2FzIHJhaXNlZCBhbmQgZGV0ZXJtaW5lIGZvY3VzIHN0YXRlIHVzaW5nIGFjdGl2ZUVsZW1lbnQsXG4gICAgICAgICAgICAvLyBhcyB0aGlzIGF2b2lkcyBwaGFudG9tIGZvY3VzL2JsdXIgZXZlbnRzIHJhaXNlZCB3aGVuIGNoYW5naW5nIHRhYnMgaW4gbW9kZXJuIGJyb3dzZXJzLlxuICAgICAgICAgICAgLy8gSG93ZXZlciwgbm90IGFsbCBLTy10YXJnZXRlZCBicm93c2VycyAoRmlyZWZveCAyKSBzdXBwb3J0IGFjdGl2ZUVsZW1lbnQuIEZvciB0aG9zZSBicm93c2VycyxcbiAgICAgICAgICAgIC8vIHByZXZlbnQgYSBsb3NzIG9mIGZvY3VzIHdoZW4gY2hhbmdpbmcgdGFicy93aW5kb3dzIGJ5IHNldHRpbmcgYSBmbGFnIHRoYXQgcHJldmVudHMgaGFzZm9jdXNcbiAgICAgICAgICAgIC8vIGZyb20gY2FsbGluZyAnYmx1cigpJyBvbiB0aGUgZWxlbWVudCB3aGVuIGl0IGxvc2VzIGZvY3VzLlxuICAgICAgICAgICAgLy8gRGlzY3Vzc2lvbiBhdCBodHRwczovL2dpdGh1Yi5jb20vU3RldmVTYW5kZXJzb24va25vY2tvdXQvcHVsbC8zNTJcbiAgICAgICAgICAgIGVsZW1lbnRbaGFzZm9jdXNVcGRhdGluZ1Byb3BlcnR5XSA9IHRydWU7XG4gICAgICAgICAgICB2YXIgb3duZXJEb2MgPSBlbGVtZW50Lm93bmVyRG9jdW1lbnQ7XG4gICAgICAgICAgICBpZiAoXCJhY3RpdmVFbGVtZW50XCIgaW4gb3duZXJEb2MpIHtcbiAgICAgICAgICAgICAgICB2YXIgYWN0aXZlO1xuICAgICAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgICAgIGFjdGl2ZSA9IG93bmVyRG9jLmFjdGl2ZUVsZW1lbnQ7XG4gICAgICAgICAgICAgICAgfSBjYXRjaChlKSB7XG4gICAgICAgICAgICAgICAgICAgIC8vIElFOSB0aHJvd3MgaWYgeW91IGFjY2VzcyBhY3RpdmVFbGVtZW50IGR1cmluZyBwYWdlIGxvYWQgKHNlZSBpc3N1ZSAjNzAzKVxuICAgICAgICAgICAgICAgICAgICBhY3RpdmUgPSBvd25lckRvYy5ib2R5O1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBpc0ZvY3VzZWQgPSAoYWN0aXZlID09PSBlbGVtZW50KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHZhciBtb2RlbFZhbHVlID0gdmFsdWVBY2Nlc3NvcigpO1xuICAgICAgICAgICAga28uZXhwcmVzc2lvblJld3JpdGluZy53cml0ZVZhbHVlVG9Qcm9wZXJ0eShtb2RlbFZhbHVlLCBhbGxCaW5kaW5ncywgJ2hhc2ZvY3VzJywgaXNGb2N1c2VkLCB0cnVlKTtcblxuICAgICAgICAgICAgLy9jYWNoZSB0aGUgbGF0ZXN0IHZhbHVlLCBzbyB3ZSBjYW4gYXZvaWQgdW5uZWNlc3NhcmlseSBjYWxsaW5nIGZvY3VzL2JsdXIgaW4gdGhlIHVwZGF0ZSBmdW5jdGlvblxuICAgICAgICAgICAgZWxlbWVudFtoYXNmb2N1c0xhc3RWYWx1ZV0gPSBpc0ZvY3VzZWQ7XG4gICAgICAgICAgICBlbGVtZW50W2hhc2ZvY3VzVXBkYXRpbmdQcm9wZXJ0eV0gPSBmYWxzZTtcbiAgICAgICAgfTtcbiAgICAgICAgdmFyIGhhbmRsZUVsZW1lbnRGb2N1c0luID0gaGFuZGxlRWxlbWVudEZvY3VzQ2hhbmdlLmJpbmQobnVsbCwgdHJ1ZSk7XG4gICAgICAgIHZhciBoYW5kbGVFbGVtZW50Rm9jdXNPdXQgPSBoYW5kbGVFbGVtZW50Rm9jdXNDaGFuZ2UuYmluZChudWxsLCBmYWxzZSk7XG5cbiAgICAgICAga28udXRpbHMucmVnaXN0ZXJFdmVudEhhbmRsZXIoZWxlbWVudCwgXCJmb2N1c1wiLCBoYW5kbGVFbGVtZW50Rm9jdXNJbik7XG4gICAgICAgIGtvLnV0aWxzLnJlZ2lzdGVyRXZlbnRIYW5kbGVyKGVsZW1lbnQsIFwiZm9jdXNpblwiLCBoYW5kbGVFbGVtZW50Rm9jdXNJbik7IC8vIEZvciBJRVxuICAgICAgICBrby51dGlscy5yZWdpc3RlckV2ZW50SGFuZGxlcihlbGVtZW50LCBcImJsdXJcIiwgIGhhbmRsZUVsZW1lbnRGb2N1c091dCk7XG4gICAgICAgIGtvLnV0aWxzLnJlZ2lzdGVyRXZlbnRIYW5kbGVyKGVsZW1lbnQsIFwiZm9jdXNvdXRcIiwgIGhhbmRsZUVsZW1lbnRGb2N1c091dCk7IC8vIEZvciBJRVxuICAgIH0sXG4gICAgJ3VwZGF0ZSc6IGZ1bmN0aW9uKGVsZW1lbnQsIHZhbHVlQWNjZXNzb3IpIHtcbiAgICAgICAgdmFyIHZhbHVlID0gISFrby51dGlscy51bndyYXBPYnNlcnZhYmxlKHZhbHVlQWNjZXNzb3IoKSk7XG5cbiAgICAgICAgaWYgKCFlbGVtZW50W2hhc2ZvY3VzVXBkYXRpbmdQcm9wZXJ0eV0gJiYgZWxlbWVudFtoYXNmb2N1c0xhc3RWYWx1ZV0gIT09IHZhbHVlKSB7XG4gICAgICAgICAgICB2YWx1ZSA/IGVsZW1lbnQuZm9jdXMoKSA6IGVsZW1lbnQuYmx1cigpO1xuXG4gICAgICAgICAgICAvLyBJbiBJRSwgdGhlIGJsdXIgbWV0aG9kIGRvZXNuJ3QgYWx3YXlzIGNhdXNlIHRoZSBlbGVtZW50IHRvIGxvc2UgZm9jdXMgKGZvciBleGFtcGxlLCBpZiB0aGUgd2luZG93IGlzIG5vdCBpbiBmb2N1cykuXG4gICAgICAgICAgICAvLyBTZXR0aW5nIGZvY3VzIHRvIHRoZSBib2R5IGVsZW1lbnQgZG9lcyBzZWVtIHRvIGJlIHJlbGlhYmxlIGluIElFLCBidXQgc2hvdWxkIG9ubHkgYmUgdXNlZCBpZiB3ZSBrbm93IHRoYXQgdGhlIGN1cnJlbnRcbiAgICAgICAgICAgIC8vIGVsZW1lbnQgd2FzIGZvY3VzZWQgYWxyZWFkeS5cbiAgICAgICAgICAgIGlmICghdmFsdWUgJiYgZWxlbWVudFtoYXNmb2N1c0xhc3RWYWx1ZV0pIHtcbiAgICAgICAgICAgICAgICBlbGVtZW50Lm93bmVyRG9jdW1lbnQuYm9keS5mb2N1cygpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAvLyBGb3IgSUUsIHdoaWNoIGRvZXNuJ3QgcmVsaWFibHkgZmlyZSBcImZvY3VzXCIgb3IgXCJibHVyXCIgZXZlbnRzIHN5bmNocm9ub3VzbHlcbiAgICAgICAgICAgIGtvLmRlcGVuZGVuY3lEZXRlY3Rpb24uaWdub3JlKGtvLnV0aWxzLnRyaWdnZXJFdmVudCwgbnVsbCwgW2VsZW1lbnQsIHZhbHVlID8gXCJmb2N1c2luXCIgOiBcImZvY3Vzb3V0XCJdKTtcbiAgICAgICAgfVxuICAgIH1cbn07XG5rby5leHByZXNzaW9uUmV3cml0aW5nLnR3b1dheUJpbmRpbmdzWydoYXNmb2N1cyddID0gdHJ1ZTtcblxua28uYmluZGluZ0hhbmRsZXJzWydoYXNGb2N1cyddID0ga28uYmluZGluZ0hhbmRsZXJzWydoYXNmb2N1cyddOyAvLyBNYWtlIFwiaGFzRm9jdXNcIiBhbiBhbGlhc1xua28uZXhwcmVzc2lvblJld3JpdGluZy50d29XYXlCaW5kaW5nc1snaGFzRm9jdXMnXSA9IHRydWU7XG5rby5iaW5kaW5nSGFuZGxlcnNbJ2h0bWwnXSA9IHtcbiAgICAnaW5pdCc6IGZ1bmN0aW9uKCkge1xuICAgICAgICAvLyBQcmV2ZW50IGJpbmRpbmcgb24gdGhlIGR5bmFtaWNhbGx5LWluamVjdGVkIEhUTUwgKGFzIGRldmVsb3BlcnMgYXJlIHVubGlrZWx5IHRvIGV4cGVjdCB0aGF0LCBhbmQgaXQgaGFzIHNlY3VyaXR5IGltcGxpY2F0aW9ucylcbiAgICAgICAgcmV0dXJuIHsgJ2NvbnRyb2xzRGVzY2VuZGFudEJpbmRpbmdzJzogdHJ1ZSB9O1xuICAgIH0sXG4gICAgJ3VwZGF0ZSc6IGZ1bmN0aW9uIChlbGVtZW50LCB2YWx1ZUFjY2Vzc29yKSB7XG4gICAgICAgIC8vIHNldEh0bWwgd2lsbCB1bndyYXAgdGhlIHZhbHVlIGlmIG5lZWRlZFxuICAgICAgICBrby51dGlscy5zZXRIdG1sKGVsZW1lbnQsIHZhbHVlQWNjZXNzb3IoKSk7XG4gICAgfVxufTtcbi8vIE1ha2VzIGEgYmluZGluZyBsaWtlIHdpdGggb3IgaWZcbmZ1bmN0aW9uIG1ha2VXaXRoSWZCaW5kaW5nKGJpbmRpbmdLZXksIGlzV2l0aCwgaXNOb3QsIG1ha2VDb250ZXh0Q2FsbGJhY2spIHtcbiAgICBrby5iaW5kaW5nSGFuZGxlcnNbYmluZGluZ0tleV0gPSB7XG4gICAgICAgICdpbml0JzogZnVuY3Rpb24oZWxlbWVudCwgdmFsdWVBY2Nlc3NvciwgYWxsQmluZGluZ3MsIHZpZXdNb2RlbCwgYmluZGluZ0NvbnRleHQpIHtcbiAgICAgICAgICAgIHZhciBkaWREaXNwbGF5T25MYXN0VXBkYXRlLFxuICAgICAgICAgICAgICAgIHNhdmVkTm9kZXM7XG4gICAgICAgICAgICBrby5jb21wdXRlZChmdW5jdGlvbigpIHtcbiAgICAgICAgICAgICAgICB2YXIgZGF0YVZhbHVlID0ga28udXRpbHMudW53cmFwT2JzZXJ2YWJsZSh2YWx1ZUFjY2Vzc29yKCkpLFxuICAgICAgICAgICAgICAgICAgICBzaG91bGREaXNwbGF5ID0gIWlzTm90ICE9PSAhZGF0YVZhbHVlLCAvLyBlcXVpdmFsZW50IHRvIGlzTm90ID8gIWRhdGFWYWx1ZSA6ICEhZGF0YVZhbHVlXG4gICAgICAgICAgICAgICAgICAgIGlzRmlyc3RSZW5kZXIgPSAhc2F2ZWROb2RlcyxcbiAgICAgICAgICAgICAgICAgICAgbmVlZHNSZWZyZXNoID0gaXNGaXJzdFJlbmRlciB8fCBpc1dpdGggfHwgKHNob3VsZERpc3BsYXkgIT09IGRpZERpc3BsYXlPbkxhc3RVcGRhdGUpO1xuXG4gICAgICAgICAgICAgICAgaWYgKG5lZWRzUmVmcmVzaCkge1xuICAgICAgICAgICAgICAgICAgICAvLyBTYXZlIGEgY29weSBvZiB0aGUgaW5uZXIgbm9kZXMgb24gdGhlIGluaXRpYWwgdXBkYXRlLCBidXQgb25seSBpZiB3ZSBoYXZlIGRlcGVuZGVuY2llcy5cbiAgICAgICAgICAgICAgICAgICAgaWYgKGlzRmlyc3RSZW5kZXIgJiYga28uY29tcHV0ZWRDb250ZXh0LmdldERlcGVuZGVuY2llc0NvdW50KCkpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHNhdmVkTm9kZXMgPSBrby51dGlscy5jbG9uZU5vZGVzKGtvLnZpcnR1YWxFbGVtZW50cy5jaGlsZE5vZGVzKGVsZW1lbnQpLCB0cnVlIC8qIHNob3VsZENsZWFuTm9kZXMgKi8pO1xuICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgaWYgKHNob3VsZERpc3BsYXkpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICghaXNGaXJzdFJlbmRlcikge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGtvLnZpcnR1YWxFbGVtZW50cy5zZXREb21Ob2RlQ2hpbGRyZW4oZWxlbWVudCwga28udXRpbHMuY2xvbmVOb2RlcyhzYXZlZE5vZGVzKSk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICBrby5hcHBseUJpbmRpbmdzVG9EZXNjZW5kYW50cyhtYWtlQ29udGV4dENhbGxiYWNrID8gbWFrZUNvbnRleHRDYWxsYmFjayhiaW5kaW5nQ29udGV4dCwgZGF0YVZhbHVlKSA6IGJpbmRpbmdDb250ZXh0LCBlbGVtZW50KTtcbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGtvLnZpcnR1YWxFbGVtZW50cy5lbXB0eU5vZGUoZWxlbWVudCk7XG4gICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICBkaWREaXNwbGF5T25MYXN0VXBkYXRlID0gc2hvdWxkRGlzcGxheTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9LCBudWxsLCB7IGRpc3Bvc2VXaGVuTm9kZUlzUmVtb3ZlZDogZWxlbWVudCB9KTtcbiAgICAgICAgICAgIHJldHVybiB7ICdjb250cm9sc0Rlc2NlbmRhbnRCaW5kaW5ncyc6IHRydWUgfTtcbiAgICAgICAgfVxuICAgIH07XG4gICAga28uZXhwcmVzc2lvblJld3JpdGluZy5iaW5kaW5nUmV3cml0ZVZhbGlkYXRvcnNbYmluZGluZ0tleV0gPSBmYWxzZTsgLy8gQ2FuJ3QgcmV3cml0ZSBjb250cm9sIGZsb3cgYmluZGluZ3NcbiAgICBrby52aXJ0dWFsRWxlbWVudHMuYWxsb3dlZEJpbmRpbmdzW2JpbmRpbmdLZXldID0gdHJ1ZTtcbn1cblxuLy8gQ29uc3RydWN0IHRoZSBhY3R1YWwgYmluZGluZyBoYW5kbGVyc1xubWFrZVdpdGhJZkJpbmRpbmcoJ2lmJyk7XG5tYWtlV2l0aElmQmluZGluZygnaWZub3QnLCBmYWxzZSAvKiBpc1dpdGggKi8sIHRydWUgLyogaXNOb3QgKi8pO1xubWFrZVdpdGhJZkJpbmRpbmcoJ3dpdGgnLCB0cnVlIC8qIGlzV2l0aCAqLywgZmFsc2UgLyogaXNOb3QgKi8sXG4gICAgZnVuY3Rpb24oYmluZGluZ0NvbnRleHQsIGRhdGFWYWx1ZSkge1xuICAgICAgICByZXR1cm4gYmluZGluZ0NvbnRleHRbJ2NyZWF0ZUNoaWxkQ29udGV4dCddKGRhdGFWYWx1ZSk7XG4gICAgfVxuKTtcbnZhciBjYXB0aW9uUGxhY2Vob2xkZXIgPSB7fTtcbmtvLmJpbmRpbmdIYW5kbGVyc1snb3B0aW9ucyddID0ge1xuICAgICdpbml0JzogZnVuY3Rpb24oZWxlbWVudCkge1xuICAgICAgICBpZiAoa28udXRpbHMudGFnTmFtZUxvd2VyKGVsZW1lbnQpICE9PSBcInNlbGVjdFwiKVxuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwib3B0aW9ucyBiaW5kaW5nIGFwcGxpZXMgb25seSB0byBTRUxFQ1QgZWxlbWVudHNcIik7XG5cbiAgICAgICAgLy8gUmVtb3ZlIGFsbCBleGlzdGluZyA8b3B0aW9uPnMuXG4gICAgICAgIHdoaWxlIChlbGVtZW50Lmxlbmd0aCA+IDApIHtcbiAgICAgICAgICAgIGVsZW1lbnQucmVtb3ZlKDApO1xuICAgICAgICB9XG5cbiAgICAgICAgLy8gRW5zdXJlcyB0aGF0IHRoZSBiaW5kaW5nIHByb2Nlc3NvciBkb2Vzbid0IHRyeSB0byBiaW5kIHRoZSBvcHRpb25zXG4gICAgICAgIHJldHVybiB7ICdjb250cm9sc0Rlc2NlbmRhbnRCaW5kaW5ncyc6IHRydWUgfTtcbiAgICB9LFxuICAgICd1cGRhdGUnOiBmdW5jdGlvbiAoZWxlbWVudCwgdmFsdWVBY2Nlc3NvciwgYWxsQmluZGluZ3MpIHtcbiAgICAgICAgZnVuY3Rpb24gc2VsZWN0ZWRPcHRpb25zKCkge1xuICAgICAgICAgICAgcmV0dXJuIGtvLnV0aWxzLmFycmF5RmlsdGVyKGVsZW1lbnQub3B0aW9ucywgZnVuY3Rpb24gKG5vZGUpIHsgcmV0dXJuIG5vZGUuc2VsZWN0ZWQ7IH0pO1xuICAgICAgICB9XG5cbiAgICAgICAgdmFyIHNlbGVjdFdhc1ByZXZpb3VzbHlFbXB0eSA9IGVsZW1lbnQubGVuZ3RoID09IDAsXG4gICAgICAgICAgICBtdWx0aXBsZSA9IGVsZW1lbnQubXVsdGlwbGUsXG4gICAgICAgICAgICBwcmV2aW91c1Njcm9sbFRvcCA9ICghc2VsZWN0V2FzUHJldmlvdXNseUVtcHR5ICYmIG11bHRpcGxlKSA/IGVsZW1lbnQuc2Nyb2xsVG9wIDogbnVsbCxcbiAgICAgICAgICAgIHVud3JhcHBlZEFycmF5ID0ga28udXRpbHMudW53cmFwT2JzZXJ2YWJsZSh2YWx1ZUFjY2Vzc29yKCkpLFxuICAgICAgICAgICAgdmFsdWVBbGxvd1Vuc2V0ID0gYWxsQmluZGluZ3MuZ2V0KCd2YWx1ZUFsbG93VW5zZXQnKSAmJiBhbGxCaW5kaW5nc1snaGFzJ10oJ3ZhbHVlJyksXG4gICAgICAgICAgICBpbmNsdWRlRGVzdHJveWVkID0gYWxsQmluZGluZ3MuZ2V0KCdvcHRpb25zSW5jbHVkZURlc3Ryb3llZCcpLFxuICAgICAgICAgICAgYXJyYXlUb0RvbU5vZGVDaGlsZHJlbk9wdGlvbnMgPSB7fSxcbiAgICAgICAgICAgIGNhcHRpb25WYWx1ZSxcbiAgICAgICAgICAgIGZpbHRlcmVkQXJyYXksXG4gICAgICAgICAgICBwcmV2aW91c1NlbGVjdGVkVmFsdWVzID0gW107XG5cbiAgICAgICAgaWYgKCF2YWx1ZUFsbG93VW5zZXQpIHtcbiAgICAgICAgICAgIGlmIChtdWx0aXBsZSkge1xuICAgICAgICAgICAgICAgIHByZXZpb3VzU2VsZWN0ZWRWYWx1ZXMgPSBrby51dGlscy5hcnJheU1hcChzZWxlY3RlZE9wdGlvbnMoKSwga28uc2VsZWN0RXh0ZW5zaW9ucy5yZWFkVmFsdWUpO1xuICAgICAgICAgICAgfSBlbHNlIGlmIChlbGVtZW50LnNlbGVjdGVkSW5kZXggPj0gMCkge1xuICAgICAgICAgICAgICAgIHByZXZpb3VzU2VsZWN0ZWRWYWx1ZXMucHVzaChrby5zZWxlY3RFeHRlbnNpb25zLnJlYWRWYWx1ZShlbGVtZW50Lm9wdGlvbnNbZWxlbWVudC5zZWxlY3RlZEluZGV4XSkpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgaWYgKHVud3JhcHBlZEFycmF5KSB7XG4gICAgICAgICAgICBpZiAodHlwZW9mIHVud3JhcHBlZEFycmF5Lmxlbmd0aCA9PSBcInVuZGVmaW5lZFwiKSAvLyBDb2VyY2Ugc2luZ2xlIHZhbHVlIGludG8gYXJyYXlcbiAgICAgICAgICAgICAgICB1bndyYXBwZWRBcnJheSA9IFt1bndyYXBwZWRBcnJheV07XG5cbiAgICAgICAgICAgIC8vIEZpbHRlciBvdXQgYW55IGVudHJpZXMgbWFya2VkIGFzIGRlc3Ryb3llZFxuICAgICAgICAgICAgZmlsdGVyZWRBcnJheSA9IGtvLnV0aWxzLmFycmF5RmlsdGVyKHVud3JhcHBlZEFycmF5LCBmdW5jdGlvbihpdGVtKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGluY2x1ZGVEZXN0cm95ZWQgfHwgaXRlbSA9PT0gdW5kZWZpbmVkIHx8IGl0ZW0gPT09IG51bGwgfHwgIWtvLnV0aWxzLnVud3JhcE9ic2VydmFibGUoaXRlbVsnX2Rlc3Ryb3knXSk7XG4gICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgLy8gSWYgY2FwdGlvbiBpcyBpbmNsdWRlZCwgYWRkIGl0IHRvIHRoZSBhcnJheVxuICAgICAgICAgICAgaWYgKGFsbEJpbmRpbmdzWydoYXMnXSgnb3B0aW9uc0NhcHRpb24nKSkge1xuICAgICAgICAgICAgICAgIGNhcHRpb25WYWx1ZSA9IGtvLnV0aWxzLnVud3JhcE9ic2VydmFibGUoYWxsQmluZGluZ3MuZ2V0KCdvcHRpb25zQ2FwdGlvbicpKTtcbiAgICAgICAgICAgICAgICAvLyBJZiBjYXB0aW9uIHZhbHVlIGlzIG51bGwgb3IgdW5kZWZpbmVkLCBkb24ndCBzaG93IGEgY2FwdGlvblxuICAgICAgICAgICAgICAgIGlmIChjYXB0aW9uVmFsdWUgIT09IG51bGwgJiYgY2FwdGlvblZhbHVlICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgICAgICAgICAgZmlsdGVyZWRBcnJheS51bnNoaWZ0KGNhcHRpb25QbGFjZWhvbGRlcik7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgLy8gSWYgYSBmYWxzeSB2YWx1ZSBpcyBwcm92aWRlZCAoZS5nLiBudWxsKSwgd2UnbGwgc2ltcGx5IGVtcHR5IHRoZSBzZWxlY3QgZWxlbWVudFxuICAgICAgICB9XG5cbiAgICAgICAgZnVuY3Rpb24gYXBwbHlUb09iamVjdChvYmplY3QsIHByZWRpY2F0ZSwgZGVmYXVsdFZhbHVlKSB7XG4gICAgICAgICAgICB2YXIgcHJlZGljYXRlVHlwZSA9IHR5cGVvZiBwcmVkaWNhdGU7XG4gICAgICAgICAgICBpZiAocHJlZGljYXRlVHlwZSA9PSBcImZ1bmN0aW9uXCIpICAgIC8vIEdpdmVuIGEgZnVuY3Rpb247IHJ1biBpdCBhZ2FpbnN0IHRoZSBkYXRhIHZhbHVlXG4gICAgICAgICAgICAgICAgcmV0dXJuIHByZWRpY2F0ZShvYmplY3QpO1xuICAgICAgICAgICAgZWxzZSBpZiAocHJlZGljYXRlVHlwZSA9PSBcInN0cmluZ1wiKSAvLyBHaXZlbiBhIHN0cmluZzsgdHJlYXQgaXQgYXMgYSBwcm9wZXJ0eSBuYW1lIG9uIHRoZSBkYXRhIHZhbHVlXG4gICAgICAgICAgICAgICAgcmV0dXJuIG9iamVjdFtwcmVkaWNhdGVdO1xuICAgICAgICAgICAgZWxzZSAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gR2l2ZW4gbm8gb3B0aW9uc1RleHQgYXJnOyB1c2UgdGhlIGRhdGEgdmFsdWUgaXRzZWxmXG4gICAgICAgICAgICAgICAgcmV0dXJuIGRlZmF1bHRWYWx1ZTtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIFRoZSBmb2xsb3dpbmcgZnVuY3Rpb25zIGNhbiBydW4gYXQgdHdvIGRpZmZlcmVudCB0aW1lczpcbiAgICAgICAgLy8gVGhlIGZpcnN0IGlzIHdoZW4gdGhlIHdob2xlIGFycmF5IGlzIGJlaW5nIHVwZGF0ZWQgZGlyZWN0bHkgZnJvbSB0aGlzIGJpbmRpbmcgaGFuZGxlci5cbiAgICAgICAgLy8gVGhlIHNlY29uZCBpcyB3aGVuIGFuIG9ic2VydmFibGUgdmFsdWUgZm9yIGEgc3BlY2lmaWMgYXJyYXkgZW50cnkgaXMgdXBkYXRlZC5cbiAgICAgICAgLy8gb2xkT3B0aW9ucyB3aWxsIGJlIGVtcHR5IGluIHRoZSBmaXJzdCBjYXNlLCBidXQgd2lsbCBiZSBmaWxsZWQgd2l0aCB0aGUgcHJldmlvdXNseSBnZW5lcmF0ZWQgb3B0aW9uIGluIHRoZSBzZWNvbmQuXG4gICAgICAgIHZhciBpdGVtVXBkYXRlID0gZmFsc2U7XG4gICAgICAgIGZ1bmN0aW9uIG9wdGlvbkZvckFycmF5SXRlbShhcnJheUVudHJ5LCBpbmRleCwgb2xkT3B0aW9ucykge1xuICAgICAgICAgICAgaWYgKG9sZE9wdGlvbnMubGVuZ3RoKSB7XG4gICAgICAgICAgICAgICAgcHJldmlvdXNTZWxlY3RlZFZhbHVlcyA9ICF2YWx1ZUFsbG93VW5zZXQgJiYgb2xkT3B0aW9uc1swXS5zZWxlY3RlZCA/IFsga28uc2VsZWN0RXh0ZW5zaW9ucy5yZWFkVmFsdWUob2xkT3B0aW9uc1swXSkgXSA6IFtdO1xuICAgICAgICAgICAgICAgIGl0ZW1VcGRhdGUgPSB0cnVlO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdmFyIG9wdGlvbiA9IGVsZW1lbnQub3duZXJEb2N1bWVudC5jcmVhdGVFbGVtZW50KFwib3B0aW9uXCIpO1xuICAgICAgICAgICAgaWYgKGFycmF5RW50cnkgPT09IGNhcHRpb25QbGFjZWhvbGRlcikge1xuICAgICAgICAgICAgICAgIGtvLnV0aWxzLnNldFRleHRDb250ZW50KG9wdGlvbiwgYWxsQmluZGluZ3MuZ2V0KCdvcHRpb25zQ2FwdGlvbicpKTtcbiAgICAgICAgICAgICAgICBrby5zZWxlY3RFeHRlbnNpb25zLndyaXRlVmFsdWUob3B0aW9uLCB1bmRlZmluZWQpO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAvLyBBcHBseSBhIHZhbHVlIHRvIHRoZSBvcHRpb24gZWxlbWVudFxuICAgICAgICAgICAgICAgIHZhciBvcHRpb25WYWx1ZSA9IGFwcGx5VG9PYmplY3QoYXJyYXlFbnRyeSwgYWxsQmluZGluZ3MuZ2V0KCdvcHRpb25zVmFsdWUnKSwgYXJyYXlFbnRyeSk7XG4gICAgICAgICAgICAgICAga28uc2VsZWN0RXh0ZW5zaW9ucy53cml0ZVZhbHVlKG9wdGlvbiwga28udXRpbHMudW53cmFwT2JzZXJ2YWJsZShvcHRpb25WYWx1ZSkpO1xuXG4gICAgICAgICAgICAgICAgLy8gQXBwbHkgc29tZSB0ZXh0IHRvIHRoZSBvcHRpb24gZWxlbWVudFxuICAgICAgICAgICAgICAgIHZhciBvcHRpb25UZXh0ID0gYXBwbHlUb09iamVjdChhcnJheUVudHJ5LCBhbGxCaW5kaW5ncy5nZXQoJ29wdGlvbnNUZXh0JyksIG9wdGlvblZhbHVlKTtcbiAgICAgICAgICAgICAgICBrby51dGlscy5zZXRUZXh0Q29udGVudChvcHRpb24sIG9wdGlvblRleHQpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIFtvcHRpb25dO1xuICAgICAgICB9XG5cbiAgICAgICAgLy8gQnkgdXNpbmcgYSBiZWZvcmVSZW1vdmUgY2FsbGJhY2ssIHdlIGRlbGF5IHRoZSByZW1vdmFsIHVudGlsIGFmdGVyIG5ldyBpdGVtcyBhcmUgYWRkZWQuIFRoaXMgZml4ZXMgYSBzZWxlY3Rpb25cbiAgICAgICAgLy8gcHJvYmxlbSBpbiBJRTw9OCBhbmQgRmlyZWZveC4gU2VlIGh0dHBzOi8vZ2l0aHViLmNvbS9rbm9ja291dC9rbm9ja291dC9pc3N1ZXMvMTIwOFxuICAgICAgICBhcnJheVRvRG9tTm9kZUNoaWxkcmVuT3B0aW9uc1snYmVmb3JlUmVtb3ZlJ10gPVxuICAgICAgICAgICAgZnVuY3Rpb24gKG9wdGlvbikge1xuICAgICAgICAgICAgICAgIGVsZW1lbnQucmVtb3ZlQ2hpbGQob3B0aW9uKTtcbiAgICAgICAgICAgIH07XG5cbiAgICAgICAgZnVuY3Rpb24gc2V0U2VsZWN0aW9uQ2FsbGJhY2soYXJyYXlFbnRyeSwgbmV3T3B0aW9ucykge1xuICAgICAgICAgICAgaWYgKGl0ZW1VcGRhdGUgJiYgdmFsdWVBbGxvd1Vuc2V0KSB7XG4gICAgICAgICAgICAgICAgLy8gVGhlIG1vZGVsIHZhbHVlIGlzIGF1dGhvcml0YXRpdmUsIHNvIG1ha2Ugc3VyZSBpdHMgdmFsdWUgaXMgdGhlIG9uZSBzZWxlY3RlZFxuICAgICAgICAgICAgICAgIC8vIFRoZXJlIGlzIG5vIG5lZWQgdG8gdXNlIGRlcGVuZGVuY3lEZXRlY3Rpb24uaWdub3JlIHNpbmNlIHNldERvbU5vZGVDaGlsZHJlbkZyb21BcnJheU1hcHBpbmcgZG9lcyBzbyBhbHJlYWR5LlxuICAgICAgICAgICAgICAgIGtvLnNlbGVjdEV4dGVuc2lvbnMud3JpdGVWYWx1ZShlbGVtZW50LCBrby51dGlscy51bndyYXBPYnNlcnZhYmxlKGFsbEJpbmRpbmdzLmdldCgndmFsdWUnKSksIHRydWUgLyogYWxsb3dVbnNldCAqLyk7XG4gICAgICAgICAgICB9IGVsc2UgaWYgKHByZXZpb3VzU2VsZWN0ZWRWYWx1ZXMubGVuZ3RoKSB7XG4gICAgICAgICAgICAgICAgLy8gSUU2IGRvZXNuJ3QgbGlrZSB1cyB0byBhc3NpZ24gc2VsZWN0aW9uIHRvIE9QVElPTiBub2RlcyBiZWZvcmUgdGhleSdyZSBhZGRlZCB0byB0aGUgZG9jdW1lbnQuXG4gICAgICAgICAgICAgICAgLy8gVGhhdCdzIHdoeSB3ZSBmaXJzdCBhZGRlZCB0aGVtIHdpdGhvdXQgc2VsZWN0aW9uLiBOb3cgaXQncyB0aW1lIHRvIHNldCB0aGUgc2VsZWN0aW9uLlxuICAgICAgICAgICAgICAgIHZhciBpc1NlbGVjdGVkID0ga28udXRpbHMuYXJyYXlJbmRleE9mKHByZXZpb3VzU2VsZWN0ZWRWYWx1ZXMsIGtvLnNlbGVjdEV4dGVuc2lvbnMucmVhZFZhbHVlKG5ld09wdGlvbnNbMF0pKSA+PSAwO1xuICAgICAgICAgICAgICAgIGtvLnV0aWxzLnNldE9wdGlvbk5vZGVTZWxlY3Rpb25TdGF0ZShuZXdPcHRpb25zWzBdLCBpc1NlbGVjdGVkKTtcblxuICAgICAgICAgICAgICAgIC8vIElmIHRoaXMgb3B0aW9uIHdhcyBjaGFuZ2VkIGZyb20gYmVpbmcgc2VsZWN0ZWQgZHVyaW5nIGEgc2luZ2xlLWl0ZW0gdXBkYXRlLCBub3RpZnkgdGhlIGNoYW5nZVxuICAgICAgICAgICAgICAgIGlmIChpdGVtVXBkYXRlICYmICFpc1NlbGVjdGVkKSB7XG4gICAgICAgICAgICAgICAgICAgIGtvLmRlcGVuZGVuY3lEZXRlY3Rpb24uaWdub3JlKGtvLnV0aWxzLnRyaWdnZXJFdmVudCwgbnVsbCwgW2VsZW1lbnQsIFwiY2hhbmdlXCJdKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICB2YXIgY2FsbGJhY2sgPSBzZXRTZWxlY3Rpb25DYWxsYmFjaztcbiAgICAgICAgaWYgKGFsbEJpbmRpbmdzWydoYXMnXSgnb3B0aW9uc0FmdGVyUmVuZGVyJykgJiYgdHlwZW9mIGFsbEJpbmRpbmdzLmdldCgnb3B0aW9uc0FmdGVyUmVuZGVyJykgPT0gXCJmdW5jdGlvblwiKSB7XG4gICAgICAgICAgICBjYWxsYmFjayA9IGZ1bmN0aW9uKGFycmF5RW50cnksIG5ld09wdGlvbnMpIHtcbiAgICAgICAgICAgICAgICBzZXRTZWxlY3Rpb25DYWxsYmFjayhhcnJheUVudHJ5LCBuZXdPcHRpb25zKTtcbiAgICAgICAgICAgICAgICBrby5kZXBlbmRlbmN5RGV0ZWN0aW9uLmlnbm9yZShhbGxCaW5kaW5ncy5nZXQoJ29wdGlvbnNBZnRlclJlbmRlcicpLCBudWxsLCBbbmV3T3B0aW9uc1swXSwgYXJyYXlFbnRyeSAhPT0gY2FwdGlvblBsYWNlaG9sZGVyID8gYXJyYXlFbnRyeSA6IHVuZGVmaW5lZF0pO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAga28udXRpbHMuc2V0RG9tTm9kZUNoaWxkcmVuRnJvbUFycmF5TWFwcGluZyhlbGVtZW50LCBmaWx0ZXJlZEFycmF5LCBvcHRpb25Gb3JBcnJheUl0ZW0sIGFycmF5VG9Eb21Ob2RlQ2hpbGRyZW5PcHRpb25zLCBjYWxsYmFjayk7XG5cbiAgICAgICAga28uZGVwZW5kZW5jeURldGVjdGlvbi5pZ25vcmUoZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgaWYgKHZhbHVlQWxsb3dVbnNldCkge1xuICAgICAgICAgICAgICAgIC8vIFRoZSBtb2RlbCB2YWx1ZSBpcyBhdXRob3JpdGF0aXZlLCBzbyBtYWtlIHN1cmUgaXRzIHZhbHVlIGlzIHRoZSBvbmUgc2VsZWN0ZWRcbiAgICAgICAgICAgICAgICBrby5zZWxlY3RFeHRlbnNpb25zLndyaXRlVmFsdWUoZWxlbWVudCwga28udXRpbHMudW53cmFwT2JzZXJ2YWJsZShhbGxCaW5kaW5ncy5nZXQoJ3ZhbHVlJykpLCB0cnVlIC8qIGFsbG93VW5zZXQgKi8pO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAvLyBEZXRlcm1pbmUgaWYgdGhlIHNlbGVjdGlvbiBoYXMgY2hhbmdlZCBhcyBhIHJlc3VsdCBvZiB1cGRhdGluZyB0aGUgb3B0aW9ucyBsaXN0XG4gICAgICAgICAgICAgICAgdmFyIHNlbGVjdGlvbkNoYW5nZWQ7XG4gICAgICAgICAgICAgICAgaWYgKG11bHRpcGxlKSB7XG4gICAgICAgICAgICAgICAgICAgIC8vIEZvciBhIG11bHRpcGxlLXNlbGVjdCBib3gsIGNvbXBhcmUgdGhlIG5ldyBzZWxlY3Rpb24gY291bnQgdG8gdGhlIHByZXZpb3VzIG9uZVxuICAgICAgICAgICAgICAgICAgICAvLyBCdXQgaWYgbm90aGluZyB3YXMgc2VsZWN0ZWQgYmVmb3JlLCB0aGUgc2VsZWN0aW9uIGNhbid0IGhhdmUgY2hhbmdlZFxuICAgICAgICAgICAgICAgICAgICBzZWxlY3Rpb25DaGFuZ2VkID0gcHJldmlvdXNTZWxlY3RlZFZhbHVlcy5sZW5ndGggJiYgc2VsZWN0ZWRPcHRpb25zKCkubGVuZ3RoIDwgcHJldmlvdXNTZWxlY3RlZFZhbHVlcy5sZW5ndGg7XG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgLy8gRm9yIGEgc2luZ2xlLXNlbGVjdCBib3gsIGNvbXBhcmUgdGhlIGN1cnJlbnQgdmFsdWUgdG8gdGhlIHByZXZpb3VzIHZhbHVlXG4gICAgICAgICAgICAgICAgICAgIC8vIEJ1dCBpZiBub3RoaW5nIHdhcyBzZWxlY3RlZCBiZWZvcmUgb3Igbm90aGluZyBpcyBzZWxlY3RlZCBub3csIGp1c3QgbG9vayBmb3IgYSBjaGFuZ2UgaW4gc2VsZWN0aW9uXG4gICAgICAgICAgICAgICAgICAgIHNlbGVjdGlvbkNoYW5nZWQgPSAocHJldmlvdXNTZWxlY3RlZFZhbHVlcy5sZW5ndGggJiYgZWxlbWVudC5zZWxlY3RlZEluZGV4ID49IDApXG4gICAgICAgICAgICAgICAgICAgICAgICA/IChrby5zZWxlY3RFeHRlbnNpb25zLnJlYWRWYWx1ZShlbGVtZW50Lm9wdGlvbnNbZWxlbWVudC5zZWxlY3RlZEluZGV4XSkgIT09IHByZXZpb3VzU2VsZWN0ZWRWYWx1ZXNbMF0pXG4gICAgICAgICAgICAgICAgICAgICAgICA6IChwcmV2aW91c1NlbGVjdGVkVmFsdWVzLmxlbmd0aCB8fCBlbGVtZW50LnNlbGVjdGVkSW5kZXggPj0gMCk7XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgLy8gRW5zdXJlIGNvbnNpc3RlbmN5IGJldHdlZW4gbW9kZWwgdmFsdWUgYW5kIHNlbGVjdGVkIG9wdGlvbi5cbiAgICAgICAgICAgICAgICAvLyBJZiB0aGUgZHJvcGRvd24gd2FzIGNoYW5nZWQgc28gdGhhdCBzZWxlY3Rpb24gaXMgbm8gbG9uZ2VyIHRoZSBzYW1lLFxuICAgICAgICAgICAgICAgIC8vIG5vdGlmeSB0aGUgdmFsdWUgb3Igc2VsZWN0ZWRPcHRpb25zIGJpbmRpbmcuXG4gICAgICAgICAgICAgICAgaWYgKHNlbGVjdGlvbkNoYW5nZWQpIHtcbiAgICAgICAgICAgICAgICAgICAga28udXRpbHMudHJpZ2dlckV2ZW50KGVsZW1lbnQsIFwiY2hhbmdlXCIpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfSk7XG5cbiAgICAgICAgLy8gV29ya2Fyb3VuZCBmb3IgSUUgYnVnXG4gICAgICAgIGtvLnV0aWxzLmVuc3VyZVNlbGVjdEVsZW1lbnRJc1JlbmRlcmVkQ29ycmVjdGx5KGVsZW1lbnQpO1xuXG4gICAgICAgIGlmIChwcmV2aW91c1Njcm9sbFRvcCAmJiBNYXRoLmFicyhwcmV2aW91c1Njcm9sbFRvcCAtIGVsZW1lbnQuc2Nyb2xsVG9wKSA+IDIwKVxuICAgICAgICAgICAgZWxlbWVudC5zY3JvbGxUb3AgPSBwcmV2aW91c1Njcm9sbFRvcDtcbiAgICB9XG59O1xua28uYmluZGluZ0hhbmRsZXJzWydvcHRpb25zJ10ub3B0aW9uVmFsdWVEb21EYXRhS2V5ID0ga28udXRpbHMuZG9tRGF0YS5uZXh0S2V5KCk7XG5rby5iaW5kaW5nSGFuZGxlcnNbJ3NlbGVjdGVkT3B0aW9ucyddID0ge1xuICAgICdhZnRlcic6IFsnb3B0aW9ucycsICdmb3JlYWNoJ10sXG4gICAgJ2luaXQnOiBmdW5jdGlvbiAoZWxlbWVudCwgdmFsdWVBY2Nlc3NvciwgYWxsQmluZGluZ3MpIHtcbiAgICAgICAga28udXRpbHMucmVnaXN0ZXJFdmVudEhhbmRsZXIoZWxlbWVudCwgXCJjaGFuZ2VcIiwgZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgdmFyIHZhbHVlID0gdmFsdWVBY2Nlc3NvcigpLCB2YWx1ZVRvV3JpdGUgPSBbXTtcbiAgICAgICAgICAgIGtvLnV0aWxzLmFycmF5Rm9yRWFjaChlbGVtZW50LmdldEVsZW1lbnRzQnlUYWdOYW1lKFwib3B0aW9uXCIpLCBmdW5jdGlvbihub2RlKSB7XG4gICAgICAgICAgICAgICAgaWYgKG5vZGUuc2VsZWN0ZWQpXG4gICAgICAgICAgICAgICAgICAgIHZhbHVlVG9Xcml0ZS5wdXNoKGtvLnNlbGVjdEV4dGVuc2lvbnMucmVhZFZhbHVlKG5vZGUpKTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAga28uZXhwcmVzc2lvblJld3JpdGluZy53cml0ZVZhbHVlVG9Qcm9wZXJ0eSh2YWx1ZSwgYWxsQmluZGluZ3MsICdzZWxlY3RlZE9wdGlvbnMnLCB2YWx1ZVRvV3JpdGUpO1xuICAgICAgICB9KTtcbiAgICB9LFxuICAgICd1cGRhdGUnOiBmdW5jdGlvbiAoZWxlbWVudCwgdmFsdWVBY2Nlc3Nvcikge1xuICAgICAgICBpZiAoa28udXRpbHMudGFnTmFtZUxvd2VyKGVsZW1lbnQpICE9IFwic2VsZWN0XCIpXG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJ2YWx1ZXMgYmluZGluZyBhcHBsaWVzIG9ubHkgdG8gU0VMRUNUIGVsZW1lbnRzXCIpO1xuXG4gICAgICAgIHZhciBuZXdWYWx1ZSA9IGtvLnV0aWxzLnVud3JhcE9ic2VydmFibGUodmFsdWVBY2Nlc3NvcigpKSxcbiAgICAgICAgICAgIHByZXZpb3VzU2Nyb2xsVG9wID0gZWxlbWVudC5zY3JvbGxUb3A7XG5cbiAgICAgICAgaWYgKG5ld1ZhbHVlICYmIHR5cGVvZiBuZXdWYWx1ZS5sZW5ndGggPT0gXCJudW1iZXJcIikge1xuICAgICAgICAgICAga28udXRpbHMuYXJyYXlGb3JFYWNoKGVsZW1lbnQuZ2V0RWxlbWVudHNCeVRhZ05hbWUoXCJvcHRpb25cIiksIGZ1bmN0aW9uKG5vZGUpIHtcbiAgICAgICAgICAgICAgICB2YXIgaXNTZWxlY3RlZCA9IGtvLnV0aWxzLmFycmF5SW5kZXhPZihuZXdWYWx1ZSwga28uc2VsZWN0RXh0ZW5zaW9ucy5yZWFkVmFsdWUobm9kZSkpID49IDA7XG4gICAgICAgICAgICAgICAgaWYgKG5vZGUuc2VsZWN0ZWQgIT0gaXNTZWxlY3RlZCkgeyAgICAgIC8vIFRoaXMgY2hlY2sgcHJldmVudHMgZmxhc2hpbmcgb2YgdGhlIHNlbGVjdCBlbGVtZW50IGluIElFXG4gICAgICAgICAgICAgICAgICAgIGtvLnV0aWxzLnNldE9wdGlvbk5vZGVTZWxlY3Rpb25TdGF0ZShub2RlLCBpc1NlbGVjdGVkKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfVxuXG4gICAgICAgIGVsZW1lbnQuc2Nyb2xsVG9wID0gcHJldmlvdXNTY3JvbGxUb3A7XG4gICAgfVxufTtcbmtvLmV4cHJlc3Npb25SZXdyaXRpbmcudHdvV2F5QmluZGluZ3NbJ3NlbGVjdGVkT3B0aW9ucyddID0gdHJ1ZTtcbmtvLmJpbmRpbmdIYW5kbGVyc1snc3R5bGUnXSA9IHtcbiAgICAndXBkYXRlJzogZnVuY3Rpb24gKGVsZW1lbnQsIHZhbHVlQWNjZXNzb3IpIHtcbiAgICAgICAgdmFyIHZhbHVlID0ga28udXRpbHMudW53cmFwT2JzZXJ2YWJsZSh2YWx1ZUFjY2Vzc29yKCkgfHwge30pO1xuICAgICAgICBrby51dGlscy5vYmplY3RGb3JFYWNoKHZhbHVlLCBmdW5jdGlvbihzdHlsZU5hbWUsIHN0eWxlVmFsdWUpIHtcbiAgICAgICAgICAgIHN0eWxlVmFsdWUgPSBrby51dGlscy51bndyYXBPYnNlcnZhYmxlKHN0eWxlVmFsdWUpO1xuXG4gICAgICAgICAgICBpZiAoc3R5bGVWYWx1ZSA9PT0gbnVsbCB8fCBzdHlsZVZhbHVlID09PSB1bmRlZmluZWQgfHwgc3R5bGVWYWx1ZSA9PT0gZmFsc2UpIHtcbiAgICAgICAgICAgICAgICAvLyBFbXB0eSBzdHJpbmcgcmVtb3ZlcyB0aGUgdmFsdWUsIHdoZXJlYXMgbnVsbC91bmRlZmluZWQgaGF2ZSBubyBlZmZlY3RcbiAgICAgICAgICAgICAgICBzdHlsZVZhbHVlID0gXCJcIjtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgZWxlbWVudC5zdHlsZVtzdHlsZU5hbWVdID0gc3R5bGVWYWx1ZTtcbiAgICAgICAgfSk7XG4gICAgfVxufTtcbmtvLmJpbmRpbmdIYW5kbGVyc1snc3VibWl0J10gPSB7XG4gICAgJ2luaXQnOiBmdW5jdGlvbiAoZWxlbWVudCwgdmFsdWVBY2Nlc3NvciwgYWxsQmluZGluZ3MsIHZpZXdNb2RlbCwgYmluZGluZ0NvbnRleHQpIHtcbiAgICAgICAgaWYgKHR5cGVvZiB2YWx1ZUFjY2Vzc29yKCkgIT0gXCJmdW5jdGlvblwiKVxuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiVGhlIHZhbHVlIGZvciBhIHN1Ym1pdCBiaW5kaW5nIG11c3QgYmUgYSBmdW5jdGlvblwiKTtcbiAgICAgICAga28udXRpbHMucmVnaXN0ZXJFdmVudEhhbmRsZXIoZWxlbWVudCwgXCJzdWJtaXRcIiwgZnVuY3Rpb24gKGV2ZW50KSB7XG4gICAgICAgICAgICB2YXIgaGFuZGxlclJldHVyblZhbHVlO1xuICAgICAgICAgICAgdmFyIHZhbHVlID0gdmFsdWVBY2Nlc3NvcigpO1xuICAgICAgICAgICAgdHJ5IHsgaGFuZGxlclJldHVyblZhbHVlID0gdmFsdWUuY2FsbChiaW5kaW5nQ29udGV4dFsnJGRhdGEnXSwgZWxlbWVudCk7IH1cbiAgICAgICAgICAgIGZpbmFsbHkge1xuICAgICAgICAgICAgICAgIGlmIChoYW5kbGVyUmV0dXJuVmFsdWUgIT09IHRydWUpIHsgLy8gTm9ybWFsbHkgd2Ugd2FudCB0byBwcmV2ZW50IGRlZmF1bHQgYWN0aW9uLiBEZXZlbG9wZXIgY2FuIG92ZXJyaWRlIHRoaXMgYmUgZXhwbGljaXRseSByZXR1cm5pbmcgdHJ1ZS5cbiAgICAgICAgICAgICAgICAgICAgaWYgKGV2ZW50LnByZXZlbnREZWZhdWx0KVxuICAgICAgICAgICAgICAgICAgICAgICAgZXZlbnQucHJldmVudERlZmF1bHQoKTtcbiAgICAgICAgICAgICAgICAgICAgZWxzZVxuICAgICAgICAgICAgICAgICAgICAgICAgZXZlbnQucmV0dXJuVmFsdWUgPSBmYWxzZTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgIH1cbn07XG5rby5iaW5kaW5nSGFuZGxlcnNbJ3RleHQnXSA9IHtcbiAgICAnaW5pdCc6IGZ1bmN0aW9uKCkge1xuICAgICAgICAvLyBQcmV2ZW50IGJpbmRpbmcgb24gdGhlIGR5bmFtaWNhbGx5LWluamVjdGVkIHRleHQgbm9kZSAoYXMgZGV2ZWxvcGVycyBhcmUgdW5saWtlbHkgdG8gZXhwZWN0IHRoYXQsIGFuZCBpdCBoYXMgc2VjdXJpdHkgaW1wbGljYXRpb25zKS5cbiAgICAgICAgLy8gSXQgc2hvdWxkIGFsc28gbWFrZSB0aGluZ3MgZmFzdGVyLCBhcyB3ZSBubyBsb25nZXIgaGF2ZSB0byBjb25zaWRlciB3aGV0aGVyIHRoZSB0ZXh0IG5vZGUgbWlnaHQgYmUgYmluZGFibGUuXG4gICAgICAgIHJldHVybiB7ICdjb250cm9sc0Rlc2NlbmRhbnRCaW5kaW5ncyc6IHRydWUgfTtcbiAgICB9LFxuICAgICd1cGRhdGUnOiBmdW5jdGlvbiAoZWxlbWVudCwgdmFsdWVBY2Nlc3Nvcikge1xuICAgICAgICBrby51dGlscy5zZXRUZXh0Q29udGVudChlbGVtZW50LCB2YWx1ZUFjY2Vzc29yKCkpO1xuICAgIH1cbn07XG5rby52aXJ0dWFsRWxlbWVudHMuYWxsb3dlZEJpbmRpbmdzWyd0ZXh0J10gPSB0cnVlO1xuKGZ1bmN0aW9uICgpIHtcblxuaWYgKHdpbmRvdyAmJiB3aW5kb3cubmF2aWdhdG9yKSB7XG4gICAgdmFyIHBhcnNlVmVyc2lvbiA9IGZ1bmN0aW9uIChtYXRjaGVzKSB7XG4gICAgICAgIGlmIChtYXRjaGVzKSB7XG4gICAgICAgICAgICByZXR1cm4gcGFyc2VGbG9hdChtYXRjaGVzWzFdKTtcbiAgICAgICAgfVxuICAgIH07XG5cbiAgICAvLyBEZXRlY3QgdmFyaW91cyBicm93c2VyIHZlcnNpb25zIGJlY2F1c2Ugc29tZSBvbGQgdmVyc2lvbnMgZG9uJ3QgZnVsbHkgc3VwcG9ydCB0aGUgJ2lucHV0JyBldmVudFxuICAgIHZhciBvcGVyYVZlcnNpb24gPSB3aW5kb3cub3BlcmEgJiYgd2luZG93Lm9wZXJhLnZlcnNpb24gJiYgcGFyc2VJbnQod2luZG93Lm9wZXJhLnZlcnNpb24oKSksXG4gICAgICAgIHVzZXJBZ2VudCA9IHdpbmRvdy5uYXZpZ2F0b3IudXNlckFnZW50LFxuICAgICAgICBzYWZhcmlWZXJzaW9uID0gcGFyc2VWZXJzaW9uKHVzZXJBZ2VudC5tYXRjaCgvXig/Oig/IWNocm9tZSkuKSp2ZXJzaW9uXFwvKFteIF0qKSBzYWZhcmkvaSkpLFxuICAgICAgICBmaXJlZm94VmVyc2lvbiA9IHBhcnNlVmVyc2lvbih1c2VyQWdlbnQubWF0Y2goL0ZpcmVmb3hcXC8oW14gXSopLykpO1xufVxuXG4vLyBJRSA4IGFuZCA5IGhhdmUgYnVncyB0aGF0IHByZXZlbnQgdGhlIG5vcm1hbCBldmVudHMgZnJvbSBmaXJpbmcgd2hlbiB0aGUgdmFsdWUgY2hhbmdlcy5cbi8vIEJ1dCBpdCBkb2VzIGZpcmUgdGhlICdzZWxlY3Rpb25jaGFuZ2UnIGV2ZW50IG9uIG1hbnkgb2YgdGhvc2UsIHByZXN1bWFibHkgYmVjYXVzZSB0aGVcbi8vIGN1cnNvciBpcyBtb3ZpbmcgYW5kIHRoYXQgY291bnRzIGFzIHRoZSBzZWxlY3Rpb24gY2hhbmdpbmcuIFRoZSAnc2VsZWN0aW9uY2hhbmdlJyBldmVudCBpc1xuLy8gZmlyZWQgYXQgdGhlIGRvY3VtZW50IGxldmVsIG9ubHkgYW5kIGRvZXNuJ3QgZGlyZWN0bHkgaW5kaWNhdGUgd2hpY2ggZWxlbWVudCBjaGFuZ2VkLiBXZVxuLy8gc2V0IHVwIGp1c3Qgb25lIGV2ZW50IGhhbmRsZXIgZm9yIHRoZSBkb2N1bWVudCBhbmQgdXNlICdhY3RpdmVFbGVtZW50JyB0byBkZXRlcm1pbmUgd2hpY2hcbi8vIGVsZW1lbnQgd2FzIGNoYW5nZWQuXG5pZiAoa28udXRpbHMuaWVWZXJzaW9uIDwgMTApIHtcbiAgICB2YXIgc2VsZWN0aW9uQ2hhbmdlUmVnaXN0ZXJlZE5hbWUgPSBrby51dGlscy5kb21EYXRhLm5leHRLZXkoKSxcbiAgICAgICAgc2VsZWN0aW9uQ2hhbmdlSGFuZGxlck5hbWUgPSBrby51dGlscy5kb21EYXRhLm5leHRLZXkoKTtcbiAgICB2YXIgc2VsZWN0aW9uQ2hhbmdlSGFuZGxlciA9IGZ1bmN0aW9uKGV2ZW50KSB7XG4gICAgICAgIHZhciB0YXJnZXQgPSB0aGlzLmFjdGl2ZUVsZW1lbnQsXG4gICAgICAgICAgICBoYW5kbGVyID0gdGFyZ2V0ICYmIGtvLnV0aWxzLmRvbURhdGEuZ2V0KHRhcmdldCwgc2VsZWN0aW9uQ2hhbmdlSGFuZGxlck5hbWUpO1xuICAgICAgICBpZiAoaGFuZGxlcikge1xuICAgICAgICAgICAgaGFuZGxlcihldmVudCk7XG4gICAgICAgIH1cbiAgICB9O1xuICAgIHZhciByZWdpc3RlckZvclNlbGVjdGlvbkNoYW5nZUV2ZW50ID0gZnVuY3Rpb24gKGVsZW1lbnQsIGhhbmRsZXIpIHtcbiAgICAgICAgdmFyIG93bmVyRG9jID0gZWxlbWVudC5vd25lckRvY3VtZW50O1xuICAgICAgICBpZiAoIWtvLnV0aWxzLmRvbURhdGEuZ2V0KG93bmVyRG9jLCBzZWxlY3Rpb25DaGFuZ2VSZWdpc3RlcmVkTmFtZSkpIHtcbiAgICAgICAgICAgIGtvLnV0aWxzLmRvbURhdGEuc2V0KG93bmVyRG9jLCBzZWxlY3Rpb25DaGFuZ2VSZWdpc3RlcmVkTmFtZSwgdHJ1ZSk7XG4gICAgICAgICAgICBrby51dGlscy5yZWdpc3RlckV2ZW50SGFuZGxlcihvd25lckRvYywgJ3NlbGVjdGlvbmNoYW5nZScsIHNlbGVjdGlvbkNoYW5nZUhhbmRsZXIpO1xuICAgICAgICB9XG4gICAgICAgIGtvLnV0aWxzLmRvbURhdGEuc2V0KGVsZW1lbnQsIHNlbGVjdGlvbkNoYW5nZUhhbmRsZXJOYW1lLCBoYW5kbGVyKTtcbiAgICB9O1xufVxuXG5rby5iaW5kaW5nSGFuZGxlcnNbJ3RleHRJbnB1dCddID0ge1xuICAgICdpbml0JzogZnVuY3Rpb24gKGVsZW1lbnQsIHZhbHVlQWNjZXNzb3IsIGFsbEJpbmRpbmdzKSB7XG5cbiAgICAgICAgdmFyIHByZXZpb3VzRWxlbWVudFZhbHVlID0gZWxlbWVudC52YWx1ZSxcbiAgICAgICAgICAgIHRpbWVvdXRIYW5kbGUsXG4gICAgICAgICAgICBlbGVtZW50VmFsdWVCZWZvcmVFdmVudDtcblxuICAgICAgICB2YXIgdXBkYXRlTW9kZWwgPSBmdW5jdGlvbiAoZXZlbnQpIHtcbiAgICAgICAgICAgIGNsZWFyVGltZW91dCh0aW1lb3V0SGFuZGxlKTtcbiAgICAgICAgICAgIGVsZW1lbnRWYWx1ZUJlZm9yZUV2ZW50ID0gdGltZW91dEhhbmRsZSA9IHVuZGVmaW5lZDtcblxuICAgICAgICAgICAgdmFyIGVsZW1lbnRWYWx1ZSA9IGVsZW1lbnQudmFsdWU7XG4gICAgICAgICAgICBpZiAocHJldmlvdXNFbGVtZW50VmFsdWUgIT09IGVsZW1lbnRWYWx1ZSkge1xuICAgICAgICAgICAgICAgIC8vIFByb3ZpZGUgYSB3YXkgZm9yIHRlc3RzIHRvIGtub3cgZXhhY3RseSB3aGljaCBldmVudCB3YXMgcHJvY2Vzc2VkXG4gICAgICAgICAgICAgICAgaWYgKERFQlVHICYmIGV2ZW50KSBlbGVtZW50Wydfa29fdGV4dElucHV0UHJvY2Vzc2VkRXZlbnQnXSA9IGV2ZW50LnR5cGU7XG4gICAgICAgICAgICAgICAgcHJldmlvdXNFbGVtZW50VmFsdWUgPSBlbGVtZW50VmFsdWU7XG4gICAgICAgICAgICAgICAga28uZXhwcmVzc2lvblJld3JpdGluZy53cml0ZVZhbHVlVG9Qcm9wZXJ0eSh2YWx1ZUFjY2Vzc29yKCksIGFsbEJpbmRpbmdzLCAndGV4dElucHV0JywgZWxlbWVudFZhbHVlKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfTtcblxuICAgICAgICB2YXIgZGVmZXJVcGRhdGVNb2RlbCA9IGZ1bmN0aW9uIChldmVudCkge1xuICAgICAgICAgICAgaWYgKCF0aW1lb3V0SGFuZGxlKSB7XG4gICAgICAgICAgICAgICAgLy8gVGhlIGVsZW1lbnRWYWx1ZUJlZm9yZUV2ZW50IHZhcmlhYmxlIGlzIHNldCAqb25seSogZHVyaW5nIHRoZSBicmllZiBnYXAgYmV0d2VlbiBhblxuICAgICAgICAgICAgICAgIC8vIGV2ZW50IGZpcmluZyBhbmQgdGhlIHVwZGF0ZU1vZGVsIGZ1bmN0aW9uIHJ1bm5pbmcuIFRoaXMgYWxsb3dzIHVzIHRvIGlnbm9yZSBtb2RlbFxuICAgICAgICAgICAgICAgIC8vIHVwZGF0ZXMgdGhhdCBhcmUgZnJvbSB0aGUgcHJldmlvdXMgc3RhdGUgb2YgdGhlIGVsZW1lbnQsIHVzdWFsbHkgZHVlIHRvIHRlY2huaXF1ZXNcbiAgICAgICAgICAgICAgICAvLyBzdWNoIGFzIHJhdGVMaW1pdC4gU3VjaCB1cGRhdGVzLCBpZiBub3QgaWdub3JlZCwgY2FuIGNhdXNlIGtleXN0cm9rZXMgdG8gYmUgbG9zdC5cbiAgICAgICAgICAgICAgICBlbGVtZW50VmFsdWVCZWZvcmVFdmVudCA9IGVsZW1lbnQudmFsdWU7XG4gICAgICAgICAgICAgICAgdmFyIGhhbmRsZXIgPSBERUJVRyA/IHVwZGF0ZU1vZGVsLmJpbmQoZWxlbWVudCwge3R5cGU6IGV2ZW50LnR5cGV9KSA6IHVwZGF0ZU1vZGVsO1xuICAgICAgICAgICAgICAgIHRpbWVvdXRIYW5kbGUgPSBrby51dGlscy5zZXRUaW1lb3V0KGhhbmRsZXIsIDQpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9O1xuXG4gICAgICAgIC8vIElFOSB3aWxsIG1lc3MgdXAgdGhlIERPTSBpZiB5b3UgaGFuZGxlIGV2ZW50cyBzeW5jaHJvbm91c2x5IHdoaWNoIHJlc3VsdHMgaW4gRE9NIGNoYW5nZXMgKHN1Y2ggYXMgb3RoZXIgYmluZGluZ3MpO1xuICAgICAgICAvLyBzbyB3ZSdsbCBtYWtlIHN1cmUgYWxsIHVwZGF0ZXMgYXJlIGFzeW5jaHJvbm91c1xuICAgICAgICB2YXIgaWVVcGRhdGVNb2RlbCA9IGtvLnV0aWxzLmllVmVyc2lvbiA9PSA5ID8gZGVmZXJVcGRhdGVNb2RlbCA6IHVwZGF0ZU1vZGVsO1xuXG4gICAgICAgIHZhciB1cGRhdGVWaWV3ID0gZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgdmFyIG1vZGVsVmFsdWUgPSBrby51dGlscy51bndyYXBPYnNlcnZhYmxlKHZhbHVlQWNjZXNzb3IoKSk7XG5cbiAgICAgICAgICAgIGlmIChtb2RlbFZhbHVlID09PSBudWxsIHx8IG1vZGVsVmFsdWUgPT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgICAgIG1vZGVsVmFsdWUgPSAnJztcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgaWYgKGVsZW1lbnRWYWx1ZUJlZm9yZUV2ZW50ICE9PSB1bmRlZmluZWQgJiYgbW9kZWxWYWx1ZSA9PT0gZWxlbWVudFZhbHVlQmVmb3JlRXZlbnQpIHtcbiAgICAgICAgICAgICAgICBrby51dGlscy5zZXRUaW1lb3V0KHVwZGF0ZVZpZXcsIDQpO1xuICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgLy8gVXBkYXRlIHRoZSBlbGVtZW50IG9ubHkgaWYgdGhlIGVsZW1lbnQgYW5kIG1vZGVsIGFyZSBkaWZmZXJlbnQuIE9uIHNvbWUgYnJvd3NlcnMsIHVwZGF0aW5nIHRoZSB2YWx1ZVxuICAgICAgICAgICAgLy8gd2lsbCBtb3ZlIHRoZSBjdXJzb3IgdG8gdGhlIGVuZCBvZiB0aGUgaW5wdXQsIHdoaWNoIHdvdWxkIGJlIGJhZCB3aGlsZSB0aGUgdXNlciBpcyB0eXBpbmcuXG4gICAgICAgICAgICBpZiAoZWxlbWVudC52YWx1ZSAhPT0gbW9kZWxWYWx1ZSkge1xuICAgICAgICAgICAgICAgIHByZXZpb3VzRWxlbWVudFZhbHVlID0gbW9kZWxWYWx1ZTsgIC8vIE1ha2Ugc3VyZSB3ZSBpZ25vcmUgZXZlbnRzIChwcm9wZXJ0eWNoYW5nZSkgdGhhdCByZXN1bHQgZnJvbSB1cGRhdGluZyB0aGUgdmFsdWVcbiAgICAgICAgICAgICAgICBlbGVtZW50LnZhbHVlID0gbW9kZWxWYWx1ZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfTtcblxuICAgICAgICB2YXIgb25FdmVudCA9IGZ1bmN0aW9uIChldmVudCwgaGFuZGxlcikge1xuICAgICAgICAgICAga28udXRpbHMucmVnaXN0ZXJFdmVudEhhbmRsZXIoZWxlbWVudCwgZXZlbnQsIGhhbmRsZXIpO1xuICAgICAgICB9O1xuXG4gICAgICAgIGlmIChERUJVRyAmJiBrby5iaW5kaW5nSGFuZGxlcnNbJ3RleHRJbnB1dCddWydfZm9yY2VVcGRhdGVPbiddKSB7XG4gICAgICAgICAgICAvLyBQcm92aWRlIGEgd2F5IGZvciB0ZXN0cyB0byBzcGVjaWZ5IGV4YWN0bHkgd2hpY2ggZXZlbnRzIGFyZSBib3VuZFxuICAgICAgICAgICAga28udXRpbHMuYXJyYXlGb3JFYWNoKGtvLmJpbmRpbmdIYW5kbGVyc1sndGV4dElucHV0J11bJ19mb3JjZVVwZGF0ZU9uJ10sIGZ1bmN0aW9uKGV2ZW50TmFtZSkge1xuICAgICAgICAgICAgICAgIGlmIChldmVudE5hbWUuc2xpY2UoMCw1KSA9PSAnYWZ0ZXInKSB7XG4gICAgICAgICAgICAgICAgICAgIG9uRXZlbnQoZXZlbnROYW1lLnNsaWNlKDUpLCBkZWZlclVwZGF0ZU1vZGVsKTtcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICBvbkV2ZW50KGV2ZW50TmFtZSwgdXBkYXRlTW9kZWwpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgaWYgKGtvLnV0aWxzLmllVmVyc2lvbiA8IDEwKSB7XG4gICAgICAgICAgICAgICAgLy8gSW50ZXJuZXQgRXhwbG9yZXIgPD0gOCBkb2Vzbid0IHN1cHBvcnQgdGhlICdpbnB1dCcgZXZlbnQsIGJ1dCBkb2VzIGluY2x1ZGUgJ3Byb3BlcnR5Y2hhbmdlJyB0aGF0IGZpcmVzIHdoZW5ldmVyXG4gICAgICAgICAgICAgICAgLy8gYW55IHByb3BlcnR5IG9mIGFuIGVsZW1lbnQgY2hhbmdlcy4gVW5saWtlICdpbnB1dCcsIGl0IGFsc28gZmlyZXMgaWYgYSBwcm9wZXJ0eSBpcyBjaGFuZ2VkIGZyb20gSmF2YVNjcmlwdCBjb2RlLFxuICAgICAgICAgICAgICAgIC8vIGJ1dCB0aGF0J3MgYW4gYWNjZXB0YWJsZSBjb21wcm9taXNlIGZvciB0aGlzIGJpbmRpbmcuIElFIDkgZG9lcyBzdXBwb3J0ICdpbnB1dCcsIGJ1dCBzaW5jZSBpdCBkb2Vzbid0IGZpcmUgaXRcbiAgICAgICAgICAgICAgICAvLyB3aGVuIHVzaW5nIGF1dG9jb21wbGV0ZSwgd2UnbGwgdXNlICdwcm9wZXJ0eWNoYW5nZScgZm9yIGl0IGFsc28uXG4gICAgICAgICAgICAgICAgb25FdmVudCgncHJvcGVydHljaGFuZ2UnLCBmdW5jdGlvbihldmVudCkge1xuICAgICAgICAgICAgICAgICAgICBpZiAoZXZlbnQucHJvcGVydHlOYW1lID09PSAndmFsdWUnKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZVVwZGF0ZU1vZGVsKGV2ZW50KTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICAgICAgaWYgKGtvLnV0aWxzLmllVmVyc2lvbiA9PSA4KSB7XG4gICAgICAgICAgICAgICAgICAgIC8vIElFIDggaGFzIGEgYnVnIHdoZXJlIGl0IGZhaWxzIHRvIGZpcmUgJ3Byb3BlcnR5Y2hhbmdlJyBvbiB0aGUgZmlyc3QgdXBkYXRlIGZvbGxvd2luZyBhIHZhbHVlIGNoYW5nZSBmcm9tXG4gICAgICAgICAgICAgICAgICAgIC8vIEphdmFTY3JpcHQgY29kZS4gSXQgYWxzbyBkb2Vzbid0IGZpcmUgaWYgeW91IGNsZWFyIHRoZSBlbnRpcmUgdmFsdWUuIFRvIGZpeCB0aGlzLCB3ZSBiaW5kIHRvIHRoZSBmb2xsb3dpbmdcbiAgICAgICAgICAgICAgICAgICAgLy8gZXZlbnRzIHRvby5cbiAgICAgICAgICAgICAgICAgICAgb25FdmVudCgna2V5dXAnLCB1cGRhdGVNb2RlbCk7ICAgICAgLy8gQSBzaW5nbGUga2V5c3Rva2VcbiAgICAgICAgICAgICAgICAgICAgb25FdmVudCgna2V5ZG93bicsIHVwZGF0ZU1vZGVsKTsgICAgLy8gVGhlIGZpcnN0IGNoYXJhY3RlciB3aGVuIGEga2V5IGlzIGhlbGQgZG93blxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBpZiAoa28udXRpbHMuaWVWZXJzaW9uID49IDgpIHtcbiAgICAgICAgICAgICAgICAgICAgLy8gSW50ZXJuZXQgRXhwbG9yZXIgOSBkb2Vzbid0IGZpcmUgdGhlICdpbnB1dCcgZXZlbnQgd2hlbiBkZWxldGluZyB0ZXh0LCBpbmNsdWRpbmcgdXNpbmdcbiAgICAgICAgICAgICAgICAgICAgLy8gdGhlIGJhY2tzcGFjZSwgZGVsZXRlLCBvciBjdHJsLXgga2V5cywgY2xpY2tpbmcgdGhlICd4JyB0byBjbGVhciB0aGUgaW5wdXQsIGRyYWdnaW5nIHRleHRcbiAgICAgICAgICAgICAgICAgICAgLy8gb3V0IG9mIHRoZSBmaWVsZCwgYW5kIGN1dHRpbmcgb3IgZGVsZXRpbmcgdGV4dCB1c2luZyB0aGUgY29udGV4dCBtZW51LiAnc2VsZWN0aW9uY2hhbmdlJ1xuICAgICAgICAgICAgICAgICAgICAvLyBjYW4gZGV0ZWN0IGFsbCBvZiB0aG9zZSBleGNlcHQgZHJhZ2dpbmcgdGV4dCBvdXQgb2YgdGhlIGZpZWxkLCBmb3Igd2hpY2ggd2UgdXNlICdkcmFnZW5kJy5cbiAgICAgICAgICAgICAgICAgICAgLy8gVGhlc2UgYXJlIGFsc28gbmVlZGVkIGluIElFOCBiZWNhdXNlIG9mIHRoZSBidWcgZGVzY3JpYmVkIGFib3ZlLlxuICAgICAgICAgICAgICAgICAgICByZWdpc3RlckZvclNlbGVjdGlvbkNoYW5nZUV2ZW50KGVsZW1lbnQsIGllVXBkYXRlTW9kZWwpOyAgLy8gJ3NlbGVjdGlvbmNoYW5nZScgY292ZXJzIGN1dCwgcGFzdGUsIGRyb3AsIGRlbGV0ZSwgZXRjLlxuICAgICAgICAgICAgICAgICAgICBvbkV2ZW50KCdkcmFnZW5kJywgZGVmZXJVcGRhdGVNb2RlbCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAvLyBBbGwgb3RoZXIgc3VwcG9ydGVkIGJyb3dzZXJzIHN1cHBvcnQgdGhlICdpbnB1dCcgZXZlbnQsIHdoaWNoIGZpcmVzIHdoZW5ldmVyIHRoZSBjb250ZW50IG9mIHRoZSBlbGVtZW50IGlzIGNoYW5nZWRcbiAgICAgICAgICAgICAgICAvLyB0aHJvdWdoIHRoZSB1c2VyIGludGVyZmFjZS5cbiAgICAgICAgICAgICAgICBvbkV2ZW50KCdpbnB1dCcsIHVwZGF0ZU1vZGVsKTtcblxuICAgICAgICAgICAgICAgIGlmIChzYWZhcmlWZXJzaW9uIDwgNSAmJiBrby51dGlscy50YWdOYW1lTG93ZXIoZWxlbWVudCkgPT09IFwidGV4dGFyZWFcIikge1xuICAgICAgICAgICAgICAgICAgICAvLyBTYWZhcmkgPDUgZG9lc24ndCBmaXJlIHRoZSAnaW5wdXQnIGV2ZW50IGZvciA8dGV4dGFyZWE+IGVsZW1lbnRzIChpdCBkb2VzIGZpcmUgJ3RleHRJbnB1dCdcbiAgICAgICAgICAgICAgICAgICAgLy8gYnV0IG9ubHkgd2hlbiB0eXBpbmcpLiBTbyB3ZSdsbCBqdXN0IGNhdGNoIGFzIG11Y2ggYXMgd2UgY2FuIHdpdGgga2V5ZG93biwgY3V0LCBhbmQgcGFzdGUuXG4gICAgICAgICAgICAgICAgICAgIG9uRXZlbnQoJ2tleWRvd24nLCBkZWZlclVwZGF0ZU1vZGVsKTtcbiAgICAgICAgICAgICAgICAgICAgb25FdmVudCgncGFzdGUnLCBkZWZlclVwZGF0ZU1vZGVsKTtcbiAgICAgICAgICAgICAgICAgICAgb25FdmVudCgnY3V0JywgZGVmZXJVcGRhdGVNb2RlbCk7XG4gICAgICAgICAgICAgICAgfSBlbHNlIGlmIChvcGVyYVZlcnNpb24gPCAxMSkge1xuICAgICAgICAgICAgICAgICAgICAvLyBPcGVyYSAxMCBkb2Vzbid0IGFsd2F5cyBmaXJlIHRoZSAnaW5wdXQnIGV2ZW50IGZvciBjdXQsIHBhc3RlLCB1bmRvICYgZHJvcCBvcGVyYXRpb25zLlxuICAgICAgICAgICAgICAgICAgICAvLyBXZSBjYW4gdHJ5IHRvIGNhdGNoIHNvbWUgb2YgdGhvc2UgdXNpbmcgJ2tleWRvd24nLlxuICAgICAgICAgICAgICAgICAgICBvbkV2ZW50KCdrZXlkb3duJywgZGVmZXJVcGRhdGVNb2RlbCk7XG4gICAgICAgICAgICAgICAgfSBlbHNlIGlmIChmaXJlZm94VmVyc2lvbiA8IDQuMCkge1xuICAgICAgICAgICAgICAgICAgICAvLyBGaXJlZm94IDw9IDMuNiBkb2Vzbid0IGZpcmUgdGhlICdpbnB1dCcgZXZlbnQgd2hlbiB0ZXh0IGlzIGZpbGxlZCBpbiB0aHJvdWdoIGF1dG9jb21wbGV0ZVxuICAgICAgICAgICAgICAgICAgICBvbkV2ZW50KCdET01BdXRvQ29tcGxldGUnLCB1cGRhdGVNb2RlbCk7XG5cbiAgICAgICAgICAgICAgICAgICAgLy8gRmlyZWZveCA8PTMuNSBkb2Vzbid0IGZpcmUgdGhlICdpbnB1dCcgZXZlbnQgd2hlbiB0ZXh0IGlzIGRyb3BwZWQgaW50byB0aGUgaW5wdXQuXG4gICAgICAgICAgICAgICAgICAgIG9uRXZlbnQoJ2RyYWdkcm9wJywgdXBkYXRlTW9kZWwpOyAgICAgICAvLyA8My41XG4gICAgICAgICAgICAgICAgICAgIG9uRXZlbnQoJ2Ryb3AnLCB1cGRhdGVNb2RlbCk7ICAgICAgICAgICAvLyAzLjVcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICAvLyBCaW5kIHRvIHRoZSBjaGFuZ2UgZXZlbnQgc28gdGhhdCB3ZSBjYW4gY2F0Y2ggcHJvZ3JhbW1hdGljIHVwZGF0ZXMgb2YgdGhlIHZhbHVlIHRoYXQgZmlyZSB0aGlzIGV2ZW50LlxuICAgICAgICBvbkV2ZW50KCdjaGFuZ2UnLCB1cGRhdGVNb2RlbCk7XG5cbiAgICAgICAga28uY29tcHV0ZWQodXBkYXRlVmlldywgbnVsbCwgeyBkaXNwb3NlV2hlbk5vZGVJc1JlbW92ZWQ6IGVsZW1lbnQgfSk7XG4gICAgfVxufTtcbmtvLmV4cHJlc3Npb25SZXdyaXRpbmcudHdvV2F5QmluZGluZ3NbJ3RleHRJbnB1dCddID0gdHJ1ZTtcblxuLy8gdGV4dGlucHV0IGlzIGFuIGFsaWFzIGZvciB0ZXh0SW5wdXRcbmtvLmJpbmRpbmdIYW5kbGVyc1sndGV4dGlucHV0J10gPSB7XG4gICAgLy8gcHJlcHJvY2VzcyBpcyB0aGUgb25seSB3YXkgdG8gc2V0IHVwIGEgZnVsbCBhbGlhc1xuICAgICdwcmVwcm9jZXNzJzogZnVuY3Rpb24gKHZhbHVlLCBuYW1lLCBhZGRCaW5kaW5nKSB7XG4gICAgICAgIGFkZEJpbmRpbmcoJ3RleHRJbnB1dCcsIHZhbHVlKTtcbiAgICB9XG59O1xuXG59KSgpO2tvLmJpbmRpbmdIYW5kbGVyc1sndW5pcXVlTmFtZSddID0ge1xuICAgICdpbml0JzogZnVuY3Rpb24gKGVsZW1lbnQsIHZhbHVlQWNjZXNzb3IpIHtcbiAgICAgICAgaWYgKHZhbHVlQWNjZXNzb3IoKSkge1xuICAgICAgICAgICAgdmFyIG5hbWUgPSBcImtvX3VuaXF1ZV9cIiArICgrK2tvLmJpbmRpbmdIYW5kbGVyc1sndW5pcXVlTmFtZSddLmN1cnJlbnRJbmRleCk7XG4gICAgICAgICAgICBrby51dGlscy5zZXRFbGVtZW50TmFtZShlbGVtZW50LCBuYW1lKTtcbiAgICAgICAgfVxuICAgIH1cbn07XG5rby5iaW5kaW5nSGFuZGxlcnNbJ3VuaXF1ZU5hbWUnXS5jdXJyZW50SW5kZXggPSAwO1xua28uYmluZGluZ0hhbmRsZXJzWyd2YWx1ZSddID0ge1xuICAgICdhZnRlcic6IFsnb3B0aW9ucycsICdmb3JlYWNoJ10sXG4gICAgJ2luaXQnOiBmdW5jdGlvbiAoZWxlbWVudCwgdmFsdWVBY2Nlc3NvciwgYWxsQmluZGluZ3MpIHtcbiAgICAgICAgLy8gSWYgdGhlIHZhbHVlIGJpbmRpbmcgaXMgcGxhY2VkIG9uIGEgcmFkaW8vY2hlY2tib3gsIHRoZW4ganVzdCBwYXNzIHRocm91Z2ggdG8gY2hlY2tlZFZhbHVlIGFuZCBxdWl0XG4gICAgICAgIGlmIChlbGVtZW50LnRhZ05hbWUudG9Mb3dlckNhc2UoKSA9PSBcImlucHV0XCIgJiYgKGVsZW1lbnQudHlwZSA9PSBcImNoZWNrYm94XCIgfHwgZWxlbWVudC50eXBlID09IFwicmFkaW9cIikpIHtcbiAgICAgICAgICAgIGtvLmFwcGx5QmluZGluZ0FjY2Vzc29yc1RvTm9kZShlbGVtZW50LCB7ICdjaGVja2VkVmFsdWUnOiB2YWx1ZUFjY2Vzc29yIH0pO1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG5cbiAgICAgICAgLy8gQWx3YXlzIGNhdGNoIFwiY2hhbmdlXCIgZXZlbnQ7IHBvc3NpYmx5IG90aGVyIGV2ZW50cyB0b28gaWYgYXNrZWRcbiAgICAgICAgdmFyIGV2ZW50c1RvQ2F0Y2ggPSBbXCJjaGFuZ2VcIl07XG4gICAgICAgIHZhciByZXF1ZXN0ZWRFdmVudHNUb0NhdGNoID0gYWxsQmluZGluZ3MuZ2V0KFwidmFsdWVVcGRhdGVcIik7XG4gICAgICAgIHZhciBwcm9wZXJ0eUNoYW5nZWRGaXJlZCA9IGZhbHNlO1xuICAgICAgICB2YXIgZWxlbWVudFZhbHVlQmVmb3JlRXZlbnQgPSBudWxsO1xuXG4gICAgICAgIGlmIChyZXF1ZXN0ZWRFdmVudHNUb0NhdGNoKSB7XG4gICAgICAgICAgICBpZiAodHlwZW9mIHJlcXVlc3RlZEV2ZW50c1RvQ2F0Y2ggPT0gXCJzdHJpbmdcIikgLy8gQWxsb3cgYm90aCBpbmRpdmlkdWFsIGV2ZW50IG5hbWVzLCBhbmQgYXJyYXlzIG9mIGV2ZW50IG5hbWVzXG4gICAgICAgICAgICAgICAgcmVxdWVzdGVkRXZlbnRzVG9DYXRjaCA9IFtyZXF1ZXN0ZWRFdmVudHNUb0NhdGNoXTtcbiAgICAgICAgICAgIGtvLnV0aWxzLmFycmF5UHVzaEFsbChldmVudHNUb0NhdGNoLCByZXF1ZXN0ZWRFdmVudHNUb0NhdGNoKTtcbiAgICAgICAgICAgIGV2ZW50c1RvQ2F0Y2ggPSBrby51dGlscy5hcnJheUdldERpc3RpbmN0VmFsdWVzKGV2ZW50c1RvQ2F0Y2gpO1xuICAgICAgICB9XG5cbiAgICAgICAgdmFyIHZhbHVlVXBkYXRlSGFuZGxlciA9IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgZWxlbWVudFZhbHVlQmVmb3JlRXZlbnQgPSBudWxsO1xuICAgICAgICAgICAgcHJvcGVydHlDaGFuZ2VkRmlyZWQgPSBmYWxzZTtcbiAgICAgICAgICAgIHZhciBtb2RlbFZhbHVlID0gdmFsdWVBY2Nlc3NvcigpO1xuICAgICAgICAgICAgdmFyIGVsZW1lbnRWYWx1ZSA9IGtvLnNlbGVjdEV4dGVuc2lvbnMucmVhZFZhbHVlKGVsZW1lbnQpO1xuICAgICAgICAgICAga28uZXhwcmVzc2lvblJld3JpdGluZy53cml0ZVZhbHVlVG9Qcm9wZXJ0eShtb2RlbFZhbHVlLCBhbGxCaW5kaW5ncywgJ3ZhbHVlJywgZWxlbWVudFZhbHVlKTtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIFdvcmthcm91bmQgZm9yIGh0dHBzOi8vZ2l0aHViLmNvbS9TdGV2ZVNhbmRlcnNvbi9rbm9ja291dC9pc3N1ZXMvMTIyXG4gICAgICAgIC8vIElFIGRvZXNuJ3QgZmlyZSBcImNoYW5nZVwiIGV2ZW50cyBvbiB0ZXh0Ym94ZXMgaWYgdGhlIHVzZXIgc2VsZWN0cyBhIHZhbHVlIGZyb20gaXRzIGF1dG9jb21wbGV0ZSBsaXN0XG4gICAgICAgIHZhciBpZUF1dG9Db21wbGV0ZUhhY2tOZWVkZWQgPSBrby51dGlscy5pZVZlcnNpb24gJiYgZWxlbWVudC50YWdOYW1lLnRvTG93ZXJDYXNlKCkgPT0gXCJpbnB1dFwiICYmIGVsZW1lbnQudHlwZSA9PSBcInRleHRcIlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJiYgZWxlbWVudC5hdXRvY29tcGxldGUgIT0gXCJvZmZcIiAmJiAoIWVsZW1lbnQuZm9ybSB8fCBlbGVtZW50LmZvcm0uYXV0b2NvbXBsZXRlICE9IFwib2ZmXCIpO1xuICAgICAgICBpZiAoaWVBdXRvQ29tcGxldGVIYWNrTmVlZGVkICYmIGtvLnV0aWxzLmFycmF5SW5kZXhPZihldmVudHNUb0NhdGNoLCBcInByb3BlcnR5Y2hhbmdlXCIpID09IC0xKSB7XG4gICAgICAgICAgICBrby51dGlscy5yZWdpc3RlckV2ZW50SGFuZGxlcihlbGVtZW50LCBcInByb3BlcnR5Y2hhbmdlXCIsIGZ1bmN0aW9uICgpIHsgcHJvcGVydHlDaGFuZ2VkRmlyZWQgPSB0cnVlIH0pO1xuICAgICAgICAgICAga28udXRpbHMucmVnaXN0ZXJFdmVudEhhbmRsZXIoZWxlbWVudCwgXCJmb2N1c1wiLCBmdW5jdGlvbiAoKSB7IHByb3BlcnR5Q2hhbmdlZEZpcmVkID0gZmFsc2UgfSk7XG4gICAgICAgICAgICBrby51dGlscy5yZWdpc3RlckV2ZW50SGFuZGxlcihlbGVtZW50LCBcImJsdXJcIiwgZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAgICAgaWYgKHByb3BlcnR5Q2hhbmdlZEZpcmVkKSB7XG4gICAgICAgICAgICAgICAgICAgIHZhbHVlVXBkYXRlSGFuZGxlcigpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9XG5cbiAgICAgICAga28udXRpbHMuYXJyYXlGb3JFYWNoKGV2ZW50c1RvQ2F0Y2gsIGZ1bmN0aW9uKGV2ZW50TmFtZSkge1xuICAgICAgICAgICAgLy8gVGhlIHN5bnRheCBcImFmdGVyPGV2ZW50bmFtZT5cIiBtZWFucyBcInJ1biB0aGUgaGFuZGxlciBhc3luY2hyb25vdXNseSBhZnRlciB0aGUgZXZlbnRcIlxuICAgICAgICAgICAgLy8gVGhpcyBpcyB1c2VmdWwsIGZvciBleGFtcGxlLCB0byBjYXRjaCBcImtleWRvd25cIiBldmVudHMgYWZ0ZXIgdGhlIGJyb3dzZXIgaGFzIHVwZGF0ZWQgdGhlIGNvbnRyb2xcbiAgICAgICAgICAgIC8vIChvdGhlcndpc2UsIGtvLnNlbGVjdEV4dGVuc2lvbnMucmVhZFZhbHVlKHRoaXMpIHdpbGwgcmVjZWl2ZSB0aGUgY29udHJvbCdzIHZhbHVlICpiZWZvcmUqIHRoZSBrZXkgZXZlbnQpXG4gICAgICAgICAgICB2YXIgaGFuZGxlciA9IHZhbHVlVXBkYXRlSGFuZGxlcjtcbiAgICAgICAgICAgIGlmIChrby51dGlscy5zdHJpbmdTdGFydHNXaXRoKGV2ZW50TmFtZSwgXCJhZnRlclwiKSkge1xuICAgICAgICAgICAgICAgIGhhbmRsZXIgPSBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgICAgICAgICAgLy8gVGhlIGVsZW1lbnRWYWx1ZUJlZm9yZUV2ZW50IHZhcmlhYmxlIGlzIG5vbi1udWxsICpvbmx5KiBkdXJpbmcgdGhlIGJyaWVmIGdhcCBiZXR3ZWVuXG4gICAgICAgICAgICAgICAgICAgIC8vIGEga2V5WCBldmVudCBmaXJpbmcgYW5kIHRoZSB2YWx1ZVVwZGF0ZUhhbmRsZXIgcnVubmluZywgd2hpY2ggaXMgc2NoZWR1bGVkIHRvIGhhcHBlblxuICAgICAgICAgICAgICAgICAgICAvLyBhdCB0aGUgZWFybGllc3QgYXN5bmNocm9ub3VzIG9wcG9ydHVuaXR5LiBXZSBzdG9yZSB0aGlzIHRlbXBvcmFyeSBpbmZvcm1hdGlvbiBzbyB0aGF0XG4gICAgICAgICAgICAgICAgICAgIC8vIGlmLCBiZXR3ZWVuIGtleVggYW5kIHZhbHVlVXBkYXRlSGFuZGxlciwgdGhlIHVuZGVybHlpbmcgbW9kZWwgdmFsdWUgY2hhbmdlcyBzZXBhcmF0ZWx5LFxuICAgICAgICAgICAgICAgICAgICAvLyB3ZSBjYW4gb3ZlcndyaXRlIHRoYXQgbW9kZWwgdmFsdWUgY2hhbmdlIHdpdGggdGhlIHZhbHVlIHRoZSB1c2VyIGp1c3QgdHlwZWQuIE90aGVyd2lzZSxcbiAgICAgICAgICAgICAgICAgICAgLy8gdGVjaG5pcXVlcyBsaWtlIHJhdGVMaW1pdCBjYW4gdHJpZ2dlciBtb2RlbCBjaGFuZ2VzIGF0IGNyaXRpY2FsIG1vbWVudHMgdGhhdCB3aWxsXG4gICAgICAgICAgICAgICAgICAgIC8vIG92ZXJyaWRlIHRoZSB1c2VyJ3MgaW5wdXRzLCBjYXVzaW5nIGtleXN0cm9rZXMgdG8gYmUgbG9zdC5cbiAgICAgICAgICAgICAgICAgICAgZWxlbWVudFZhbHVlQmVmb3JlRXZlbnQgPSBrby5zZWxlY3RFeHRlbnNpb25zLnJlYWRWYWx1ZShlbGVtZW50KTtcbiAgICAgICAgICAgICAgICAgICAga28udXRpbHMuc2V0VGltZW91dCh2YWx1ZVVwZGF0ZUhhbmRsZXIsIDApO1xuICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICAgICAgZXZlbnROYW1lID0gZXZlbnROYW1lLnN1YnN0cmluZyhcImFmdGVyXCIubGVuZ3RoKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGtvLnV0aWxzLnJlZ2lzdGVyRXZlbnRIYW5kbGVyKGVsZW1lbnQsIGV2ZW50TmFtZSwgaGFuZGxlcik7XG4gICAgICAgIH0pO1xuXG4gICAgICAgIHZhciB1cGRhdGVGcm9tTW9kZWwgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICB2YXIgbmV3VmFsdWUgPSBrby51dGlscy51bndyYXBPYnNlcnZhYmxlKHZhbHVlQWNjZXNzb3IoKSk7XG4gICAgICAgICAgICB2YXIgZWxlbWVudFZhbHVlID0ga28uc2VsZWN0RXh0ZW5zaW9ucy5yZWFkVmFsdWUoZWxlbWVudCk7XG5cbiAgICAgICAgICAgIGlmIChlbGVtZW50VmFsdWVCZWZvcmVFdmVudCAhPT0gbnVsbCAmJiBuZXdWYWx1ZSA9PT0gZWxlbWVudFZhbHVlQmVmb3JlRXZlbnQpIHtcbiAgICAgICAgICAgICAgICBrby51dGlscy5zZXRUaW1lb3V0KHVwZGF0ZUZyb21Nb2RlbCwgMCk7XG4gICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICB2YXIgdmFsdWVIYXNDaGFuZ2VkID0gKG5ld1ZhbHVlICE9PSBlbGVtZW50VmFsdWUpO1xuXG4gICAgICAgICAgICBpZiAodmFsdWVIYXNDaGFuZ2VkKSB7XG4gICAgICAgICAgICAgICAgaWYgKGtvLnV0aWxzLnRhZ05hbWVMb3dlcihlbGVtZW50KSA9PT0gXCJzZWxlY3RcIikge1xuICAgICAgICAgICAgICAgICAgICB2YXIgYWxsb3dVbnNldCA9IGFsbEJpbmRpbmdzLmdldCgndmFsdWVBbGxvd1Vuc2V0Jyk7XG4gICAgICAgICAgICAgICAgICAgIHZhciBhcHBseVZhbHVlQWN0aW9uID0gZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgICAgICAgICAga28uc2VsZWN0RXh0ZW5zaW9ucy53cml0ZVZhbHVlKGVsZW1lbnQsIG5ld1ZhbHVlLCBhbGxvd1Vuc2V0KTtcbiAgICAgICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICAgICAgICAgYXBwbHlWYWx1ZUFjdGlvbigpO1xuXG4gICAgICAgICAgICAgICAgICAgIGlmICghYWxsb3dVbnNldCAmJiBuZXdWYWx1ZSAhPT0ga28uc2VsZWN0RXh0ZW5zaW9ucy5yZWFkVmFsdWUoZWxlbWVudCkpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIElmIHlvdSB0cnkgdG8gc2V0IGEgbW9kZWwgdmFsdWUgdGhhdCBjYW4ndCBiZSByZXByZXNlbnRlZCBpbiBhbiBhbHJlYWR5LXBvcHVsYXRlZCBkcm9wZG93biwgcmVqZWN0IHRoYXQgY2hhbmdlLFxuICAgICAgICAgICAgICAgICAgICAgICAgLy8gYmVjYXVzZSB5b3UncmUgbm90IGFsbG93ZWQgdG8gaGF2ZSBhIG1vZGVsIHZhbHVlIHRoYXQgZGlzYWdyZWVzIHdpdGggYSB2aXNpYmxlIFVJIHNlbGVjdGlvbi5cbiAgICAgICAgICAgICAgICAgICAgICAgIGtvLmRlcGVuZGVuY3lEZXRlY3Rpb24uaWdub3JlKGtvLnV0aWxzLnRyaWdnZXJFdmVudCwgbnVsbCwgW2VsZW1lbnQsIFwiY2hhbmdlXCJdKTtcbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIFdvcmthcm91bmQgZm9yIElFNiBidWc6IEl0IHdvbid0IHJlbGlhYmx5IGFwcGx5IHZhbHVlcyB0byBTRUxFQ1Qgbm9kZXMgZHVyaW5nIHRoZSBzYW1lIGV4ZWN1dGlvbiB0aHJlYWRcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIHJpZ2h0IGFmdGVyIHlvdSd2ZSBjaGFuZ2VkIHRoZSBzZXQgb2YgT1BUSU9OIG5vZGVzIG9uIGl0LiBTbyBmb3IgdGhhdCBub2RlIHR5cGUsIHdlJ2xsIHNjaGVkdWxlIGEgc2Vjb25kIHRocmVhZFxuICAgICAgICAgICAgICAgICAgICAgICAgLy8gdG8gYXBwbHkgdGhlIHZhbHVlIGFzIHdlbGwuXG4gICAgICAgICAgICAgICAgICAgICAgICBrby51dGlscy5zZXRUaW1lb3V0KGFwcGx5VmFsdWVBY3Rpb24sIDApO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAga28uc2VsZWN0RXh0ZW5zaW9ucy53cml0ZVZhbHVlKGVsZW1lbnQsIG5ld1ZhbHVlKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH07XG5cbiAgICAgICAga28uY29tcHV0ZWQodXBkYXRlRnJvbU1vZGVsLCBudWxsLCB7IGRpc3Bvc2VXaGVuTm9kZUlzUmVtb3ZlZDogZWxlbWVudCB9KTtcbiAgICB9LFxuICAgICd1cGRhdGUnOiBmdW5jdGlvbigpIHt9IC8vIEtlZXAgZm9yIGJhY2t3YXJkcyBjb21wYXRpYmlsaXR5IHdpdGggY29kZSB0aGF0IG1heSBoYXZlIHdyYXBwZWQgdmFsdWUgYmluZGluZ1xufTtcbmtvLmV4cHJlc3Npb25SZXdyaXRpbmcudHdvV2F5QmluZGluZ3NbJ3ZhbHVlJ10gPSB0cnVlO1xua28uYmluZGluZ0hhbmRsZXJzWyd2aXNpYmxlJ10gPSB7XG4gICAgJ3VwZGF0ZSc6IGZ1bmN0aW9uIChlbGVtZW50LCB2YWx1ZUFjY2Vzc29yKSB7XG4gICAgICAgIHZhciB2YWx1ZSA9IGtvLnV0aWxzLnVud3JhcE9ic2VydmFibGUodmFsdWVBY2Nlc3NvcigpKTtcbiAgICAgICAgdmFyIGlzQ3VycmVudGx5VmlzaWJsZSA9ICEoZWxlbWVudC5zdHlsZS5kaXNwbGF5ID09IFwibm9uZVwiKTtcbiAgICAgICAgaWYgKHZhbHVlICYmICFpc0N1cnJlbnRseVZpc2libGUpXG4gICAgICAgICAgICBlbGVtZW50LnN0eWxlLmRpc3BsYXkgPSBcIlwiO1xuICAgICAgICBlbHNlIGlmICgoIXZhbHVlKSAmJiBpc0N1cnJlbnRseVZpc2libGUpXG4gICAgICAgICAgICBlbGVtZW50LnN0eWxlLmRpc3BsYXkgPSBcIm5vbmVcIjtcbiAgICB9XG59O1xuLy8gJ2NsaWNrJyBpcyBqdXN0IGEgc2hvcnRoYW5kIGZvciB0aGUgdXN1YWwgZnVsbC1sZW5ndGggZXZlbnQ6e2NsaWNrOmhhbmRsZXJ9XG5tYWtlRXZlbnRIYW5kbGVyU2hvcnRjdXQoJ2NsaWNrJyk7XG4vLyBJZiB5b3Ugd2FudCB0byBtYWtlIGEgY3VzdG9tIHRlbXBsYXRlIGVuZ2luZSxcbi8vXG4vLyBbMV0gSW5oZXJpdCBmcm9tIHRoaXMgY2xhc3MgKGxpa2Uga28ubmF0aXZlVGVtcGxhdGVFbmdpbmUgZG9lcylcbi8vIFsyXSBPdmVycmlkZSAncmVuZGVyVGVtcGxhdGVTb3VyY2UnLCBzdXBwbHlpbmcgYSBmdW5jdGlvbiB3aXRoIHRoaXMgc2lnbmF0dXJlOlxuLy9cbi8vICAgICAgICBmdW5jdGlvbiAodGVtcGxhdGVTb3VyY2UsIGJpbmRpbmdDb250ZXh0LCBvcHRpb25zKSB7XG4vLyAgICAgICAgICAgIC8vIC0gdGVtcGxhdGVTb3VyY2UudGV4dCgpIGlzIHRoZSB0ZXh0IG9mIHRoZSB0ZW1wbGF0ZSB5b3Ugc2hvdWxkIHJlbmRlclxuLy8gICAgICAgICAgICAvLyAtIGJpbmRpbmdDb250ZXh0LiRkYXRhIGlzIHRoZSBkYXRhIHlvdSBzaG91bGQgcGFzcyBpbnRvIHRoZSB0ZW1wbGF0ZVxuLy8gICAgICAgICAgICAvLyAgIC0geW91IG1pZ2h0IGFsc28gd2FudCB0byBtYWtlIGJpbmRpbmdDb250ZXh0LiRwYXJlbnQsIGJpbmRpbmdDb250ZXh0LiRwYXJlbnRzLFxuLy8gICAgICAgICAgICAvLyAgICAgYW5kIGJpbmRpbmdDb250ZXh0LiRyb290IGF2YWlsYWJsZSBpbiB0aGUgdGVtcGxhdGUgdG9vXG4vLyAgICAgICAgICAgIC8vIC0gb3B0aW9ucyBnaXZlcyB5b3UgYWNjZXNzIHRvIGFueSBvdGhlciBwcm9wZXJ0aWVzIHNldCBvbiBcImRhdGEtYmluZDogeyB0ZW1wbGF0ZTogb3B0aW9ucyB9XCJcbi8vICAgICAgICAgICAgLy8gLSB0ZW1wbGF0ZURvY3VtZW50IGlzIHRoZSBkb2N1bWVudCBvYmplY3Qgb2YgdGhlIHRlbXBsYXRlXG4vLyAgICAgICAgICAgIC8vXG4vLyAgICAgICAgICAgIC8vIFJldHVybiB2YWx1ZTogYW4gYXJyYXkgb2YgRE9NIG5vZGVzXG4vLyAgICAgICAgfVxuLy9cbi8vIFszXSBPdmVycmlkZSAnY3JlYXRlSmF2YVNjcmlwdEV2YWx1YXRvckJsb2NrJywgc3VwcGx5aW5nIGEgZnVuY3Rpb24gd2l0aCB0aGlzIHNpZ25hdHVyZTpcbi8vXG4vLyAgICAgICAgZnVuY3Rpb24gKHNjcmlwdCkge1xuLy8gICAgICAgICAgICAvLyBSZXR1cm4gdmFsdWU6IFdoYXRldmVyIHN5bnRheCBtZWFucyBcIkV2YWx1YXRlIHRoZSBKYXZhU2NyaXB0IHN0YXRlbWVudCAnc2NyaXB0JyBhbmQgb3V0cHV0IHRoZSByZXN1bHRcIlxuLy8gICAgICAgICAgICAvLyAgICAgICAgICAgICAgIEZvciBleGFtcGxlLCB0aGUganF1ZXJ5LnRtcGwgdGVtcGxhdGUgZW5naW5lIGNvbnZlcnRzICdzb21lU2NyaXB0JyB0byAnJHsgc29tZVNjcmlwdCB9J1xuLy8gICAgICAgIH1cbi8vXG4vLyAgICAgVGhpcyBpcyBvbmx5IG5lY2Vzc2FyeSBpZiB5b3Ugd2FudCB0byBhbGxvdyBkYXRhLWJpbmQgYXR0cmlidXRlcyB0byByZWZlcmVuY2UgYXJiaXRyYXJ5IHRlbXBsYXRlIHZhcmlhYmxlcy5cbi8vICAgICBJZiB5b3UgZG9uJ3Qgd2FudCB0byBhbGxvdyB0aGF0LCB5b3UgY2FuIHNldCB0aGUgcHJvcGVydHkgJ2FsbG93VGVtcGxhdGVSZXdyaXRpbmcnIHRvIGZhbHNlIChsaWtlIGtvLm5hdGl2ZVRlbXBsYXRlRW5naW5lIGRvZXMpXG4vLyAgICAgYW5kIHRoZW4geW91IGRvbid0IG5lZWQgdG8gb3ZlcnJpZGUgJ2NyZWF0ZUphdmFTY3JpcHRFdmFsdWF0b3JCbG9jaycuXG5cbmtvLnRlbXBsYXRlRW5naW5lID0gZnVuY3Rpb24gKCkgeyB9O1xuXG5rby50ZW1wbGF0ZUVuZ2luZS5wcm90b3R5cGVbJ3JlbmRlclRlbXBsYXRlU291cmNlJ10gPSBmdW5jdGlvbiAodGVtcGxhdGVTb3VyY2UsIGJpbmRpbmdDb250ZXh0LCBvcHRpb25zLCB0ZW1wbGF0ZURvY3VtZW50KSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKFwiT3ZlcnJpZGUgcmVuZGVyVGVtcGxhdGVTb3VyY2VcIik7XG59O1xuXG5rby50ZW1wbGF0ZUVuZ2luZS5wcm90b3R5cGVbJ2NyZWF0ZUphdmFTY3JpcHRFdmFsdWF0b3JCbG9jayddID0gZnVuY3Rpb24gKHNjcmlwdCkge1xuICAgIHRocm93IG5ldyBFcnJvcihcIk92ZXJyaWRlIGNyZWF0ZUphdmFTY3JpcHRFdmFsdWF0b3JCbG9ja1wiKTtcbn07XG5cbmtvLnRlbXBsYXRlRW5naW5lLnByb3RvdHlwZVsnbWFrZVRlbXBsYXRlU291cmNlJ10gPSBmdW5jdGlvbih0ZW1wbGF0ZSwgdGVtcGxhdGVEb2N1bWVudCkge1xuICAgIC8vIE5hbWVkIHRlbXBsYXRlXG4gICAgaWYgKHR5cGVvZiB0ZW1wbGF0ZSA9PSBcInN0cmluZ1wiKSB7XG4gICAgICAgIHRlbXBsYXRlRG9jdW1lbnQgPSB0ZW1wbGF0ZURvY3VtZW50IHx8IGRvY3VtZW50O1xuICAgICAgICB2YXIgZWxlbSA9IHRlbXBsYXRlRG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQodGVtcGxhdGUpO1xuICAgICAgICBpZiAoIWVsZW0pXG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJDYW5ub3QgZmluZCB0ZW1wbGF0ZSB3aXRoIElEIFwiICsgdGVtcGxhdGUpO1xuICAgICAgICByZXR1cm4gbmV3IGtvLnRlbXBsYXRlU291cmNlcy5kb21FbGVtZW50KGVsZW0pO1xuICAgIH0gZWxzZSBpZiAoKHRlbXBsYXRlLm5vZGVUeXBlID09IDEpIHx8ICh0ZW1wbGF0ZS5ub2RlVHlwZSA9PSA4KSkge1xuICAgICAgICAvLyBBbm9ueW1vdXMgdGVtcGxhdGVcbiAgICAgICAgcmV0dXJuIG5ldyBrby50ZW1wbGF0ZVNvdXJjZXMuYW5vbnltb3VzVGVtcGxhdGUodGVtcGxhdGUpO1xuICAgIH0gZWxzZVxuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJVbmtub3duIHRlbXBsYXRlIHR5cGU6IFwiICsgdGVtcGxhdGUpO1xufTtcblxua28udGVtcGxhdGVFbmdpbmUucHJvdG90eXBlWydyZW5kZXJUZW1wbGF0ZSddID0gZnVuY3Rpb24gKHRlbXBsYXRlLCBiaW5kaW5nQ29udGV4dCwgb3B0aW9ucywgdGVtcGxhdGVEb2N1bWVudCkge1xuICAgIHZhciB0ZW1wbGF0ZVNvdXJjZSA9IHRoaXNbJ21ha2VUZW1wbGF0ZVNvdXJjZSddKHRlbXBsYXRlLCB0ZW1wbGF0ZURvY3VtZW50KTtcbiAgICByZXR1cm4gdGhpc1sncmVuZGVyVGVtcGxhdGVTb3VyY2UnXSh0ZW1wbGF0ZVNvdXJjZSwgYmluZGluZ0NvbnRleHQsIG9wdGlvbnMsIHRlbXBsYXRlRG9jdW1lbnQpO1xufTtcblxua28udGVtcGxhdGVFbmdpbmUucHJvdG90eXBlWydpc1RlbXBsYXRlUmV3cml0dGVuJ10gPSBmdW5jdGlvbiAodGVtcGxhdGUsIHRlbXBsYXRlRG9jdW1lbnQpIHtcbiAgICAvLyBTa2lwIHJld3JpdGluZyBpZiByZXF1ZXN0ZWRcbiAgICBpZiAodGhpc1snYWxsb3dUZW1wbGF0ZVJld3JpdGluZyddID09PSBmYWxzZSlcbiAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgcmV0dXJuIHRoaXNbJ21ha2VUZW1wbGF0ZVNvdXJjZSddKHRlbXBsYXRlLCB0ZW1wbGF0ZURvY3VtZW50KVsnZGF0YSddKFwiaXNSZXdyaXR0ZW5cIik7XG59O1xuXG5rby50ZW1wbGF0ZUVuZ2luZS5wcm90b3R5cGVbJ3Jld3JpdGVUZW1wbGF0ZSddID0gZnVuY3Rpb24gKHRlbXBsYXRlLCByZXdyaXRlckNhbGxiYWNrLCB0ZW1wbGF0ZURvY3VtZW50KSB7XG4gICAgdmFyIHRlbXBsYXRlU291cmNlID0gdGhpc1snbWFrZVRlbXBsYXRlU291cmNlJ10odGVtcGxhdGUsIHRlbXBsYXRlRG9jdW1lbnQpO1xuICAgIHZhciByZXdyaXR0ZW4gPSByZXdyaXRlckNhbGxiYWNrKHRlbXBsYXRlU291cmNlWyd0ZXh0J10oKSk7XG4gICAgdGVtcGxhdGVTb3VyY2VbJ3RleHQnXShyZXdyaXR0ZW4pO1xuICAgIHRlbXBsYXRlU291cmNlWydkYXRhJ10oXCJpc1Jld3JpdHRlblwiLCB0cnVlKTtcbn07XG5cbmtvLmV4cG9ydFN5bWJvbCgndGVtcGxhdGVFbmdpbmUnLCBrby50ZW1wbGF0ZUVuZ2luZSk7XG5cbmtvLnRlbXBsYXRlUmV3cml0aW5nID0gKGZ1bmN0aW9uICgpIHtcbiAgICB2YXIgbWVtb2l6ZURhdGFCaW5kaW5nQXR0cmlidXRlU3ludGF4UmVnZXggPSAvKDwoW2Etel0rXFxkKikoPzpcXHMrKD8hZGF0YS1iaW5kXFxzKj1cXHMqKVthLXowLTlcXC1dKyg/Oj0oPzpcXFwiW15cXFwiXSpcXFwifFxcJ1teXFwnXSpcXCd8W14+XSopKT8pKlxccyspZGF0YS1iaW5kXFxzKj1cXHMqKFtcIiddKShbXFxzXFxTXSo/KVxcMy9naTtcbiAgICB2YXIgbWVtb2l6ZVZpcnR1YWxDb250YWluZXJCaW5kaW5nU3ludGF4UmVnZXggPSAvPCEtLVxccyprb1xcYlxccyooW1xcc1xcU10qPylcXHMqLS0+L2c7XG5cbiAgICBmdW5jdGlvbiB2YWxpZGF0ZURhdGFCaW5kVmFsdWVzRm9yUmV3cml0aW5nKGtleVZhbHVlQXJyYXkpIHtcbiAgICAgICAgdmFyIGFsbFZhbGlkYXRvcnMgPSBrby5leHByZXNzaW9uUmV3cml0aW5nLmJpbmRpbmdSZXdyaXRlVmFsaWRhdG9ycztcbiAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBrZXlWYWx1ZUFycmF5Lmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICB2YXIga2V5ID0ga2V5VmFsdWVBcnJheVtpXVsna2V5J107XG4gICAgICAgICAgICBpZiAoYWxsVmFsaWRhdG9ycy5oYXNPd25Qcm9wZXJ0eShrZXkpKSB7XG4gICAgICAgICAgICAgICAgdmFyIHZhbGlkYXRvciA9IGFsbFZhbGlkYXRvcnNba2V5XTtcblxuICAgICAgICAgICAgICAgIGlmICh0eXBlb2YgdmFsaWRhdG9yID09PSBcImZ1bmN0aW9uXCIpIHtcbiAgICAgICAgICAgICAgICAgICAgdmFyIHBvc3NpYmxlRXJyb3JNZXNzYWdlID0gdmFsaWRhdG9yKGtleVZhbHVlQXJyYXlbaV1bJ3ZhbHVlJ10pO1xuICAgICAgICAgICAgICAgICAgICBpZiAocG9zc2libGVFcnJvck1lc3NhZ2UpXG4gICAgICAgICAgICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IocG9zc2libGVFcnJvck1lc3NhZ2UpO1xuICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAoIXZhbGlkYXRvcikge1xuICAgICAgICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJUaGlzIHRlbXBsYXRlIGVuZ2luZSBkb2VzIG5vdCBzdXBwb3J0IHRoZSAnXCIgKyBrZXkgKyBcIicgYmluZGluZyB3aXRoaW4gaXRzIHRlbXBsYXRlc1wiKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBmdW5jdGlvbiBjb25zdHJ1Y3RNZW1vaXplZFRhZ1JlcGxhY2VtZW50KGRhdGFCaW5kQXR0cmlidXRlVmFsdWUsIHRhZ1RvUmV0YWluLCBub2RlTmFtZSwgdGVtcGxhdGVFbmdpbmUpIHtcbiAgICAgICAgdmFyIGRhdGFCaW5kS2V5VmFsdWVBcnJheSA9IGtvLmV4cHJlc3Npb25SZXdyaXRpbmcucGFyc2VPYmplY3RMaXRlcmFsKGRhdGFCaW5kQXR0cmlidXRlVmFsdWUpO1xuICAgICAgICB2YWxpZGF0ZURhdGFCaW5kVmFsdWVzRm9yUmV3cml0aW5nKGRhdGFCaW5kS2V5VmFsdWVBcnJheSk7XG4gICAgICAgIHZhciByZXdyaXR0ZW5EYXRhQmluZEF0dHJpYnV0ZVZhbHVlID0ga28uZXhwcmVzc2lvblJld3JpdGluZy5wcmVQcm9jZXNzQmluZGluZ3MoZGF0YUJpbmRLZXlWYWx1ZUFycmF5LCB7J3ZhbHVlQWNjZXNzb3JzJzp0cnVlfSk7XG5cbiAgICAgICAgLy8gRm9yIG5vIG9idmlvdXMgcmVhc29uLCBPcGVyYSBmYWlscyB0byBldmFsdWF0ZSByZXdyaXR0ZW5EYXRhQmluZEF0dHJpYnV0ZVZhbHVlIHVubGVzcyBpdCdzIHdyYXBwZWQgaW4gYW4gYWRkaXRpb25hbFxuICAgICAgICAvLyBhbm9ueW1vdXMgZnVuY3Rpb24sIGV2ZW4gdGhvdWdoIE9wZXJhJ3MgYnVpbHQtaW4gZGVidWdnZXIgY2FuIGV2YWx1YXRlIGl0IGFueXdheS4gTm8gb3RoZXIgYnJvd3NlciByZXF1aXJlcyB0aGlzXG4gICAgICAgIC8vIGV4dHJhIGluZGlyZWN0aW9uLlxuICAgICAgICB2YXIgYXBwbHlCaW5kaW5nc1RvTmV4dFNpYmxpbmdTY3JpcHQgPVxuICAgICAgICAgICAgXCJrby5fX3RyX2FtYnRucyhmdW5jdGlvbigkY29udGV4dCwkZWxlbWVudCl7cmV0dXJuKGZ1bmN0aW9uKCl7cmV0dXJueyBcIiArIHJld3JpdHRlbkRhdGFCaW5kQXR0cmlidXRlVmFsdWUgKyBcIiB9IH0pKCl9LCdcIiArIG5vZGVOYW1lLnRvTG93ZXJDYXNlKCkgKyBcIicpXCI7XG4gICAgICAgIHJldHVybiB0ZW1wbGF0ZUVuZ2luZVsnY3JlYXRlSmF2YVNjcmlwdEV2YWx1YXRvckJsb2NrJ10oYXBwbHlCaW5kaW5nc1RvTmV4dFNpYmxpbmdTY3JpcHQpICsgdGFnVG9SZXRhaW47XG4gICAgfVxuXG4gICAgcmV0dXJuIHtcbiAgICAgICAgZW5zdXJlVGVtcGxhdGVJc1Jld3JpdHRlbjogZnVuY3Rpb24gKHRlbXBsYXRlLCB0ZW1wbGF0ZUVuZ2luZSwgdGVtcGxhdGVEb2N1bWVudCkge1xuICAgICAgICAgICAgaWYgKCF0ZW1wbGF0ZUVuZ2luZVsnaXNUZW1wbGF0ZVJld3JpdHRlbiddKHRlbXBsYXRlLCB0ZW1wbGF0ZURvY3VtZW50KSlcbiAgICAgICAgICAgICAgICB0ZW1wbGF0ZUVuZ2luZVsncmV3cml0ZVRlbXBsYXRlJ10odGVtcGxhdGUsIGZ1bmN0aW9uIChodG1sU3RyaW5nKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBrby50ZW1wbGF0ZVJld3JpdGluZy5tZW1vaXplQmluZGluZ0F0dHJpYnV0ZVN5bnRheChodG1sU3RyaW5nLCB0ZW1wbGF0ZUVuZ2luZSk7XG4gICAgICAgICAgICAgICAgfSwgdGVtcGxhdGVEb2N1bWVudCk7XG4gICAgICAgIH0sXG5cbiAgICAgICAgbWVtb2l6ZUJpbmRpbmdBdHRyaWJ1dGVTeW50YXg6IGZ1bmN0aW9uIChodG1sU3RyaW5nLCB0ZW1wbGF0ZUVuZ2luZSkge1xuICAgICAgICAgICAgcmV0dXJuIGh0bWxTdHJpbmcucmVwbGFjZShtZW1vaXplRGF0YUJpbmRpbmdBdHRyaWJ1dGVTeW50YXhSZWdleCwgZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgIHJldHVybiBjb25zdHJ1Y3RNZW1vaXplZFRhZ1JlcGxhY2VtZW50KC8qIGRhdGFCaW5kQXR0cmlidXRlVmFsdWU6ICovIGFyZ3VtZW50c1s0XSwgLyogdGFnVG9SZXRhaW46ICovIGFyZ3VtZW50c1sxXSwgLyogbm9kZU5hbWU6ICovIGFyZ3VtZW50c1syXSwgdGVtcGxhdGVFbmdpbmUpO1xuICAgICAgICAgICAgfSkucmVwbGFjZShtZW1vaXplVmlydHVhbENvbnRhaW5lckJpbmRpbmdTeW50YXhSZWdleCwgZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGNvbnN0cnVjdE1lbW9pemVkVGFnUmVwbGFjZW1lbnQoLyogZGF0YUJpbmRBdHRyaWJ1dGVWYWx1ZTogKi8gYXJndW1lbnRzWzFdLCAvKiB0YWdUb1JldGFpbjogKi8gXCI8IS0tIGtvIC0tPlwiLCAvKiBub2RlTmFtZTogKi8gXCIjY29tbWVudFwiLCB0ZW1wbGF0ZUVuZ2luZSk7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfSxcblxuICAgICAgICBhcHBseU1lbW9pemVkQmluZGluZ3NUb05leHRTaWJsaW5nOiBmdW5jdGlvbiAoYmluZGluZ3MsIG5vZGVOYW1lKSB7XG4gICAgICAgICAgICByZXR1cm4ga28ubWVtb2l6YXRpb24ubWVtb2l6ZShmdW5jdGlvbiAoZG9tTm9kZSwgYmluZGluZ0NvbnRleHQpIHtcbiAgICAgICAgICAgICAgICB2YXIgbm9kZVRvQmluZCA9IGRvbU5vZGUubmV4dFNpYmxpbmc7XG4gICAgICAgICAgICAgICAgaWYgKG5vZGVUb0JpbmQgJiYgbm9kZVRvQmluZC5ub2RlTmFtZS50b0xvd2VyQ2FzZSgpID09PSBub2RlTmFtZSkge1xuICAgICAgICAgICAgICAgICAgICBrby5hcHBseUJpbmRpbmdBY2Nlc3NvcnNUb05vZGUobm9kZVRvQmluZCwgYmluZGluZ3MsIGJpbmRpbmdDb250ZXh0KTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgIH1cbn0pKCk7XG5cblxuLy8gRXhwb3J0ZWQgb25seSBiZWNhdXNlIGl0IGhhcyB0byBiZSByZWZlcmVuY2VkIGJ5IHN0cmluZyBsb29rdXAgZnJvbSB3aXRoaW4gcmV3cml0dGVuIHRlbXBsYXRlXG5rby5leHBvcnRTeW1ib2woJ19fdHJfYW1idG5zJywga28udGVtcGxhdGVSZXdyaXRpbmcuYXBwbHlNZW1vaXplZEJpbmRpbmdzVG9OZXh0U2libGluZyk7XG4oZnVuY3Rpb24oKSB7XG4gICAgLy8gQSB0ZW1wbGF0ZSBzb3VyY2UgcmVwcmVzZW50cyBhIHJlYWQvd3JpdGUgd2F5IG9mIGFjY2Vzc2luZyBhIHRlbXBsYXRlLiBUaGlzIGlzIHRvIGVsaW1pbmF0ZSB0aGUgbmVlZCBmb3IgdGVtcGxhdGUgbG9hZGluZy9zYXZpbmdcbiAgICAvLyBsb2dpYyB0byBiZSBkdXBsaWNhdGVkIGluIGV2ZXJ5IHRlbXBsYXRlIGVuZ2luZSAoYW5kIG1lYW5zIHRoZXkgY2FuIGFsbCB3b3JrIHdpdGggYW5vbnltb3VzIHRlbXBsYXRlcywgZXRjLilcbiAgICAvL1xuICAgIC8vIFR3byBhcmUgcHJvdmlkZWQgYnkgZGVmYXVsdDpcbiAgICAvLyAgMS4ga28udGVtcGxhdGVTb3VyY2VzLmRvbUVsZW1lbnQgICAgICAgLSByZWFkcy93cml0ZXMgdGhlIHRleHQgY29udGVudCBvZiBhbiBhcmJpdHJhcnkgRE9NIGVsZW1lbnRcbiAgICAvLyAgMi4ga28udGVtcGxhdGVTb3VyY2VzLmFub255bW91c0VsZW1lbnQgLSB1c2VzIGtvLnV0aWxzLmRvbURhdGEgdG8gcmVhZC93cml0ZSB0ZXh0ICphc3NvY2lhdGVkKiB3aXRoIHRoZSBET00gZWxlbWVudCwgYnV0XG4gICAgLy8gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgd2l0aG91dCByZWFkaW5nL3dyaXRpbmcgdGhlIGFjdHVhbCBlbGVtZW50IHRleHQgY29udGVudCwgc2luY2UgaXQgd2lsbCBiZSBvdmVyd3JpdHRlblxuICAgIC8vICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHdpdGggdGhlIHJlbmRlcmVkIHRlbXBsYXRlIG91dHB1dC5cbiAgICAvLyBZb3UgY2FuIGltcGxlbWVudCB5b3VyIG93biB0ZW1wbGF0ZSBzb3VyY2UgaWYgeW91IHdhbnQgdG8gZmV0Y2gvc3RvcmUgdGVtcGxhdGVzIHNvbWV3aGVyZSBvdGhlciB0aGFuIGluIERPTSBlbGVtZW50cy5cbiAgICAvLyBUZW1wbGF0ZSBzb3VyY2VzIG5lZWQgdG8gaGF2ZSB0aGUgZm9sbG93aW5nIGZ1bmN0aW9uczpcbiAgICAvLyAgIHRleHQoKSBcdFx0XHQtIHJldHVybnMgdGhlIHRlbXBsYXRlIHRleHQgZnJvbSB5b3VyIHN0b3JhZ2UgbG9jYXRpb25cbiAgICAvLyAgIHRleHQodmFsdWUpXHRcdC0gd3JpdGVzIHRoZSBzdXBwbGllZCB0ZW1wbGF0ZSB0ZXh0IHRvIHlvdXIgc3RvcmFnZSBsb2NhdGlvblxuICAgIC8vICAgZGF0YShrZXkpXHRcdFx0LSByZWFkcyB2YWx1ZXMgc3RvcmVkIHVzaW5nIGRhdGEoa2V5LCB2YWx1ZSkgLSBzZWUgYmVsb3dcbiAgICAvLyAgIGRhdGEoa2V5LCB2YWx1ZSlcdC0gYXNzb2NpYXRlcyBcInZhbHVlXCIgd2l0aCB0aGlzIHRlbXBsYXRlIGFuZCB0aGUga2V5IFwia2V5XCIuIElzIHVzZWQgdG8gc3RvcmUgaW5mb3JtYXRpb24gbGlrZSBcImlzUmV3cml0dGVuXCIuXG4gICAgLy9cbiAgICAvLyBPcHRpb25hbGx5LCB0ZW1wbGF0ZSBzb3VyY2VzIGNhbiBhbHNvIGhhdmUgdGhlIGZvbGxvd2luZyBmdW5jdGlvbnM6XG4gICAgLy8gICBub2RlcygpICAgICAgICAgICAgLSByZXR1cm5zIGEgRE9NIGVsZW1lbnQgY29udGFpbmluZyB0aGUgbm9kZXMgb2YgdGhpcyB0ZW1wbGF0ZSwgd2hlcmUgYXZhaWxhYmxlXG4gICAgLy8gICBub2Rlcyh2YWx1ZSkgICAgICAgLSB3cml0ZXMgdGhlIGdpdmVuIERPTSBlbGVtZW50IHRvIHlvdXIgc3RvcmFnZSBsb2NhdGlvblxuICAgIC8vIElmIGEgRE9NIGVsZW1lbnQgaXMgYXZhaWxhYmxlIGZvciBhIGdpdmVuIHRlbXBsYXRlIHNvdXJjZSwgdGVtcGxhdGUgZW5naW5lcyBhcmUgZW5jb3VyYWdlZCB0byB1c2UgaXQgaW4gcHJlZmVyZW5jZSBvdmVyIHRleHQoKVxuICAgIC8vIGZvciBpbXByb3ZlZCBzcGVlZC4gSG93ZXZlciwgYWxsIHRlbXBsYXRlU291cmNlcyBtdXN0IHN1cHBseSB0ZXh0KCkgZXZlbiBpZiB0aGV5IGRvbid0IHN1cHBseSBub2RlcygpLlxuICAgIC8vXG4gICAgLy8gT25jZSB5b3UndmUgaW1wbGVtZW50ZWQgYSB0ZW1wbGF0ZVNvdXJjZSwgbWFrZSB5b3VyIHRlbXBsYXRlIGVuZ2luZSB1c2UgaXQgYnkgc3ViY2xhc3Npbmcgd2hhdGV2ZXIgdGVtcGxhdGUgZW5naW5lIHlvdSB3ZXJlXG4gICAgLy8gdXNpbmcgYW5kIG92ZXJyaWRpbmcgXCJtYWtlVGVtcGxhdGVTb3VyY2VcIiB0byByZXR1cm4gYW4gaW5zdGFuY2Ugb2YgeW91ciBjdXN0b20gdGVtcGxhdGUgc291cmNlLlxuXG4gICAga28udGVtcGxhdGVTb3VyY2VzID0ge307XG5cbiAgICAvLyAtLS0tIGtvLnRlbXBsYXRlU291cmNlcy5kb21FbGVtZW50IC0tLS0tXG5cbiAgICAvLyB0ZW1wbGF0ZSB0eXBlc1xuICAgIHZhciB0ZW1wbGF0ZVNjcmlwdCA9IDEsXG4gICAgICAgIHRlbXBsYXRlVGV4dEFyZWEgPSAyLFxuICAgICAgICB0ZW1wbGF0ZVRlbXBsYXRlID0gMyxcbiAgICAgICAgdGVtcGxhdGVFbGVtZW50ID0gNDtcblxuICAgIGtvLnRlbXBsYXRlU291cmNlcy5kb21FbGVtZW50ID0gZnVuY3Rpb24oZWxlbWVudCkge1xuICAgICAgICB0aGlzLmRvbUVsZW1lbnQgPSBlbGVtZW50O1xuXG4gICAgICAgIGlmIChlbGVtZW50KSB7XG4gICAgICAgICAgICB2YXIgdGFnTmFtZUxvd2VyID0ga28udXRpbHMudGFnTmFtZUxvd2VyKGVsZW1lbnQpO1xuICAgICAgICAgICAgdGhpcy50ZW1wbGF0ZVR5cGUgPVxuICAgICAgICAgICAgICAgIHRhZ05hbWVMb3dlciA9PT0gXCJzY3JpcHRcIiA/IHRlbXBsYXRlU2NyaXB0IDpcbiAgICAgICAgICAgICAgICB0YWdOYW1lTG93ZXIgPT09IFwidGV4dGFyZWFcIiA/IHRlbXBsYXRlVGV4dEFyZWEgOlxuICAgICAgICAgICAgICAgICAgICAvLyBGb3IgYnJvd3NlcnMgd2l0aCBwcm9wZXIgPHRlbXBsYXRlPiBlbGVtZW50IHN1cHBvcnQsIHdoZXJlIHRoZSAuY29udGVudCBwcm9wZXJ0eSBnaXZlcyBhIGRvY3VtZW50IGZyYWdtZW50XG4gICAgICAgICAgICAgICAgdGFnTmFtZUxvd2VyID09IFwidGVtcGxhdGVcIiAmJiBlbGVtZW50LmNvbnRlbnQgJiYgZWxlbWVudC5jb250ZW50Lm5vZGVUeXBlID09PSAxMSA/IHRlbXBsYXRlVGVtcGxhdGUgOlxuICAgICAgICAgICAgICAgIHRlbXBsYXRlRWxlbWVudDtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIGtvLnRlbXBsYXRlU291cmNlcy5kb21FbGVtZW50LnByb3RvdHlwZVsndGV4dCddID0gZnVuY3Rpb24oLyogdmFsdWVUb1dyaXRlICovKSB7XG4gICAgICAgIHZhciBlbGVtQ29udGVudHNQcm9wZXJ0eSA9IHRoaXMudGVtcGxhdGVUeXBlID09PSB0ZW1wbGF0ZVNjcmlwdCA/IFwidGV4dFwiXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA6IHRoaXMudGVtcGxhdGVUeXBlID09PSB0ZW1wbGF0ZVRleHRBcmVhID8gXCJ2YWx1ZVwiXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA6IFwiaW5uZXJIVE1MXCI7XG5cbiAgICAgICAgaWYgKGFyZ3VtZW50cy5sZW5ndGggPT0gMCkge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMuZG9tRWxlbWVudFtlbGVtQ29udGVudHNQcm9wZXJ0eV07XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICB2YXIgdmFsdWVUb1dyaXRlID0gYXJndW1lbnRzWzBdO1xuICAgICAgICAgICAgaWYgKGVsZW1Db250ZW50c1Byb3BlcnR5ID09PSBcImlubmVySFRNTFwiKVxuICAgICAgICAgICAgICAgIGtvLnV0aWxzLnNldEh0bWwodGhpcy5kb21FbGVtZW50LCB2YWx1ZVRvV3JpdGUpO1xuICAgICAgICAgICAgZWxzZVxuICAgICAgICAgICAgICAgIHRoaXMuZG9tRWxlbWVudFtlbGVtQ29udGVudHNQcm9wZXJ0eV0gPSB2YWx1ZVRvV3JpdGU7XG4gICAgICAgIH1cbiAgICB9O1xuXG4gICAgdmFyIGRhdGFEb21EYXRhUHJlZml4ID0ga28udXRpbHMuZG9tRGF0YS5uZXh0S2V5KCkgKyBcIl9cIjtcbiAgICBrby50ZW1wbGF0ZVNvdXJjZXMuZG9tRWxlbWVudC5wcm90b3R5cGVbJ2RhdGEnXSA9IGZ1bmN0aW9uKGtleSAvKiwgdmFsdWVUb1dyaXRlICovKSB7XG4gICAgICAgIGlmIChhcmd1bWVudHMubGVuZ3RoID09PSAxKSB7XG4gICAgICAgICAgICByZXR1cm4ga28udXRpbHMuZG9tRGF0YS5nZXQodGhpcy5kb21FbGVtZW50LCBkYXRhRG9tRGF0YVByZWZpeCArIGtleSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBrby51dGlscy5kb21EYXRhLnNldCh0aGlzLmRvbUVsZW1lbnQsIGRhdGFEb21EYXRhUHJlZml4ICsga2V5LCBhcmd1bWVudHNbMV0pO1xuICAgICAgICB9XG4gICAgfTtcblxuICAgIHZhciB0ZW1wbGF0ZXNEb21EYXRhS2V5ID0ga28udXRpbHMuZG9tRGF0YS5uZXh0S2V5KCk7XG4gICAgZnVuY3Rpb24gZ2V0VGVtcGxhdGVEb21EYXRhKGVsZW1lbnQpIHtcbiAgICAgICAgcmV0dXJuIGtvLnV0aWxzLmRvbURhdGEuZ2V0KGVsZW1lbnQsIHRlbXBsYXRlc0RvbURhdGFLZXkpIHx8IHt9O1xuICAgIH1cbiAgICBmdW5jdGlvbiBzZXRUZW1wbGF0ZURvbURhdGEoZWxlbWVudCwgZGF0YSkge1xuICAgICAgICBrby51dGlscy5kb21EYXRhLnNldChlbGVtZW50LCB0ZW1wbGF0ZXNEb21EYXRhS2V5LCBkYXRhKTtcbiAgICB9XG5cbiAgICBrby50ZW1wbGF0ZVNvdXJjZXMuZG9tRWxlbWVudC5wcm90b3R5cGVbJ25vZGVzJ10gPSBmdW5jdGlvbigvKiB2YWx1ZVRvV3JpdGUgKi8pIHtcbiAgICAgICAgdmFyIGVsZW1lbnQgPSB0aGlzLmRvbUVsZW1lbnQ7XG4gICAgICAgIGlmIChhcmd1bWVudHMubGVuZ3RoID09IDApIHtcbiAgICAgICAgICAgIHZhciB0ZW1wbGF0ZURhdGEgPSBnZXRUZW1wbGF0ZURvbURhdGEoZWxlbWVudCksXG4gICAgICAgICAgICAgICAgY29udGFpbmVyRGF0YSA9IHRlbXBsYXRlRGF0YS5jb250YWluZXJEYXRhO1xuICAgICAgICAgICAgcmV0dXJuIGNvbnRhaW5lckRhdGEgfHwgKFxuICAgICAgICAgICAgICAgIHRoaXMudGVtcGxhdGVUeXBlID09PSB0ZW1wbGF0ZVRlbXBsYXRlID8gZWxlbWVudC5jb250ZW50IDpcbiAgICAgICAgICAgICAgICB0aGlzLnRlbXBsYXRlVHlwZSA9PT0gdGVtcGxhdGVFbGVtZW50ID8gZWxlbWVudCA6XG4gICAgICAgICAgICAgICAgdW5kZWZpbmVkKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHZhciB2YWx1ZVRvV3JpdGUgPSBhcmd1bWVudHNbMF07XG4gICAgICAgICAgICBzZXRUZW1wbGF0ZURvbURhdGEoZWxlbWVudCwge2NvbnRhaW5lckRhdGE6IHZhbHVlVG9Xcml0ZX0pO1xuICAgICAgICB9XG4gICAgfTtcblxuICAgIC8vIC0tLS0ga28udGVtcGxhdGVTb3VyY2VzLmFub255bW91c1RlbXBsYXRlIC0tLS0tXG4gICAgLy8gQW5vbnltb3VzIHRlbXBsYXRlcyBhcmUgbm9ybWFsbHkgc2F2ZWQvcmV0cmlldmVkIGFzIERPTSBub2RlcyB0aHJvdWdoIFwibm9kZXNcIi5cbiAgICAvLyBGb3IgY29tcGF0aWJpbGl0eSwgeW91IGNhbiBhbHNvIHJlYWQgXCJ0ZXh0XCI7IGl0IHdpbGwgYmUgc2VyaWFsaXplZCBmcm9tIHRoZSBub2RlcyBvbiBkZW1hbmQuXG4gICAgLy8gV3JpdGluZyB0byBcInRleHRcIiBpcyBzdGlsbCBzdXBwb3J0ZWQsIGJ1dCB0aGVuIHRoZSB0ZW1wbGF0ZSBkYXRhIHdpbGwgbm90IGJlIGF2YWlsYWJsZSBhcyBET00gbm9kZXMuXG5cbiAgICBrby50ZW1wbGF0ZVNvdXJjZXMuYW5vbnltb3VzVGVtcGxhdGUgPSBmdW5jdGlvbihlbGVtZW50KSB7XG4gICAgICAgIHRoaXMuZG9tRWxlbWVudCA9IGVsZW1lbnQ7XG4gICAgfVxuICAgIGtvLnRlbXBsYXRlU291cmNlcy5hbm9ueW1vdXNUZW1wbGF0ZS5wcm90b3R5cGUgPSBuZXcga28udGVtcGxhdGVTb3VyY2VzLmRvbUVsZW1lbnQoKTtcbiAgICBrby50ZW1wbGF0ZVNvdXJjZXMuYW5vbnltb3VzVGVtcGxhdGUucHJvdG90eXBlLmNvbnN0cnVjdG9yID0ga28udGVtcGxhdGVTb3VyY2VzLmFub255bW91c1RlbXBsYXRlO1xuICAgIGtvLnRlbXBsYXRlU291cmNlcy5hbm9ueW1vdXNUZW1wbGF0ZS5wcm90b3R5cGVbJ3RleHQnXSA9IGZ1bmN0aW9uKC8qIHZhbHVlVG9Xcml0ZSAqLykge1xuICAgICAgICBpZiAoYXJndW1lbnRzLmxlbmd0aCA9PSAwKSB7XG4gICAgICAgICAgICB2YXIgdGVtcGxhdGVEYXRhID0gZ2V0VGVtcGxhdGVEb21EYXRhKHRoaXMuZG9tRWxlbWVudCk7XG4gICAgICAgICAgICBpZiAodGVtcGxhdGVEYXRhLnRleHREYXRhID09PSB1bmRlZmluZWQgJiYgdGVtcGxhdGVEYXRhLmNvbnRhaW5lckRhdGEpXG4gICAgICAgICAgICAgICAgdGVtcGxhdGVEYXRhLnRleHREYXRhID0gdGVtcGxhdGVEYXRhLmNvbnRhaW5lckRhdGEuaW5uZXJIVE1MO1xuICAgICAgICAgICAgcmV0dXJuIHRlbXBsYXRlRGF0YS50ZXh0RGF0YTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHZhciB2YWx1ZVRvV3JpdGUgPSBhcmd1bWVudHNbMF07XG4gICAgICAgICAgICBzZXRUZW1wbGF0ZURvbURhdGEodGhpcy5kb21FbGVtZW50LCB7dGV4dERhdGE6IHZhbHVlVG9Xcml0ZX0pO1xuICAgICAgICB9XG4gICAgfTtcblxuICAgIGtvLmV4cG9ydFN5bWJvbCgndGVtcGxhdGVTb3VyY2VzJywga28udGVtcGxhdGVTb3VyY2VzKTtcbiAgICBrby5leHBvcnRTeW1ib2woJ3RlbXBsYXRlU291cmNlcy5kb21FbGVtZW50Jywga28udGVtcGxhdGVTb3VyY2VzLmRvbUVsZW1lbnQpO1xuICAgIGtvLmV4cG9ydFN5bWJvbCgndGVtcGxhdGVTb3VyY2VzLmFub255bW91c1RlbXBsYXRlJywga28udGVtcGxhdGVTb3VyY2VzLmFub255bW91c1RlbXBsYXRlKTtcbn0pKCk7XG4oZnVuY3Rpb24gKCkge1xuICAgIHZhciBfdGVtcGxhdGVFbmdpbmU7XG4gICAga28uc2V0VGVtcGxhdGVFbmdpbmUgPSBmdW5jdGlvbiAodGVtcGxhdGVFbmdpbmUpIHtcbiAgICAgICAgaWYgKCh0ZW1wbGF0ZUVuZ2luZSAhPSB1bmRlZmluZWQpICYmICEodGVtcGxhdGVFbmdpbmUgaW5zdGFuY2VvZiBrby50ZW1wbGF0ZUVuZ2luZSkpXG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJ0ZW1wbGF0ZUVuZ2luZSBtdXN0IGluaGVyaXQgZnJvbSBrby50ZW1wbGF0ZUVuZ2luZVwiKTtcbiAgICAgICAgX3RlbXBsYXRlRW5naW5lID0gdGVtcGxhdGVFbmdpbmU7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gaW52b2tlRm9yRWFjaE5vZGVJbkNvbnRpbnVvdXNSYW5nZShmaXJzdE5vZGUsIGxhc3ROb2RlLCBhY3Rpb24pIHtcbiAgICAgICAgdmFyIG5vZGUsIG5leHRJblF1ZXVlID0gZmlyc3ROb2RlLCBmaXJzdE91dE9mUmFuZ2VOb2RlID0ga28udmlydHVhbEVsZW1lbnRzLm5leHRTaWJsaW5nKGxhc3ROb2RlKTtcbiAgICAgICAgd2hpbGUgKG5leHRJblF1ZXVlICYmICgobm9kZSA9IG5leHRJblF1ZXVlKSAhPT0gZmlyc3RPdXRPZlJhbmdlTm9kZSkpIHtcbiAgICAgICAgICAgIG5leHRJblF1ZXVlID0ga28udmlydHVhbEVsZW1lbnRzLm5leHRTaWJsaW5nKG5vZGUpO1xuICAgICAgICAgICAgYWN0aW9uKG5vZGUsIG5leHRJblF1ZXVlKTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIGZ1bmN0aW9uIGFjdGl2YXRlQmluZGluZ3NPbkNvbnRpbnVvdXNOb2RlQXJyYXkoY29udGludW91c05vZGVBcnJheSwgYmluZGluZ0NvbnRleHQpIHtcbiAgICAgICAgLy8gVG8gYmUgdXNlZCBvbiBhbnkgbm9kZXMgdGhhdCBoYXZlIGJlZW4gcmVuZGVyZWQgYnkgYSB0ZW1wbGF0ZSBhbmQgaGF2ZSBiZWVuIGluc2VydGVkIGludG8gc29tZSBwYXJlbnQgZWxlbWVudFxuICAgICAgICAvLyBXYWxrcyB0aHJvdWdoIGNvbnRpbnVvdXNOb2RlQXJyYXkgKHdoaWNoICptdXN0KiBiZSBjb250aW51b3VzLCBpLmUuLCBhbiB1bmludGVycnVwdGVkIHNlcXVlbmNlIG9mIHNpYmxpbmcgbm9kZXMsIGJlY2F1c2VcbiAgICAgICAgLy8gdGhlIGFsZ29yaXRobSBmb3Igd2Fsa2luZyB0aGVtIHJlbGllcyBvbiB0aGlzKSwgYW5kIGZvciBlYWNoIHRvcC1sZXZlbCBpdGVtIGluIHRoZSB2aXJ0dWFsLWVsZW1lbnQgc2Vuc2UsXG4gICAgICAgIC8vICgxKSBEb2VzIGEgcmVndWxhciBcImFwcGx5QmluZGluZ3NcIiB0byBhc3NvY2lhdGUgYmluZGluZ0NvbnRleHQgd2l0aCB0aGlzIG5vZGUgYW5kIHRvIGFjdGl2YXRlIGFueSBub24tbWVtb2l6ZWQgYmluZGluZ3NcbiAgICAgICAgLy8gKDIpIFVubWVtb2l6ZXMgYW55IG1lbW9zIGluIHRoZSBET00gc3VidHJlZSAoZS5nLiwgdG8gYWN0aXZhdGUgYmluZGluZ3MgdGhhdCBoYWQgYmVlbiBtZW1vaXplZCBkdXJpbmcgdGVtcGxhdGUgcmV3cml0aW5nKVxuXG4gICAgICAgIGlmIChjb250aW51b3VzTm9kZUFycmF5Lmxlbmd0aCkge1xuICAgICAgICAgICAgdmFyIGZpcnN0Tm9kZSA9IGNvbnRpbnVvdXNOb2RlQXJyYXlbMF0sXG4gICAgICAgICAgICAgICAgbGFzdE5vZGUgPSBjb250aW51b3VzTm9kZUFycmF5W2NvbnRpbnVvdXNOb2RlQXJyYXkubGVuZ3RoIC0gMV0sXG4gICAgICAgICAgICAgICAgcGFyZW50Tm9kZSA9IGZpcnN0Tm9kZS5wYXJlbnROb2RlLFxuICAgICAgICAgICAgICAgIHByb3ZpZGVyID0ga28uYmluZGluZ1Byb3ZpZGVyWydpbnN0YW5jZSddLFxuICAgICAgICAgICAgICAgIHByZXByb2Nlc3NOb2RlID0gcHJvdmlkZXJbJ3ByZXByb2Nlc3NOb2RlJ107XG5cbiAgICAgICAgICAgIGlmIChwcmVwcm9jZXNzTm9kZSkge1xuICAgICAgICAgICAgICAgIGludm9rZUZvckVhY2hOb2RlSW5Db250aW51b3VzUmFuZ2UoZmlyc3ROb2RlLCBsYXN0Tm9kZSwgZnVuY3Rpb24obm9kZSwgbmV4dE5vZGVJblJhbmdlKSB7XG4gICAgICAgICAgICAgICAgICAgIHZhciBub2RlUHJldmlvdXNTaWJsaW5nID0gbm9kZS5wcmV2aW91c1NpYmxpbmc7XG4gICAgICAgICAgICAgICAgICAgIHZhciBuZXdOb2RlcyA9IHByZXByb2Nlc3NOb2RlLmNhbGwocHJvdmlkZXIsIG5vZGUpO1xuICAgICAgICAgICAgICAgICAgICBpZiAobmV3Tm9kZXMpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChub2RlID09PSBmaXJzdE5vZGUpXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZmlyc3ROb2RlID0gbmV3Tm9kZXNbMF0gfHwgbmV4dE5vZGVJblJhbmdlO1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKG5vZGUgPT09IGxhc3ROb2RlKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxhc3ROb2RlID0gbmV3Tm9kZXNbbmV3Tm9kZXMubGVuZ3RoIC0gMV0gfHwgbm9kZVByZXZpb3VzU2libGluZztcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICAgICAgLy8gQmVjYXVzZSBwcmVwcm9jZXNzTm9kZSBjYW4gY2hhbmdlIHRoZSBub2RlcywgaW5jbHVkaW5nIHRoZSBmaXJzdCBhbmQgbGFzdCBub2RlcywgdXBkYXRlIGNvbnRpbnVvdXNOb2RlQXJyYXkgdG8gbWF0Y2guXG4gICAgICAgICAgICAgICAgLy8gV2UgbmVlZCB0aGUgZnVsbCBzZXQsIGluY2x1ZGluZyBpbm5lciBub2RlcywgYmVjYXVzZSB0aGUgdW5tZW1vaXplIHN0ZXAgbWlnaHQgcmVtb3ZlIHRoZSBmaXJzdCBub2RlIChhbmQgc28gdGhlIHJlYWxcbiAgICAgICAgICAgICAgICAvLyBmaXJzdCBub2RlIG5lZWRzIHRvIGJlIGluIHRoZSBhcnJheSkuXG4gICAgICAgICAgICAgICAgY29udGludW91c05vZGVBcnJheS5sZW5ndGggPSAwO1xuICAgICAgICAgICAgICAgIGlmICghZmlyc3ROb2RlKSB7IC8vIHByZXByb2Nlc3NOb2RlIG1pZ2h0IGhhdmUgcmVtb3ZlZCBhbGwgdGhlIG5vZGVzLCBpbiB3aGljaCBjYXNlIHRoZXJlJ3Mgbm90aGluZyBsZWZ0IHRvIGRvXG4gICAgICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgaWYgKGZpcnN0Tm9kZSA9PT0gbGFzdE5vZGUpIHtcbiAgICAgICAgICAgICAgICAgICAgY29udGludW91c05vZGVBcnJheS5wdXNoKGZpcnN0Tm9kZSk7XG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgY29udGludW91c05vZGVBcnJheS5wdXNoKGZpcnN0Tm9kZSwgbGFzdE5vZGUpO1xuICAgICAgICAgICAgICAgICAgICBrby51dGlscy5maXhVcENvbnRpbnVvdXNOb2RlQXJyYXkoY29udGludW91c05vZGVBcnJheSwgcGFyZW50Tm9kZSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAvLyBOZWVkIHRvIGFwcGx5QmluZGluZ3MgKmJlZm9yZSogdW5tZW1vemlhdGlvbiwgYmVjYXVzZSB1bm1lbW9pemF0aW9uIG1pZ2h0IGludHJvZHVjZSBleHRyYSBub2RlcyAodGhhdCB3ZSBkb24ndCB3YW50IHRvIHJlLWJpbmQpXG4gICAgICAgICAgICAvLyB3aGVyZWFzIGEgcmVndWxhciBhcHBseUJpbmRpbmdzIHdvbid0IGludHJvZHVjZSBuZXcgbWVtb2l6ZWQgbm9kZXNcbiAgICAgICAgICAgIGludm9rZUZvckVhY2hOb2RlSW5Db250aW51b3VzUmFuZ2UoZmlyc3ROb2RlLCBsYXN0Tm9kZSwgZnVuY3Rpb24obm9kZSkge1xuICAgICAgICAgICAgICAgIGlmIChub2RlLm5vZGVUeXBlID09PSAxIHx8IG5vZGUubm9kZVR5cGUgPT09IDgpXG4gICAgICAgICAgICAgICAgICAgIGtvLmFwcGx5QmluZGluZ3MoYmluZGluZ0NvbnRleHQsIG5vZGUpO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICBpbnZva2VGb3JFYWNoTm9kZUluQ29udGludW91c1JhbmdlKGZpcnN0Tm9kZSwgbGFzdE5vZGUsIGZ1bmN0aW9uKG5vZGUpIHtcbiAgICAgICAgICAgICAgICBpZiAobm9kZS5ub2RlVHlwZSA9PT0gMSB8fCBub2RlLm5vZGVUeXBlID09PSA4KVxuICAgICAgICAgICAgICAgICAgICBrby5tZW1vaXphdGlvbi51bm1lbW9pemVEb21Ob2RlQW5kRGVzY2VuZGFudHMobm9kZSwgW2JpbmRpbmdDb250ZXh0XSk7XG4gICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgLy8gTWFrZSBzdXJlIGFueSBjaGFuZ2VzIGRvbmUgYnkgYXBwbHlCaW5kaW5ncyBvciB1bm1lbW9pemUgYXJlIHJlZmxlY3RlZCBpbiB0aGUgYXJyYXlcbiAgICAgICAgICAgIGtvLnV0aWxzLmZpeFVwQ29udGludW91c05vZGVBcnJheShjb250aW51b3VzTm9kZUFycmF5LCBwYXJlbnROb2RlKTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIGZ1bmN0aW9uIGdldEZpcnN0Tm9kZUZyb21Qb3NzaWJsZUFycmF5KG5vZGVPck5vZGVBcnJheSkge1xuICAgICAgICByZXR1cm4gbm9kZU9yTm9kZUFycmF5Lm5vZGVUeXBlID8gbm9kZU9yTm9kZUFycmF5XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgOiBub2RlT3JOb2RlQXJyYXkubGVuZ3RoID4gMCA/IG5vZGVPck5vZGVBcnJheVswXVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDogbnVsbDtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBleGVjdXRlVGVtcGxhdGUodGFyZ2V0Tm9kZU9yTm9kZUFycmF5LCByZW5kZXJNb2RlLCB0ZW1wbGF0ZSwgYmluZGluZ0NvbnRleHQsIG9wdGlvbnMpIHtcbiAgICAgICAgb3B0aW9ucyA9IG9wdGlvbnMgfHwge307XG4gICAgICAgIHZhciBmaXJzdFRhcmdldE5vZGUgPSB0YXJnZXROb2RlT3JOb2RlQXJyYXkgJiYgZ2V0Rmlyc3ROb2RlRnJvbVBvc3NpYmxlQXJyYXkodGFyZ2V0Tm9kZU9yTm9kZUFycmF5KTtcbiAgICAgICAgdmFyIHRlbXBsYXRlRG9jdW1lbnQgPSAoZmlyc3RUYXJnZXROb2RlIHx8IHRlbXBsYXRlIHx8IHt9KS5vd25lckRvY3VtZW50O1xuICAgICAgICB2YXIgdGVtcGxhdGVFbmdpbmVUb1VzZSA9IChvcHRpb25zWyd0ZW1wbGF0ZUVuZ2luZSddIHx8IF90ZW1wbGF0ZUVuZ2luZSk7XG4gICAgICAgIGtvLnRlbXBsYXRlUmV3cml0aW5nLmVuc3VyZVRlbXBsYXRlSXNSZXdyaXR0ZW4odGVtcGxhdGUsIHRlbXBsYXRlRW5naW5lVG9Vc2UsIHRlbXBsYXRlRG9jdW1lbnQpO1xuICAgICAgICB2YXIgcmVuZGVyZWROb2Rlc0FycmF5ID0gdGVtcGxhdGVFbmdpbmVUb1VzZVsncmVuZGVyVGVtcGxhdGUnXSh0ZW1wbGF0ZSwgYmluZGluZ0NvbnRleHQsIG9wdGlvbnMsIHRlbXBsYXRlRG9jdW1lbnQpO1xuXG4gICAgICAgIC8vIExvb3NlbHkgY2hlY2sgcmVzdWx0IGlzIGFuIGFycmF5IG9mIERPTSBub2Rlc1xuICAgICAgICBpZiAoKHR5cGVvZiByZW5kZXJlZE5vZGVzQXJyYXkubGVuZ3RoICE9IFwibnVtYmVyXCIpIHx8IChyZW5kZXJlZE5vZGVzQXJyYXkubGVuZ3RoID4gMCAmJiB0eXBlb2YgcmVuZGVyZWROb2Rlc0FycmF5WzBdLm5vZGVUeXBlICE9IFwibnVtYmVyXCIpKVxuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiVGVtcGxhdGUgZW5naW5lIG11c3QgcmV0dXJuIGFuIGFycmF5IG9mIERPTSBub2Rlc1wiKTtcblxuICAgICAgICB2YXIgaGF2ZUFkZGVkTm9kZXNUb1BhcmVudCA9IGZhbHNlO1xuICAgICAgICBzd2l0Y2ggKHJlbmRlck1vZGUpIHtcbiAgICAgICAgICAgIGNhc2UgXCJyZXBsYWNlQ2hpbGRyZW5cIjpcbiAgICAgICAgICAgICAgICBrby52aXJ0dWFsRWxlbWVudHMuc2V0RG9tTm9kZUNoaWxkcmVuKHRhcmdldE5vZGVPck5vZGVBcnJheSwgcmVuZGVyZWROb2Rlc0FycmF5KTtcbiAgICAgICAgICAgICAgICBoYXZlQWRkZWROb2Rlc1RvUGFyZW50ID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIGNhc2UgXCJyZXBsYWNlTm9kZVwiOlxuICAgICAgICAgICAgICAgIGtvLnV0aWxzLnJlcGxhY2VEb21Ob2Rlcyh0YXJnZXROb2RlT3JOb2RlQXJyYXksIHJlbmRlcmVkTm9kZXNBcnJheSk7XG4gICAgICAgICAgICAgICAgaGF2ZUFkZGVkTm9kZXNUb1BhcmVudCA9IHRydWU7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICBjYXNlIFwiaWdub3JlVGFyZ2V0Tm9kZVwiOiBicmVhaztcbiAgICAgICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiVW5rbm93biByZW5kZXJNb2RlOiBcIiArIHJlbmRlck1vZGUpO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKGhhdmVBZGRlZE5vZGVzVG9QYXJlbnQpIHtcbiAgICAgICAgICAgIGFjdGl2YXRlQmluZGluZ3NPbkNvbnRpbnVvdXNOb2RlQXJyYXkocmVuZGVyZWROb2Rlc0FycmF5LCBiaW5kaW5nQ29udGV4dCk7XG4gICAgICAgICAgICBpZiAob3B0aW9uc1snYWZ0ZXJSZW5kZXInXSlcbiAgICAgICAgICAgICAgICBrby5kZXBlbmRlbmN5RGV0ZWN0aW9uLmlnbm9yZShvcHRpb25zWydhZnRlclJlbmRlciddLCBudWxsLCBbcmVuZGVyZWROb2Rlc0FycmF5LCBiaW5kaW5nQ29udGV4dFsnJGRhdGEnXV0pO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIHJlbmRlcmVkTm9kZXNBcnJheTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiByZXNvbHZlVGVtcGxhdGVOYW1lKHRlbXBsYXRlLCBkYXRhLCBjb250ZXh0KSB7XG4gICAgICAgIC8vIFRoZSB0ZW1wbGF0ZSBjYW4gYmUgc3BlY2lmaWVkIGFzOlxuICAgICAgICBpZiAoa28uaXNPYnNlcnZhYmxlKHRlbXBsYXRlKSkge1xuICAgICAgICAgICAgLy8gMS4gQW4gb2JzZXJ2YWJsZSwgd2l0aCBzdHJpbmcgdmFsdWVcbiAgICAgICAgICAgIHJldHVybiB0ZW1wbGF0ZSgpO1xuICAgICAgICB9IGVsc2UgaWYgKHR5cGVvZiB0ZW1wbGF0ZSA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICAgICAgLy8gMi4gQSBmdW5jdGlvbiBvZiAoZGF0YSwgY29udGV4dCkgcmV0dXJuaW5nIGEgc3RyaW5nXG4gICAgICAgICAgICByZXR1cm4gdGVtcGxhdGUoZGF0YSwgY29udGV4dCk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAvLyAzLiBBIHN0cmluZ1xuICAgICAgICAgICAgcmV0dXJuIHRlbXBsYXRlO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAga28ucmVuZGVyVGVtcGxhdGUgPSBmdW5jdGlvbiAodGVtcGxhdGUsIGRhdGFPckJpbmRpbmdDb250ZXh0LCBvcHRpb25zLCB0YXJnZXROb2RlT3JOb2RlQXJyYXksIHJlbmRlck1vZGUpIHtcbiAgICAgICAgb3B0aW9ucyA9IG9wdGlvbnMgfHwge307XG4gICAgICAgIGlmICgob3B0aW9uc1sndGVtcGxhdGVFbmdpbmUnXSB8fCBfdGVtcGxhdGVFbmdpbmUpID09IHVuZGVmaW5lZClcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihcIlNldCBhIHRlbXBsYXRlIGVuZ2luZSBiZWZvcmUgY2FsbGluZyByZW5kZXJUZW1wbGF0ZVwiKTtcbiAgICAgICAgcmVuZGVyTW9kZSA9IHJlbmRlck1vZGUgfHwgXCJyZXBsYWNlQ2hpbGRyZW5cIjtcblxuICAgICAgICBpZiAodGFyZ2V0Tm9kZU9yTm9kZUFycmF5KSB7XG4gICAgICAgICAgICB2YXIgZmlyc3RUYXJnZXROb2RlID0gZ2V0Rmlyc3ROb2RlRnJvbVBvc3NpYmxlQXJyYXkodGFyZ2V0Tm9kZU9yTm9kZUFycmF5KTtcblxuICAgICAgICAgICAgdmFyIHdoZW5Ub0Rpc3Bvc2UgPSBmdW5jdGlvbiAoKSB7IHJldHVybiAoIWZpcnN0VGFyZ2V0Tm9kZSkgfHwgIWtvLnV0aWxzLmRvbU5vZGVJc0F0dGFjaGVkVG9Eb2N1bWVudChmaXJzdFRhcmdldE5vZGUpOyB9OyAvLyBQYXNzaXZlIGRpc3Bvc2FsIChvbiBuZXh0IGV2YWx1YXRpb24pXG4gICAgICAgICAgICB2YXIgYWN0aXZlbHlEaXNwb3NlV2hlbk5vZGVJc1JlbW92ZWQgPSAoZmlyc3RUYXJnZXROb2RlICYmIHJlbmRlck1vZGUgPT0gXCJyZXBsYWNlTm9kZVwiKSA/IGZpcnN0VGFyZ2V0Tm9kZS5wYXJlbnROb2RlIDogZmlyc3RUYXJnZXROb2RlO1xuXG4gICAgICAgICAgICByZXR1cm4ga28uZGVwZW5kZW50T2JzZXJ2YWJsZSggLy8gU28gdGhlIERPTSBpcyBhdXRvbWF0aWNhbGx5IHVwZGF0ZWQgd2hlbiBhbnkgZGVwZW5kZW5jeSBjaGFuZ2VzXG4gICAgICAgICAgICAgICAgZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgICAgICAvLyBFbnN1cmUgd2UndmUgZ290IGEgcHJvcGVyIGJpbmRpbmcgY29udGV4dCB0byB3b3JrIHdpdGhcbiAgICAgICAgICAgICAgICAgICAgdmFyIGJpbmRpbmdDb250ZXh0ID0gKGRhdGFPckJpbmRpbmdDb250ZXh0ICYmIChkYXRhT3JCaW5kaW5nQ29udGV4dCBpbnN0YW5jZW9mIGtvLmJpbmRpbmdDb250ZXh0KSlcbiAgICAgICAgICAgICAgICAgICAgICAgID8gZGF0YU9yQmluZGluZ0NvbnRleHRcbiAgICAgICAgICAgICAgICAgICAgICAgIDogbmV3IGtvLmJpbmRpbmdDb250ZXh0KGtvLnV0aWxzLnVud3JhcE9ic2VydmFibGUoZGF0YU9yQmluZGluZ0NvbnRleHQpKTtcblxuICAgICAgICAgICAgICAgICAgICB2YXIgdGVtcGxhdGVOYW1lID0gcmVzb2x2ZVRlbXBsYXRlTmFtZSh0ZW1wbGF0ZSwgYmluZGluZ0NvbnRleHRbJyRkYXRhJ10sIGJpbmRpbmdDb250ZXh0KSxcbiAgICAgICAgICAgICAgICAgICAgICAgIHJlbmRlcmVkTm9kZXNBcnJheSA9IGV4ZWN1dGVUZW1wbGF0ZSh0YXJnZXROb2RlT3JOb2RlQXJyYXksIHJlbmRlck1vZGUsIHRlbXBsYXRlTmFtZSwgYmluZGluZ0NvbnRleHQsIG9wdGlvbnMpO1xuXG4gICAgICAgICAgICAgICAgICAgIGlmIChyZW5kZXJNb2RlID09IFwicmVwbGFjZU5vZGVcIikge1xuICAgICAgICAgICAgICAgICAgICAgICAgdGFyZ2V0Tm9kZU9yTm9kZUFycmF5ID0gcmVuZGVyZWROb2Rlc0FycmF5O1xuICAgICAgICAgICAgICAgICAgICAgICAgZmlyc3RUYXJnZXROb2RlID0gZ2V0Rmlyc3ROb2RlRnJvbVBvc3NpYmxlQXJyYXkodGFyZ2V0Tm9kZU9yTm9kZUFycmF5KTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgbnVsbCxcbiAgICAgICAgICAgICAgICB7IGRpc3Bvc2VXaGVuOiB3aGVuVG9EaXNwb3NlLCBkaXNwb3NlV2hlbk5vZGVJc1JlbW92ZWQ6IGFjdGl2ZWx5RGlzcG9zZVdoZW5Ob2RlSXNSZW1vdmVkIH1cbiAgICAgICAgICAgICk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAvLyBXZSBkb24ndCB5ZXQgaGF2ZSBhIERPTSBub2RlIHRvIGV2YWx1YXRlLCBzbyB1c2UgYSBtZW1vIGFuZCByZW5kZXIgdGhlIHRlbXBsYXRlIGxhdGVyIHdoZW4gdGhlcmUgaXMgYSBET00gbm9kZVxuICAgICAgICAgICAgcmV0dXJuIGtvLm1lbW9pemF0aW9uLm1lbW9pemUoZnVuY3Rpb24gKGRvbU5vZGUpIHtcbiAgICAgICAgICAgICAgICBrby5yZW5kZXJUZW1wbGF0ZSh0ZW1wbGF0ZSwgZGF0YU9yQmluZGluZ0NvbnRleHQsIG9wdGlvbnMsIGRvbU5vZGUsIFwicmVwbGFjZU5vZGVcIik7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgIH07XG5cbiAgICBrby5yZW5kZXJUZW1wbGF0ZUZvckVhY2ggPSBmdW5jdGlvbiAodGVtcGxhdGUsIGFycmF5T3JPYnNlcnZhYmxlQXJyYXksIG9wdGlvbnMsIHRhcmdldE5vZGUsIHBhcmVudEJpbmRpbmdDb250ZXh0KSB7XG4gICAgICAgIC8vIFNpbmNlIHNldERvbU5vZGVDaGlsZHJlbkZyb21BcnJheU1hcHBpbmcgYWx3YXlzIGNhbGxzIGV4ZWN1dGVUZW1wbGF0ZUZvckFycmF5SXRlbSBhbmQgdGhlblxuICAgICAgICAvLyBhY3RpdmF0ZUJpbmRpbmdzQ2FsbGJhY2sgZm9yIGFkZGVkIGl0ZW1zLCB3ZSBjYW4gc3RvcmUgdGhlIGJpbmRpbmcgY29udGV4dCBpbiB0aGUgZm9ybWVyIHRvIHVzZSBpbiB0aGUgbGF0dGVyLlxuICAgICAgICB2YXIgYXJyYXlJdGVtQ29udGV4dDtcblxuICAgICAgICAvLyBUaGlzIHdpbGwgYmUgY2FsbGVkIGJ5IHNldERvbU5vZGVDaGlsZHJlbkZyb21BcnJheU1hcHBpbmcgdG8gZ2V0IHRoZSBub2RlcyB0byBhZGQgdG8gdGFyZ2V0Tm9kZVxuICAgICAgICB2YXIgZXhlY3V0ZVRlbXBsYXRlRm9yQXJyYXlJdGVtID0gZnVuY3Rpb24gKGFycmF5VmFsdWUsIGluZGV4KSB7XG4gICAgICAgICAgICAvLyBTdXBwb3J0IHNlbGVjdGluZyB0ZW1wbGF0ZSBhcyBhIGZ1bmN0aW9uIG9mIHRoZSBkYXRhIGJlaW5nIHJlbmRlcmVkXG4gICAgICAgICAgICBhcnJheUl0ZW1Db250ZXh0ID0gcGFyZW50QmluZGluZ0NvbnRleHRbJ2NyZWF0ZUNoaWxkQ29udGV4dCddKGFycmF5VmFsdWUsIG9wdGlvbnNbJ2FzJ10sIGZ1bmN0aW9uKGNvbnRleHQpIHtcbiAgICAgICAgICAgICAgICBjb250ZXh0WyckaW5kZXgnXSA9IGluZGV4O1xuICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgIHZhciB0ZW1wbGF0ZU5hbWUgPSByZXNvbHZlVGVtcGxhdGVOYW1lKHRlbXBsYXRlLCBhcnJheVZhbHVlLCBhcnJheUl0ZW1Db250ZXh0KTtcbiAgICAgICAgICAgIHJldHVybiBleGVjdXRlVGVtcGxhdGUobnVsbCwgXCJpZ25vcmVUYXJnZXROb2RlXCIsIHRlbXBsYXRlTmFtZSwgYXJyYXlJdGVtQ29udGV4dCwgb3B0aW9ucyk7XG4gICAgICAgIH1cblxuICAgICAgICAvLyBUaGlzIHdpbGwgYmUgY2FsbGVkIHdoZW5ldmVyIHNldERvbU5vZGVDaGlsZHJlbkZyb21BcnJheU1hcHBpbmcgaGFzIGFkZGVkIG5vZGVzIHRvIHRhcmdldE5vZGVcbiAgICAgICAgdmFyIGFjdGl2YXRlQmluZGluZ3NDYWxsYmFjayA9IGZ1bmN0aW9uKGFycmF5VmFsdWUsIGFkZGVkTm9kZXNBcnJheSwgaW5kZXgpIHtcbiAgICAgICAgICAgIGFjdGl2YXRlQmluZGluZ3NPbkNvbnRpbnVvdXNOb2RlQXJyYXkoYWRkZWROb2Rlc0FycmF5LCBhcnJheUl0ZW1Db250ZXh0KTtcbiAgICAgICAgICAgIGlmIChvcHRpb25zWydhZnRlclJlbmRlciddKVxuICAgICAgICAgICAgICAgIG9wdGlvbnNbJ2FmdGVyUmVuZGVyJ10oYWRkZWROb2Rlc0FycmF5LCBhcnJheVZhbHVlKTtcblxuICAgICAgICAgICAgLy8gcmVsZWFzZSB0aGUgXCJjYWNoZVwiIHZhcmlhYmxlLCBzbyB0aGF0IGl0IGNhbiBiZSBjb2xsZWN0ZWQgYnlcbiAgICAgICAgICAgIC8vIHRoZSBHQyB3aGVuIGl0cyB2YWx1ZSBpc24ndCB1c2VkIGZyb20gd2l0aGluIHRoZSBiaW5kaW5ncyBhbnltb3JlLlxuICAgICAgICAgICAgYXJyYXlJdGVtQ29udGV4dCA9IG51bGw7XG4gICAgICAgIH07XG5cbiAgICAgICAgcmV0dXJuIGtvLmRlcGVuZGVudE9ic2VydmFibGUoZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgdmFyIHVud3JhcHBlZEFycmF5ID0ga28udXRpbHMudW53cmFwT2JzZXJ2YWJsZShhcnJheU9yT2JzZXJ2YWJsZUFycmF5KSB8fCBbXTtcbiAgICAgICAgICAgIGlmICh0eXBlb2YgdW53cmFwcGVkQXJyYXkubGVuZ3RoID09IFwidW5kZWZpbmVkXCIpIC8vIENvZXJjZSBzaW5nbGUgdmFsdWUgaW50byBhcnJheVxuICAgICAgICAgICAgICAgIHVud3JhcHBlZEFycmF5ID0gW3Vud3JhcHBlZEFycmF5XTtcblxuICAgICAgICAgICAgLy8gRmlsdGVyIG91dCBhbnkgZW50cmllcyBtYXJrZWQgYXMgZGVzdHJveWVkXG4gICAgICAgICAgICB2YXIgZmlsdGVyZWRBcnJheSA9IGtvLnV0aWxzLmFycmF5RmlsdGVyKHVud3JhcHBlZEFycmF5LCBmdW5jdGlvbihpdGVtKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIG9wdGlvbnNbJ2luY2x1ZGVEZXN0cm95ZWQnXSB8fCBpdGVtID09PSB1bmRlZmluZWQgfHwgaXRlbSA9PT0gbnVsbCB8fCAha28udXRpbHMudW53cmFwT2JzZXJ2YWJsZShpdGVtWydfZGVzdHJveSddKTtcbiAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICAvLyBDYWxsIHNldERvbU5vZGVDaGlsZHJlbkZyb21BcnJheU1hcHBpbmcsIGlnbm9yaW5nIGFueSBvYnNlcnZhYmxlcyB1bndyYXBwZWQgd2l0aGluIChtb3N0IGxpa2VseSBmcm9tIGEgY2FsbGJhY2sgZnVuY3Rpb24pLlxuICAgICAgICAgICAgLy8gSWYgdGhlIGFycmF5IGl0ZW1zIGFyZSBvYnNlcnZhYmxlcywgdGhvdWdoLCB0aGV5IHdpbGwgYmUgdW53cmFwcGVkIGluIGV4ZWN1dGVUZW1wbGF0ZUZvckFycmF5SXRlbSBhbmQgbWFuYWdlZCB3aXRoaW4gc2V0RG9tTm9kZUNoaWxkcmVuRnJvbUFycmF5TWFwcGluZy5cbiAgICAgICAgICAgIGtvLmRlcGVuZGVuY3lEZXRlY3Rpb24uaWdub3JlKGtvLnV0aWxzLnNldERvbU5vZGVDaGlsZHJlbkZyb21BcnJheU1hcHBpbmcsIG51bGwsIFt0YXJnZXROb2RlLCBmaWx0ZXJlZEFycmF5LCBleGVjdXRlVGVtcGxhdGVGb3JBcnJheUl0ZW0sIG9wdGlvbnMsIGFjdGl2YXRlQmluZGluZ3NDYWxsYmFja10pO1xuXG4gICAgICAgIH0sIG51bGwsIHsgZGlzcG9zZVdoZW5Ob2RlSXNSZW1vdmVkOiB0YXJnZXROb2RlIH0pO1xuICAgIH07XG5cbiAgICB2YXIgdGVtcGxhdGVDb21wdXRlZERvbURhdGFLZXkgPSBrby51dGlscy5kb21EYXRhLm5leHRLZXkoKTtcbiAgICBmdW5jdGlvbiBkaXNwb3NlT2xkQ29tcHV0ZWRBbmRTdG9yZU5ld09uZShlbGVtZW50LCBuZXdDb21wdXRlZCkge1xuICAgICAgICB2YXIgb2xkQ29tcHV0ZWQgPSBrby51dGlscy5kb21EYXRhLmdldChlbGVtZW50LCB0ZW1wbGF0ZUNvbXB1dGVkRG9tRGF0YUtleSk7XG4gICAgICAgIGlmIChvbGRDb21wdXRlZCAmJiAodHlwZW9mKG9sZENvbXB1dGVkLmRpc3Bvc2UpID09ICdmdW5jdGlvbicpKVxuICAgICAgICAgICAgb2xkQ29tcHV0ZWQuZGlzcG9zZSgpO1xuICAgICAgICBrby51dGlscy5kb21EYXRhLnNldChlbGVtZW50LCB0ZW1wbGF0ZUNvbXB1dGVkRG9tRGF0YUtleSwgKG5ld0NvbXB1dGVkICYmIG5ld0NvbXB1dGVkLmlzQWN0aXZlKCkpID8gbmV3Q29tcHV0ZWQgOiB1bmRlZmluZWQpO1xuICAgIH1cblxuICAgIGtvLmJpbmRpbmdIYW5kbGVyc1sndGVtcGxhdGUnXSA9IHtcbiAgICAgICAgJ2luaXQnOiBmdW5jdGlvbihlbGVtZW50LCB2YWx1ZUFjY2Vzc29yKSB7XG4gICAgICAgICAgICAvLyBTdXBwb3J0IGFub255bW91cyB0ZW1wbGF0ZXNcbiAgICAgICAgICAgIHZhciBiaW5kaW5nVmFsdWUgPSBrby51dGlscy51bndyYXBPYnNlcnZhYmxlKHZhbHVlQWNjZXNzb3IoKSk7XG4gICAgICAgICAgICBpZiAodHlwZW9mIGJpbmRpbmdWYWx1ZSA9PSBcInN0cmluZ1wiIHx8IGJpbmRpbmdWYWx1ZVsnbmFtZSddKSB7XG4gICAgICAgICAgICAgICAgLy8gSXQncyBhIG5hbWVkIHRlbXBsYXRlIC0gY2xlYXIgdGhlIGVsZW1lbnRcbiAgICAgICAgICAgICAgICBrby52aXJ0dWFsRWxlbWVudHMuZW1wdHlOb2RlKGVsZW1lbnQpO1xuICAgICAgICAgICAgfSBlbHNlIGlmICgnbm9kZXMnIGluIGJpbmRpbmdWYWx1ZSkge1xuICAgICAgICAgICAgICAgIC8vIFdlJ3ZlIGJlZW4gZ2l2ZW4gYW4gYXJyYXkgb2YgRE9NIG5vZGVzLiBTYXZlIHRoZW0gYXMgdGhlIHRlbXBsYXRlIHNvdXJjZS5cbiAgICAgICAgICAgICAgICAvLyBUaGVyZSBpcyBubyBrbm93biB1c2UgY2FzZSBmb3IgdGhlIG5vZGUgYXJyYXkgYmVpbmcgYW4gb2JzZXJ2YWJsZSBhcnJheSAoaWYgdGhlIG91dHB1dFxuICAgICAgICAgICAgICAgIC8vIHZhcmllcywgcHV0IHRoYXQgYmVoYXZpb3IgKmludG8qIHlvdXIgdGVtcGxhdGUgLSB0aGF0J3Mgd2hhdCB0ZW1wbGF0ZXMgYXJlIGZvciksIGFuZFxuICAgICAgICAgICAgICAgIC8vIHRoZSBpbXBsZW1lbnRhdGlvbiB3b3VsZCBiZSBhIG1lc3MsIHNvIGFzc2VydCB0aGF0IGl0J3Mgbm90IG9ic2VydmFibGUuXG4gICAgICAgICAgICAgICAgdmFyIG5vZGVzID0gYmluZGluZ1ZhbHVlWydub2RlcyddIHx8IFtdO1xuICAgICAgICAgICAgICAgIGlmIChrby5pc09ic2VydmFibGUobm9kZXMpKSB7XG4gICAgICAgICAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcignVGhlIFwibm9kZXNcIiBvcHRpb24gbXVzdCBiZSBhIHBsYWluLCBub24tb2JzZXJ2YWJsZSBhcnJheS4nKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgdmFyIGNvbnRhaW5lciA9IGtvLnV0aWxzLm1vdmVDbGVhbmVkTm9kZXNUb0NvbnRhaW5lckVsZW1lbnQobm9kZXMpOyAvLyBUaGlzIGFsc28gcmVtb3ZlcyB0aGUgbm9kZXMgZnJvbSB0aGVpciBjdXJyZW50IHBhcmVudFxuICAgICAgICAgICAgICAgIG5ldyBrby50ZW1wbGF0ZVNvdXJjZXMuYW5vbnltb3VzVGVtcGxhdGUoZWxlbWVudClbJ25vZGVzJ10oY29udGFpbmVyKTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgLy8gSXQncyBhbiBhbm9ueW1vdXMgdGVtcGxhdGUgLSBzdG9yZSB0aGUgZWxlbWVudCBjb250ZW50cywgdGhlbiBjbGVhciB0aGUgZWxlbWVudFxuICAgICAgICAgICAgICAgIHZhciB0ZW1wbGF0ZU5vZGVzID0ga28udmlydHVhbEVsZW1lbnRzLmNoaWxkTm9kZXMoZWxlbWVudCksXG4gICAgICAgICAgICAgICAgICAgIGNvbnRhaW5lciA9IGtvLnV0aWxzLm1vdmVDbGVhbmVkTm9kZXNUb0NvbnRhaW5lckVsZW1lbnQodGVtcGxhdGVOb2Rlcyk7IC8vIFRoaXMgYWxzbyByZW1vdmVzIHRoZSBub2RlcyBmcm9tIHRoZWlyIGN1cnJlbnQgcGFyZW50XG4gICAgICAgICAgICAgICAgbmV3IGtvLnRlbXBsYXRlU291cmNlcy5hbm9ueW1vdXNUZW1wbGF0ZShlbGVtZW50KVsnbm9kZXMnXShjb250YWluZXIpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIHsgJ2NvbnRyb2xzRGVzY2VuZGFudEJpbmRpbmdzJzogdHJ1ZSB9O1xuICAgICAgICB9LFxuICAgICAgICAndXBkYXRlJzogZnVuY3Rpb24gKGVsZW1lbnQsIHZhbHVlQWNjZXNzb3IsIGFsbEJpbmRpbmdzLCB2aWV3TW9kZWwsIGJpbmRpbmdDb250ZXh0KSB7XG4gICAgICAgICAgICB2YXIgdmFsdWUgPSB2YWx1ZUFjY2Vzc29yKCksXG4gICAgICAgICAgICAgICAgZGF0YVZhbHVlLFxuICAgICAgICAgICAgICAgIG9wdGlvbnMgPSBrby51dGlscy51bndyYXBPYnNlcnZhYmxlKHZhbHVlKSxcbiAgICAgICAgICAgICAgICBzaG91bGREaXNwbGF5ID0gdHJ1ZSxcbiAgICAgICAgICAgICAgICB0ZW1wbGF0ZUNvbXB1dGVkID0gbnVsbCxcbiAgICAgICAgICAgICAgICB0ZW1wbGF0ZU5hbWU7XG5cbiAgICAgICAgICAgIGlmICh0eXBlb2Ygb3B0aW9ucyA9PSBcInN0cmluZ1wiKSB7XG4gICAgICAgICAgICAgICAgdGVtcGxhdGVOYW1lID0gdmFsdWU7XG4gICAgICAgICAgICAgICAgb3B0aW9ucyA9IHt9O1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICB0ZW1wbGF0ZU5hbWUgPSBvcHRpb25zWyduYW1lJ107XG5cbiAgICAgICAgICAgICAgICAvLyBTdXBwb3J0IFwiaWZcIi9cImlmbm90XCIgY29uZGl0aW9uc1xuICAgICAgICAgICAgICAgIGlmICgnaWYnIGluIG9wdGlvbnMpXG4gICAgICAgICAgICAgICAgICAgIHNob3VsZERpc3BsYXkgPSBrby51dGlscy51bndyYXBPYnNlcnZhYmxlKG9wdGlvbnNbJ2lmJ10pO1xuICAgICAgICAgICAgICAgIGlmIChzaG91bGREaXNwbGF5ICYmICdpZm5vdCcgaW4gb3B0aW9ucylcbiAgICAgICAgICAgICAgICAgICAgc2hvdWxkRGlzcGxheSA9ICFrby51dGlscy51bndyYXBPYnNlcnZhYmxlKG9wdGlvbnNbJ2lmbm90J10pO1xuXG4gICAgICAgICAgICAgICAgZGF0YVZhbHVlID0ga28udXRpbHMudW53cmFwT2JzZXJ2YWJsZShvcHRpb25zWydkYXRhJ10pO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBpZiAoJ2ZvcmVhY2gnIGluIG9wdGlvbnMpIHtcbiAgICAgICAgICAgICAgICAvLyBSZW5kZXIgb25jZSBmb3IgZWFjaCBkYXRhIHBvaW50ICh0cmVhdGluZyBkYXRhIHNldCBhcyBlbXB0eSBpZiBzaG91bGREaXNwbGF5PT1mYWxzZSlcbiAgICAgICAgICAgICAgICB2YXIgZGF0YUFycmF5ID0gKHNob3VsZERpc3BsYXkgJiYgb3B0aW9uc1snZm9yZWFjaCddKSB8fCBbXTtcbiAgICAgICAgICAgICAgICB0ZW1wbGF0ZUNvbXB1dGVkID0ga28ucmVuZGVyVGVtcGxhdGVGb3JFYWNoKHRlbXBsYXRlTmFtZSB8fCBlbGVtZW50LCBkYXRhQXJyYXksIG9wdGlvbnMsIGVsZW1lbnQsIGJpbmRpbmdDb250ZXh0KTtcbiAgICAgICAgICAgIH0gZWxzZSBpZiAoIXNob3VsZERpc3BsYXkpIHtcbiAgICAgICAgICAgICAgICBrby52aXJ0dWFsRWxlbWVudHMuZW1wdHlOb2RlKGVsZW1lbnQpO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAvLyBSZW5kZXIgb25jZSBmb3IgdGhpcyBzaW5nbGUgZGF0YSBwb2ludCAob3IgdXNlIHRoZSB2aWV3TW9kZWwgaWYgbm8gZGF0YSB3YXMgcHJvdmlkZWQpXG4gICAgICAgICAgICAgICAgdmFyIGlubmVyQmluZGluZ0NvbnRleHQgPSAoJ2RhdGEnIGluIG9wdGlvbnMpID9cbiAgICAgICAgICAgICAgICAgICAgYmluZGluZ0NvbnRleHRbJ2NyZWF0ZUNoaWxkQ29udGV4dCddKGRhdGFWYWx1ZSwgb3B0aW9uc1snYXMnXSkgOiAgLy8gR2l2ZW4gYW4gZXhwbGl0aXQgJ2RhdGEnIHZhbHVlLCB3ZSBjcmVhdGUgYSBjaGlsZCBiaW5kaW5nIGNvbnRleHQgZm9yIGl0XG4gICAgICAgICAgICAgICAgICAgIGJpbmRpbmdDb250ZXh0OyAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gR2l2ZW4gbm8gZXhwbGljaXQgJ2RhdGEnIHZhbHVlLCB3ZSByZXRhaW4gdGhlIHNhbWUgYmluZGluZyBjb250ZXh0XG4gICAgICAgICAgICAgICAgdGVtcGxhdGVDb21wdXRlZCA9IGtvLnJlbmRlclRlbXBsYXRlKHRlbXBsYXRlTmFtZSB8fCBlbGVtZW50LCBpbm5lckJpbmRpbmdDb250ZXh0LCBvcHRpb25zLCBlbGVtZW50KTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgLy8gSXQgb25seSBtYWtlcyBzZW5zZSB0byBoYXZlIGEgc2luZ2xlIHRlbXBsYXRlIGNvbXB1dGVkIHBlciBlbGVtZW50IChvdGhlcndpc2Ugd2hpY2ggb25lIHNob3VsZCBoYXZlIGl0cyBvdXRwdXQgZGlzcGxheWVkPylcbiAgICAgICAgICAgIGRpc3Bvc2VPbGRDb21wdXRlZEFuZFN0b3JlTmV3T25lKGVsZW1lbnQsIHRlbXBsYXRlQ29tcHV0ZWQpO1xuICAgICAgICB9XG4gICAgfTtcblxuICAgIC8vIEFub255bW91cyB0ZW1wbGF0ZXMgY2FuJ3QgYmUgcmV3cml0dGVuLiBHaXZlIGEgbmljZSBlcnJvciBtZXNzYWdlIGlmIHlvdSB0cnkgdG8gZG8gaXQuXG4gICAga28uZXhwcmVzc2lvblJld3JpdGluZy5iaW5kaW5nUmV3cml0ZVZhbGlkYXRvcnNbJ3RlbXBsYXRlJ10gPSBmdW5jdGlvbihiaW5kaW5nVmFsdWUpIHtcbiAgICAgICAgdmFyIHBhcnNlZEJpbmRpbmdWYWx1ZSA9IGtvLmV4cHJlc3Npb25SZXdyaXRpbmcucGFyc2VPYmplY3RMaXRlcmFsKGJpbmRpbmdWYWx1ZSk7XG5cbiAgICAgICAgaWYgKChwYXJzZWRCaW5kaW5nVmFsdWUubGVuZ3RoID09IDEpICYmIHBhcnNlZEJpbmRpbmdWYWx1ZVswXVsndW5rbm93biddKVxuICAgICAgICAgICAgcmV0dXJuIG51bGw7IC8vIEl0IGxvb2tzIGxpa2UgYSBzdHJpbmcgbGl0ZXJhbCwgbm90IGFuIG9iamVjdCBsaXRlcmFsLCBzbyB0cmVhdCBpdCBhcyBhIG5hbWVkIHRlbXBsYXRlICh3aGljaCBpcyBhbGxvd2VkIGZvciByZXdyaXRpbmcpXG5cbiAgICAgICAgaWYgKGtvLmV4cHJlc3Npb25SZXdyaXRpbmcua2V5VmFsdWVBcnJheUNvbnRhaW5zS2V5KHBhcnNlZEJpbmRpbmdWYWx1ZSwgXCJuYW1lXCIpKVxuICAgICAgICAgICAgcmV0dXJuIG51bGw7IC8vIE5hbWVkIHRlbXBsYXRlcyBjYW4gYmUgcmV3cml0dGVuLCBzbyByZXR1cm4gXCJubyBlcnJvclwiXG4gICAgICAgIHJldHVybiBcIlRoaXMgdGVtcGxhdGUgZW5naW5lIGRvZXMgbm90IHN1cHBvcnQgYW5vbnltb3VzIHRlbXBsYXRlcyBuZXN0ZWQgd2l0aGluIGl0cyB0ZW1wbGF0ZXNcIjtcbiAgICB9O1xuXG4gICAga28udmlydHVhbEVsZW1lbnRzLmFsbG93ZWRCaW5kaW5nc1sndGVtcGxhdGUnXSA9IHRydWU7XG59KSgpO1xuXG5rby5leHBvcnRTeW1ib2woJ3NldFRlbXBsYXRlRW5naW5lJywga28uc2V0VGVtcGxhdGVFbmdpbmUpO1xua28uZXhwb3J0U3ltYm9sKCdyZW5kZXJUZW1wbGF0ZScsIGtvLnJlbmRlclRlbXBsYXRlKTtcbi8vIEdvIHRocm91Z2ggdGhlIGl0ZW1zIHRoYXQgaGF2ZSBiZWVuIGFkZGVkIGFuZCBkZWxldGVkIGFuZCB0cnkgdG8gZmluZCBtYXRjaGVzIGJldHdlZW4gdGhlbS5cbmtvLnV0aWxzLmZpbmRNb3Zlc0luQXJyYXlDb21wYXJpc29uID0gZnVuY3Rpb24gKGxlZnQsIHJpZ2h0LCBsaW1pdEZhaWxlZENvbXBhcmVzKSB7XG4gICAgaWYgKGxlZnQubGVuZ3RoICYmIHJpZ2h0Lmxlbmd0aCkge1xuICAgICAgICB2YXIgZmFpbGVkQ29tcGFyZXMsIGwsIHIsIGxlZnRJdGVtLCByaWdodEl0ZW07XG4gICAgICAgIGZvciAoZmFpbGVkQ29tcGFyZXMgPSBsID0gMDsgKCFsaW1pdEZhaWxlZENvbXBhcmVzIHx8IGZhaWxlZENvbXBhcmVzIDwgbGltaXRGYWlsZWRDb21wYXJlcykgJiYgKGxlZnRJdGVtID0gbGVmdFtsXSk7ICsrbCkge1xuICAgICAgICAgICAgZm9yIChyID0gMDsgcmlnaHRJdGVtID0gcmlnaHRbcl07ICsrcikge1xuICAgICAgICAgICAgICAgIGlmIChsZWZ0SXRlbVsndmFsdWUnXSA9PT0gcmlnaHRJdGVtWyd2YWx1ZSddKSB7XG4gICAgICAgICAgICAgICAgICAgIGxlZnRJdGVtWydtb3ZlZCddID0gcmlnaHRJdGVtWydpbmRleCddO1xuICAgICAgICAgICAgICAgICAgICByaWdodEl0ZW1bJ21vdmVkJ10gPSBsZWZ0SXRlbVsnaW5kZXgnXTtcbiAgICAgICAgICAgICAgICAgICAgcmlnaHQuc3BsaWNlKHIsIDEpOyAgICAgICAgIC8vIFRoaXMgaXRlbSBpcyBtYXJrZWQgYXMgbW92ZWQ7IHNvIHJlbW92ZSBpdCBmcm9tIHJpZ2h0IGxpc3RcbiAgICAgICAgICAgICAgICAgICAgZmFpbGVkQ29tcGFyZXMgPSByID0gMDsgICAgIC8vIFJlc2V0IGZhaWxlZCBjb21wYXJlcyBjb3VudCBiZWNhdXNlIHdlJ3JlIGNoZWNraW5nIGZvciBjb25zZWN1dGl2ZSBmYWlsdXJlc1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBmYWlsZWRDb21wYXJlcyArPSByO1xuICAgICAgICB9XG4gICAgfVxufTtcblxua28udXRpbHMuY29tcGFyZUFycmF5cyA9IChmdW5jdGlvbiAoKSB7XG4gICAgdmFyIHN0YXR1c05vdEluT2xkID0gJ2FkZGVkJywgc3RhdHVzTm90SW5OZXcgPSAnZGVsZXRlZCc7XG5cbiAgICAvLyBTaW1wbGUgY2FsY3VsYXRpb24gYmFzZWQgb24gTGV2ZW5zaHRlaW4gZGlzdGFuY2UuXG4gICAgZnVuY3Rpb24gY29tcGFyZUFycmF5cyhvbGRBcnJheSwgbmV3QXJyYXksIG9wdGlvbnMpIHtcbiAgICAgICAgLy8gRm9yIGJhY2t3YXJkIGNvbXBhdGliaWxpdHksIGlmIHRoZSB0aGlyZCBhcmcgaXMgYWN0dWFsbHkgYSBib29sLCBpbnRlcnByZXRcbiAgICAgICAgLy8gaXQgYXMgdGhlIG9sZCBwYXJhbWV0ZXIgJ2RvbnRMaW1pdE1vdmVzJy4gTmV3ZXIgY29kZSBzaG91bGQgdXNlIHsgZG9udExpbWl0TW92ZXM6IHRydWUgfS5cbiAgICAgICAgb3B0aW9ucyA9ICh0eXBlb2Ygb3B0aW9ucyA9PT0gJ2Jvb2xlYW4nKSA/IHsgJ2RvbnRMaW1pdE1vdmVzJzogb3B0aW9ucyB9IDogKG9wdGlvbnMgfHwge30pO1xuICAgICAgICBvbGRBcnJheSA9IG9sZEFycmF5IHx8IFtdO1xuICAgICAgICBuZXdBcnJheSA9IG5ld0FycmF5IHx8IFtdO1xuXG4gICAgICAgIGlmIChvbGRBcnJheS5sZW5ndGggPCBuZXdBcnJheS5sZW5ndGgpXG4gICAgICAgICAgICByZXR1cm4gY29tcGFyZVNtYWxsQXJyYXlUb0JpZ0FycmF5KG9sZEFycmF5LCBuZXdBcnJheSwgc3RhdHVzTm90SW5PbGQsIHN0YXR1c05vdEluTmV3LCBvcHRpb25zKTtcbiAgICAgICAgZWxzZVxuICAgICAgICAgICAgcmV0dXJuIGNvbXBhcmVTbWFsbEFycmF5VG9CaWdBcnJheShuZXdBcnJheSwgb2xkQXJyYXksIHN0YXR1c05vdEluTmV3LCBzdGF0dXNOb3RJbk9sZCwgb3B0aW9ucyk7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gY29tcGFyZVNtYWxsQXJyYXlUb0JpZ0FycmF5KHNtbEFycmF5LCBiaWdBcnJheSwgc3RhdHVzTm90SW5TbWwsIHN0YXR1c05vdEluQmlnLCBvcHRpb25zKSB7XG4gICAgICAgIHZhciBteU1pbiA9IE1hdGgubWluLFxuICAgICAgICAgICAgbXlNYXggPSBNYXRoLm1heCxcbiAgICAgICAgICAgIGVkaXREaXN0YW5jZU1hdHJpeCA9IFtdLFxuICAgICAgICAgICAgc21sSW5kZXgsIHNtbEluZGV4TWF4ID0gc21sQXJyYXkubGVuZ3RoLFxuICAgICAgICAgICAgYmlnSW5kZXgsIGJpZ0luZGV4TWF4ID0gYmlnQXJyYXkubGVuZ3RoLFxuICAgICAgICAgICAgY29tcGFyZVJhbmdlID0gKGJpZ0luZGV4TWF4IC0gc21sSW5kZXhNYXgpIHx8IDEsXG4gICAgICAgICAgICBtYXhEaXN0YW5jZSA9IHNtbEluZGV4TWF4ICsgYmlnSW5kZXhNYXggKyAxLFxuICAgICAgICAgICAgdGhpc1JvdywgbGFzdFJvdyxcbiAgICAgICAgICAgIGJpZ0luZGV4TWF4Rm9yUm93LCBiaWdJbmRleE1pbkZvclJvdztcblxuICAgICAgICBmb3IgKHNtbEluZGV4ID0gMDsgc21sSW5kZXggPD0gc21sSW5kZXhNYXg7IHNtbEluZGV4KyspIHtcbiAgICAgICAgICAgIGxhc3RSb3cgPSB0aGlzUm93O1xuICAgICAgICAgICAgZWRpdERpc3RhbmNlTWF0cml4LnB1c2godGhpc1JvdyA9IFtdKTtcbiAgICAgICAgICAgIGJpZ0luZGV4TWF4Rm9yUm93ID0gbXlNaW4oYmlnSW5kZXhNYXgsIHNtbEluZGV4ICsgY29tcGFyZVJhbmdlKTtcbiAgICAgICAgICAgIGJpZ0luZGV4TWluRm9yUm93ID0gbXlNYXgoMCwgc21sSW5kZXggLSAxKTtcbiAgICAgICAgICAgIGZvciAoYmlnSW5kZXggPSBiaWdJbmRleE1pbkZvclJvdzsgYmlnSW5kZXggPD0gYmlnSW5kZXhNYXhGb3JSb3c7IGJpZ0luZGV4KyspIHtcbiAgICAgICAgICAgICAgICBpZiAoIWJpZ0luZGV4KVxuICAgICAgICAgICAgICAgICAgICB0aGlzUm93W2JpZ0luZGV4XSA9IHNtbEluZGV4ICsgMTtcbiAgICAgICAgICAgICAgICBlbHNlIGlmICghc21sSW5kZXgpICAvLyBUb3Agcm93IC0gdHJhbnNmb3JtIGVtcHR5IGFycmF5IGludG8gbmV3IGFycmF5IHZpYSBhZGRpdGlvbnNcbiAgICAgICAgICAgICAgICAgICAgdGhpc1Jvd1tiaWdJbmRleF0gPSBiaWdJbmRleCArIDE7XG4gICAgICAgICAgICAgICAgZWxzZSBpZiAoc21sQXJyYXlbc21sSW5kZXggLSAxXSA9PT0gYmlnQXJyYXlbYmlnSW5kZXggLSAxXSlcbiAgICAgICAgICAgICAgICAgICAgdGhpc1Jvd1tiaWdJbmRleF0gPSBsYXN0Um93W2JpZ0luZGV4IC0gMV07ICAgICAgICAgICAgICAgICAgLy8gY29weSB2YWx1ZSAobm8gZWRpdClcbiAgICAgICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgdmFyIG5vcnRoRGlzdGFuY2UgPSBsYXN0Um93W2JpZ0luZGV4XSB8fCBtYXhEaXN0YW5jZTsgICAgICAgLy8gbm90IGluIGJpZyAoZGVsZXRpb24pXG4gICAgICAgICAgICAgICAgICAgIHZhciB3ZXN0RGlzdGFuY2UgPSB0aGlzUm93W2JpZ0luZGV4IC0gMV0gfHwgbWF4RGlzdGFuY2U7ICAgIC8vIG5vdCBpbiBzbWFsbCAoYWRkaXRpb24pXG4gICAgICAgICAgICAgICAgICAgIHRoaXNSb3dbYmlnSW5kZXhdID0gbXlNaW4obm9ydGhEaXN0YW5jZSwgd2VzdERpc3RhbmNlKSArIDE7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgdmFyIGVkaXRTY3JpcHQgPSBbXSwgbWVNaW51c09uZSwgbm90SW5TbWwgPSBbXSwgbm90SW5CaWcgPSBbXTtcbiAgICAgICAgZm9yIChzbWxJbmRleCA9IHNtbEluZGV4TWF4LCBiaWdJbmRleCA9IGJpZ0luZGV4TWF4OyBzbWxJbmRleCB8fCBiaWdJbmRleDspIHtcbiAgICAgICAgICAgIG1lTWludXNPbmUgPSBlZGl0RGlzdGFuY2VNYXRyaXhbc21sSW5kZXhdW2JpZ0luZGV4XSAtIDE7XG4gICAgICAgICAgICBpZiAoYmlnSW5kZXggJiYgbWVNaW51c09uZSA9PT0gZWRpdERpc3RhbmNlTWF0cml4W3NtbEluZGV4XVtiaWdJbmRleC0xXSkge1xuICAgICAgICAgICAgICAgIG5vdEluU21sLnB1c2goZWRpdFNjcmlwdFtlZGl0U2NyaXB0Lmxlbmd0aF0gPSB7ICAgICAvLyBhZGRlZFxuICAgICAgICAgICAgICAgICAgICAnc3RhdHVzJzogc3RhdHVzTm90SW5TbWwsXG4gICAgICAgICAgICAgICAgICAgICd2YWx1ZSc6IGJpZ0FycmF5Wy0tYmlnSW5kZXhdLFxuICAgICAgICAgICAgICAgICAgICAnaW5kZXgnOiBiaWdJbmRleCB9KTtcbiAgICAgICAgICAgIH0gZWxzZSBpZiAoc21sSW5kZXggJiYgbWVNaW51c09uZSA9PT0gZWRpdERpc3RhbmNlTWF0cml4W3NtbEluZGV4IC0gMV1bYmlnSW5kZXhdKSB7XG4gICAgICAgICAgICAgICAgbm90SW5CaWcucHVzaChlZGl0U2NyaXB0W2VkaXRTY3JpcHQubGVuZ3RoXSA9IHsgICAgIC8vIGRlbGV0ZWRcbiAgICAgICAgICAgICAgICAgICAgJ3N0YXR1cyc6IHN0YXR1c05vdEluQmlnLFxuICAgICAgICAgICAgICAgICAgICAndmFsdWUnOiBzbWxBcnJheVstLXNtbEluZGV4XSxcbiAgICAgICAgICAgICAgICAgICAgJ2luZGV4Jzogc21sSW5kZXggfSk7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIC0tYmlnSW5kZXg7XG4gICAgICAgICAgICAgICAgLS1zbWxJbmRleDtcbiAgICAgICAgICAgICAgICBpZiAoIW9wdGlvbnNbJ3NwYXJzZSddKSB7XG4gICAgICAgICAgICAgICAgICAgIGVkaXRTY3JpcHQucHVzaCh7XG4gICAgICAgICAgICAgICAgICAgICAgICAnc3RhdHVzJzogXCJyZXRhaW5lZFwiLFxuICAgICAgICAgICAgICAgICAgICAgICAgJ3ZhbHVlJzogYmlnQXJyYXlbYmlnSW5kZXhdIH0pO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIC8vIFNldCBhIGxpbWl0IG9uIHRoZSBudW1iZXIgb2YgY29uc2VjdXRpdmUgbm9uLW1hdGNoaW5nIGNvbXBhcmlzb25zOyBoYXZpbmcgaXQgYSBtdWx0aXBsZSBvZlxuICAgICAgICAvLyBzbWxJbmRleE1heCBrZWVwcyB0aGUgdGltZSBjb21wbGV4aXR5IG9mIHRoaXMgYWxnb3JpdGhtIGxpbmVhci5cbiAgICAgICAga28udXRpbHMuZmluZE1vdmVzSW5BcnJheUNvbXBhcmlzb24obm90SW5CaWcsIG5vdEluU21sLCAhb3B0aW9uc1snZG9udExpbWl0TW92ZXMnXSAmJiBzbWxJbmRleE1heCAqIDEwKTtcblxuICAgICAgICByZXR1cm4gZWRpdFNjcmlwdC5yZXZlcnNlKCk7XG4gICAgfVxuXG4gICAgcmV0dXJuIGNvbXBhcmVBcnJheXM7XG59KSgpO1xuXG5rby5leHBvcnRTeW1ib2woJ3V0aWxzLmNvbXBhcmVBcnJheXMnLCBrby51dGlscy5jb21wYXJlQXJyYXlzKTtcbihmdW5jdGlvbiAoKSB7XG4gICAgLy8gT2JqZWN0aXZlOlxuICAgIC8vICogR2l2ZW4gYW4gaW5wdXQgYXJyYXksIGEgY29udGFpbmVyIERPTSBub2RlLCBhbmQgYSBmdW5jdGlvbiBmcm9tIGFycmF5IGVsZW1lbnRzIHRvIGFycmF5cyBvZiBET00gbm9kZXMsXG4gICAgLy8gICBtYXAgdGhlIGFycmF5IGVsZW1lbnRzIHRvIGFycmF5cyBvZiBET00gbm9kZXMsIGNvbmNhdGVuYXRlIHRvZ2V0aGVyIGFsbCB0aGVzZSBhcnJheXMsIGFuZCB1c2UgdGhlbSB0byBwb3B1bGF0ZSB0aGUgY29udGFpbmVyIERPTSBub2RlXG4gICAgLy8gKiBOZXh0IHRpbWUgd2UncmUgZ2l2ZW4gdGhlIHNhbWUgY29tYmluYXRpb24gb2YgdGhpbmdzICh3aXRoIHRoZSBhcnJheSBwb3NzaWJseSBoYXZpbmcgbXV0YXRlZCksIHVwZGF0ZSB0aGUgY29udGFpbmVyIERPTSBub2RlXG4gICAgLy8gICBzbyB0aGF0IGl0cyBjaGlsZHJlbiBpcyBhZ2FpbiB0aGUgY29uY2F0ZW5hdGlvbiBvZiB0aGUgbWFwcGluZ3Mgb2YgdGhlIGFycmF5IGVsZW1lbnRzLCBidXQgZG9uJ3QgcmUtbWFwIGFueSBhcnJheSBlbGVtZW50cyB0aGF0IHdlXG4gICAgLy8gICBwcmV2aW91c2x5IG1hcHBlZCAtIHJldGFpbiB0aG9zZSBub2RlcywgYW5kIGp1c3QgaW5zZXJ0L2RlbGV0ZSBvdGhlciBvbmVzXG5cbiAgICAvLyBcImNhbGxiYWNrQWZ0ZXJBZGRpbmdOb2Rlc1wiIHdpbGwgYmUgaW52b2tlZCBhZnRlciBhbnkgXCJtYXBwaW5nXCItZ2VuZXJhdGVkIG5vZGVzIGFyZSBpbnNlcnRlZCBpbnRvIHRoZSBjb250YWluZXIgbm9kZVxuICAgIC8vIFlvdSBjYW4gdXNlIHRoaXMsIGZvciBleGFtcGxlLCB0byBhY3RpdmF0ZSBiaW5kaW5ncyBvbiB0aG9zZSBub2Rlcy5cblxuICAgIGZ1bmN0aW9uIG1hcE5vZGVBbmRSZWZyZXNoV2hlbkNoYW5nZWQoY29udGFpbmVyTm9kZSwgbWFwcGluZywgdmFsdWVUb01hcCwgY2FsbGJhY2tBZnRlckFkZGluZ05vZGVzLCBpbmRleCkge1xuICAgICAgICAvLyBNYXAgdGhpcyBhcnJheSB2YWx1ZSBpbnNpZGUgYSBkZXBlbmRlbnRPYnNlcnZhYmxlIHNvIHdlIHJlLW1hcCB3aGVuIGFueSBkZXBlbmRlbmN5IGNoYW5nZXNcbiAgICAgICAgdmFyIG1hcHBlZE5vZGVzID0gW107XG4gICAgICAgIHZhciBkZXBlbmRlbnRPYnNlcnZhYmxlID0ga28uZGVwZW5kZW50T2JzZXJ2YWJsZShmdW5jdGlvbigpIHtcbiAgICAgICAgICAgIHZhciBuZXdNYXBwZWROb2RlcyA9IG1hcHBpbmcodmFsdWVUb01hcCwgaW5kZXgsIGtvLnV0aWxzLmZpeFVwQ29udGludW91c05vZGVBcnJheShtYXBwZWROb2RlcywgY29udGFpbmVyTm9kZSkpIHx8IFtdO1xuXG4gICAgICAgICAgICAvLyBPbiBzdWJzZXF1ZW50IGV2YWx1YXRpb25zLCBqdXN0IHJlcGxhY2UgdGhlIHByZXZpb3VzbHktaW5zZXJ0ZWQgRE9NIG5vZGVzXG4gICAgICAgICAgICBpZiAobWFwcGVkTm9kZXMubGVuZ3RoID4gMCkge1xuICAgICAgICAgICAgICAgIGtvLnV0aWxzLnJlcGxhY2VEb21Ob2RlcyhtYXBwZWROb2RlcywgbmV3TWFwcGVkTm9kZXMpO1xuICAgICAgICAgICAgICAgIGlmIChjYWxsYmFja0FmdGVyQWRkaW5nTm9kZXMpXG4gICAgICAgICAgICAgICAgICAgIGtvLmRlcGVuZGVuY3lEZXRlY3Rpb24uaWdub3JlKGNhbGxiYWNrQWZ0ZXJBZGRpbmdOb2RlcywgbnVsbCwgW3ZhbHVlVG9NYXAsIG5ld01hcHBlZE5vZGVzLCBpbmRleF0pO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAvLyBSZXBsYWNlIHRoZSBjb250ZW50cyBvZiB0aGUgbWFwcGVkTm9kZXMgYXJyYXksIHRoZXJlYnkgdXBkYXRpbmcgdGhlIHJlY29yZFxuICAgICAgICAgICAgLy8gb2Ygd2hpY2ggbm9kZXMgd291bGQgYmUgZGVsZXRlZCBpZiB2YWx1ZVRvTWFwIHdhcyBpdHNlbGYgbGF0ZXIgcmVtb3ZlZFxuICAgICAgICAgICAgbWFwcGVkTm9kZXMubGVuZ3RoID0gMDtcbiAgICAgICAgICAgIGtvLnV0aWxzLmFycmF5UHVzaEFsbChtYXBwZWROb2RlcywgbmV3TWFwcGVkTm9kZXMpO1xuICAgICAgICB9LCBudWxsLCB7IGRpc3Bvc2VXaGVuTm9kZUlzUmVtb3ZlZDogY29udGFpbmVyTm9kZSwgZGlzcG9zZVdoZW46IGZ1bmN0aW9uKCkgeyByZXR1cm4gIWtvLnV0aWxzLmFueURvbU5vZGVJc0F0dGFjaGVkVG9Eb2N1bWVudChtYXBwZWROb2Rlcyk7IH0gfSk7XG4gICAgICAgIHJldHVybiB7IG1hcHBlZE5vZGVzIDogbWFwcGVkTm9kZXMsIGRlcGVuZGVudE9ic2VydmFibGUgOiAoZGVwZW5kZW50T2JzZXJ2YWJsZS5pc0FjdGl2ZSgpID8gZGVwZW5kZW50T2JzZXJ2YWJsZSA6IHVuZGVmaW5lZCkgfTtcbiAgICB9XG5cbiAgICB2YXIgbGFzdE1hcHBpbmdSZXN1bHREb21EYXRhS2V5ID0ga28udXRpbHMuZG9tRGF0YS5uZXh0S2V5KCksXG4gICAgICAgIGRlbGV0ZWRJdGVtRHVtbXlWYWx1ZSA9IGtvLnV0aWxzLmRvbURhdGEubmV4dEtleSgpO1xuXG4gICAga28udXRpbHMuc2V0RG9tTm9kZUNoaWxkcmVuRnJvbUFycmF5TWFwcGluZyA9IGZ1bmN0aW9uIChkb21Ob2RlLCBhcnJheSwgbWFwcGluZywgb3B0aW9ucywgY2FsbGJhY2tBZnRlckFkZGluZ05vZGVzKSB7XG4gICAgICAgIC8vIENvbXBhcmUgdGhlIHByb3ZpZGVkIGFycmF5IGFnYWluc3QgdGhlIHByZXZpb3VzIG9uZVxuICAgICAgICBhcnJheSA9IGFycmF5IHx8IFtdO1xuICAgICAgICBvcHRpb25zID0gb3B0aW9ucyB8fCB7fTtcbiAgICAgICAgdmFyIGlzRmlyc3RFeGVjdXRpb24gPSBrby51dGlscy5kb21EYXRhLmdldChkb21Ob2RlLCBsYXN0TWFwcGluZ1Jlc3VsdERvbURhdGFLZXkpID09PSB1bmRlZmluZWQ7XG4gICAgICAgIHZhciBsYXN0TWFwcGluZ1Jlc3VsdCA9IGtvLnV0aWxzLmRvbURhdGEuZ2V0KGRvbU5vZGUsIGxhc3RNYXBwaW5nUmVzdWx0RG9tRGF0YUtleSkgfHwgW107XG4gICAgICAgIHZhciBsYXN0QXJyYXkgPSBrby51dGlscy5hcnJheU1hcChsYXN0TWFwcGluZ1Jlc3VsdCwgZnVuY3Rpb24gKHgpIHsgcmV0dXJuIHguYXJyYXlFbnRyeTsgfSk7XG4gICAgICAgIHZhciBlZGl0U2NyaXB0ID0ga28udXRpbHMuY29tcGFyZUFycmF5cyhsYXN0QXJyYXksIGFycmF5LCBvcHRpb25zWydkb250TGltaXRNb3ZlcyddKTtcblxuICAgICAgICAvLyBCdWlsZCB0aGUgbmV3IG1hcHBpbmcgcmVzdWx0XG4gICAgICAgIHZhciBuZXdNYXBwaW5nUmVzdWx0ID0gW107XG4gICAgICAgIHZhciBsYXN0TWFwcGluZ1Jlc3VsdEluZGV4ID0gMDtcbiAgICAgICAgdmFyIG5ld01hcHBpbmdSZXN1bHRJbmRleCA9IDA7XG5cbiAgICAgICAgdmFyIG5vZGVzVG9EZWxldGUgPSBbXTtcbiAgICAgICAgdmFyIGl0ZW1zVG9Qcm9jZXNzID0gW107XG4gICAgICAgIHZhciBpdGVtc0ZvckJlZm9yZVJlbW92ZUNhbGxiYWNrcyA9IFtdO1xuICAgICAgICB2YXIgaXRlbXNGb3JNb3ZlQ2FsbGJhY2tzID0gW107XG4gICAgICAgIHZhciBpdGVtc0ZvckFmdGVyQWRkQ2FsbGJhY2tzID0gW107XG4gICAgICAgIHZhciBtYXBEYXRhO1xuXG4gICAgICAgIGZ1bmN0aW9uIGl0ZW1Nb3ZlZE9yUmV0YWluZWQoZWRpdFNjcmlwdEluZGV4LCBvbGRQb3NpdGlvbikge1xuICAgICAgICAgICAgbWFwRGF0YSA9IGxhc3RNYXBwaW5nUmVzdWx0W29sZFBvc2l0aW9uXTtcbiAgICAgICAgICAgIGlmIChuZXdNYXBwaW5nUmVzdWx0SW5kZXggIT09IG9sZFBvc2l0aW9uKVxuICAgICAgICAgICAgICAgIGl0ZW1zRm9yTW92ZUNhbGxiYWNrc1tlZGl0U2NyaXB0SW5kZXhdID0gbWFwRGF0YTtcbiAgICAgICAgICAgIC8vIFNpbmNlIHVwZGF0aW5nIHRoZSBpbmRleCBtaWdodCBjaGFuZ2UgdGhlIG5vZGVzLCBkbyBzbyBiZWZvcmUgY2FsbGluZyBmaXhVcENvbnRpbnVvdXNOb2RlQXJyYXlcbiAgICAgICAgICAgIG1hcERhdGEuaW5kZXhPYnNlcnZhYmxlKG5ld01hcHBpbmdSZXN1bHRJbmRleCsrKTtcbiAgICAgICAgICAgIGtvLnV0aWxzLmZpeFVwQ29udGludW91c05vZGVBcnJheShtYXBEYXRhLm1hcHBlZE5vZGVzLCBkb21Ob2RlKTtcbiAgICAgICAgICAgIG5ld01hcHBpbmdSZXN1bHQucHVzaChtYXBEYXRhKTtcbiAgICAgICAgICAgIGl0ZW1zVG9Qcm9jZXNzLnB1c2gobWFwRGF0YSk7XG4gICAgICAgIH1cblxuICAgICAgICBmdW5jdGlvbiBjYWxsQ2FsbGJhY2soY2FsbGJhY2ssIGl0ZW1zKSB7XG4gICAgICAgICAgICBpZiAoY2FsbGJhY2spIHtcbiAgICAgICAgICAgICAgICBmb3IgKHZhciBpID0gMCwgbiA9IGl0ZW1zLmxlbmd0aDsgaSA8IG47IGkrKykge1xuICAgICAgICAgICAgICAgICAgICBpZiAoaXRlbXNbaV0pIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGtvLnV0aWxzLmFycmF5Rm9yRWFjaChpdGVtc1tpXS5tYXBwZWROb2RlcywgZnVuY3Rpb24obm9kZSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNhbGxiYWNrKG5vZGUsIGksIGl0ZW1zW2ldLmFycmF5RW50cnkpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICBmb3IgKHZhciBpID0gMCwgZWRpdFNjcmlwdEl0ZW0sIG1vdmVkSW5kZXg7IGVkaXRTY3JpcHRJdGVtID0gZWRpdFNjcmlwdFtpXTsgaSsrKSB7XG4gICAgICAgICAgICBtb3ZlZEluZGV4ID0gZWRpdFNjcmlwdEl0ZW1bJ21vdmVkJ107XG4gICAgICAgICAgICBzd2l0Y2ggKGVkaXRTY3JpcHRJdGVtWydzdGF0dXMnXSkge1xuICAgICAgICAgICAgICAgIGNhc2UgXCJkZWxldGVkXCI6XG4gICAgICAgICAgICAgICAgICAgIGlmIChtb3ZlZEluZGV4ID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIG1hcERhdGEgPSBsYXN0TWFwcGluZ1Jlc3VsdFtsYXN0TWFwcGluZ1Jlc3VsdEluZGV4XTtcblxuICAgICAgICAgICAgICAgICAgICAgICAgLy8gU3RvcCB0cmFja2luZyBjaGFuZ2VzIHRvIHRoZSBtYXBwaW5nIGZvciB0aGVzZSBub2Rlc1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKG1hcERhdGEuZGVwZW5kZW50T2JzZXJ2YWJsZSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG1hcERhdGEuZGVwZW5kZW50T2JzZXJ2YWJsZS5kaXNwb3NlKCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbWFwRGF0YS5kZXBlbmRlbnRPYnNlcnZhYmxlID0gdW5kZWZpbmVkO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBRdWV1ZSB0aGVzZSBub2RlcyBmb3IgbGF0ZXIgcmVtb3ZhbFxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGtvLnV0aWxzLmZpeFVwQ29udGludW91c05vZGVBcnJheShtYXBEYXRhLm1hcHBlZE5vZGVzLCBkb21Ob2RlKS5sZW5ndGgpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAob3B0aW9uc1snYmVmb3JlUmVtb3ZlJ10pIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbmV3TWFwcGluZ1Jlc3VsdC5wdXNoKG1hcERhdGEpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpdGVtc1RvUHJvY2Vzcy5wdXNoKG1hcERhdGEpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAobWFwRGF0YS5hcnJheUVudHJ5ID09PSBkZWxldGVkSXRlbUR1bW15VmFsdWUpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG1hcERhdGEgPSBudWxsO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaXRlbXNGb3JCZWZvcmVSZW1vdmVDYWxsYmFja3NbaV0gPSBtYXBEYXRhO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChtYXBEYXRhKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG5vZGVzVG9EZWxldGUucHVzaC5hcHBseShub2Rlc1RvRGVsZXRlLCBtYXBEYXRhLm1hcHBlZE5vZGVzKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgbGFzdE1hcHBpbmdSZXN1bHRJbmRleCsrO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcblxuICAgICAgICAgICAgICAgIGNhc2UgXCJyZXRhaW5lZFwiOlxuICAgICAgICAgICAgICAgICAgICBpdGVtTW92ZWRPclJldGFpbmVkKGksIGxhc3RNYXBwaW5nUmVzdWx0SW5kZXgrKyk7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgICAgICAgICAgY2FzZSBcImFkZGVkXCI6XG4gICAgICAgICAgICAgICAgICAgIGlmIChtb3ZlZEluZGV4ICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGl0ZW1Nb3ZlZE9yUmV0YWluZWQoaSwgbW92ZWRJbmRleCk7XG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBtYXBEYXRhID0geyBhcnJheUVudHJ5OiBlZGl0U2NyaXB0SXRlbVsndmFsdWUnXSwgaW5kZXhPYnNlcnZhYmxlOiBrby5vYnNlcnZhYmxlKG5ld01hcHBpbmdSZXN1bHRJbmRleCsrKSB9O1xuICAgICAgICAgICAgICAgICAgICAgICAgbmV3TWFwcGluZ1Jlc3VsdC5wdXNoKG1hcERhdGEpO1xuICAgICAgICAgICAgICAgICAgICAgICAgaXRlbXNUb1Byb2Nlc3MucHVzaChtYXBEYXRhKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICghaXNGaXJzdEV4ZWN1dGlvbilcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpdGVtc0ZvckFmdGVyQWRkQ2FsbGJhY2tzW2ldID0gbWFwRGF0YTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIC8vIFN0b3JlIGEgY29weSBvZiB0aGUgYXJyYXkgaXRlbXMgd2UganVzdCBjb25zaWRlcmVkIHNvIHdlIGNhbiBkaWZmZXJlbmNlIGl0IG5leHQgdGltZVxuICAgICAgICBrby51dGlscy5kb21EYXRhLnNldChkb21Ob2RlLCBsYXN0TWFwcGluZ1Jlc3VsdERvbURhdGFLZXksIG5ld01hcHBpbmdSZXN1bHQpO1xuXG4gICAgICAgIC8vIENhbGwgYmVmb3JlTW92ZSBmaXJzdCBiZWZvcmUgYW55IGNoYW5nZXMgaGF2ZSBiZWVuIG1hZGUgdG8gdGhlIERPTVxuICAgICAgICBjYWxsQ2FsbGJhY2sob3B0aW9uc1snYmVmb3JlTW92ZSddLCBpdGVtc0Zvck1vdmVDYWxsYmFja3MpO1xuXG4gICAgICAgIC8vIE5leHQgcmVtb3ZlIG5vZGVzIGZvciBkZWxldGVkIGl0ZW1zIChvciBqdXN0IGNsZWFuIGlmIHRoZXJlJ3MgYSBiZWZvcmVSZW1vdmUgY2FsbGJhY2spXG4gICAgICAgIGtvLnV0aWxzLmFycmF5Rm9yRWFjaChub2Rlc1RvRGVsZXRlLCBvcHRpb25zWydiZWZvcmVSZW1vdmUnXSA/IGtvLmNsZWFuTm9kZSA6IGtvLnJlbW92ZU5vZGUpO1xuXG4gICAgICAgIC8vIE5leHQgYWRkL3Jlb3JkZXIgdGhlIHJlbWFpbmluZyBpdGVtcyAod2lsbCBpbmNsdWRlIGRlbGV0ZWQgaXRlbXMgaWYgdGhlcmUncyBhIGJlZm9yZVJlbW92ZSBjYWxsYmFjaylcbiAgICAgICAgZm9yICh2YXIgaSA9IDAsIG5leHROb2RlID0ga28udmlydHVhbEVsZW1lbnRzLmZpcnN0Q2hpbGQoZG9tTm9kZSksIGxhc3ROb2RlLCBub2RlOyBtYXBEYXRhID0gaXRlbXNUb1Byb2Nlc3NbaV07IGkrKykge1xuICAgICAgICAgICAgLy8gR2V0IG5vZGVzIGZvciBuZXdseSBhZGRlZCBpdGVtc1xuICAgICAgICAgICAgaWYgKCFtYXBEYXRhLm1hcHBlZE5vZGVzKVxuICAgICAgICAgICAgICAgIGtvLnV0aWxzLmV4dGVuZChtYXBEYXRhLCBtYXBOb2RlQW5kUmVmcmVzaFdoZW5DaGFuZ2VkKGRvbU5vZGUsIG1hcHBpbmcsIG1hcERhdGEuYXJyYXlFbnRyeSwgY2FsbGJhY2tBZnRlckFkZGluZ05vZGVzLCBtYXBEYXRhLmluZGV4T2JzZXJ2YWJsZSkpO1xuXG4gICAgICAgICAgICAvLyBQdXQgbm9kZXMgaW4gdGhlIHJpZ2h0IHBsYWNlIGlmIHRoZXkgYXJlbid0IHRoZXJlIGFscmVhZHlcbiAgICAgICAgICAgIGZvciAodmFyIGogPSAwOyBub2RlID0gbWFwRGF0YS5tYXBwZWROb2Rlc1tqXTsgbmV4dE5vZGUgPSBub2RlLm5leHRTaWJsaW5nLCBsYXN0Tm9kZSA9IG5vZGUsIGorKykge1xuICAgICAgICAgICAgICAgIGlmIChub2RlICE9PSBuZXh0Tm9kZSlcbiAgICAgICAgICAgICAgICAgICAga28udmlydHVhbEVsZW1lbnRzLmluc2VydEFmdGVyKGRvbU5vZGUsIG5vZGUsIGxhc3ROb2RlKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgLy8gUnVuIHRoZSBjYWxsYmFja3MgZm9yIG5ld2x5IGFkZGVkIG5vZGVzIChmb3IgZXhhbXBsZSwgdG8gYXBwbHkgYmluZGluZ3MsIGV0Yy4pXG4gICAgICAgICAgICBpZiAoIW1hcERhdGEuaW5pdGlhbGl6ZWQgJiYgY2FsbGJhY2tBZnRlckFkZGluZ05vZGVzKSB7XG4gICAgICAgICAgICAgICAgY2FsbGJhY2tBZnRlckFkZGluZ05vZGVzKG1hcERhdGEuYXJyYXlFbnRyeSwgbWFwRGF0YS5tYXBwZWROb2RlcywgbWFwRGF0YS5pbmRleE9ic2VydmFibGUpO1xuICAgICAgICAgICAgICAgIG1hcERhdGEuaW5pdGlhbGl6ZWQgPSB0cnVlO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgLy8gSWYgdGhlcmUncyBhIGJlZm9yZVJlbW92ZSBjYWxsYmFjaywgY2FsbCBpdCBhZnRlciByZW9yZGVyaW5nLlxuICAgICAgICAvLyBOb3RlIHRoYXQgd2UgYXNzdW1lIHRoYXQgdGhlIGJlZm9yZVJlbW92ZSBjYWxsYmFjayB3aWxsIHVzdWFsbHkgYmUgdXNlZCB0byByZW1vdmUgdGhlIG5vZGVzIHVzaW5nXG4gICAgICAgIC8vIHNvbWUgc29ydCBvZiBhbmltYXRpb24sIHdoaWNoIGlzIHdoeSB3ZSBmaXJzdCByZW9yZGVyIHRoZSBub2RlcyB0aGF0IHdpbGwgYmUgcmVtb3ZlZC4gSWYgdGhlXG4gICAgICAgIC8vIGNhbGxiYWNrIGluc3RlYWQgcmVtb3ZlcyB0aGUgbm9kZXMgcmlnaHQgYXdheSwgaXQgd291bGQgYmUgbW9yZSBlZmZpY2llbnQgdG8gc2tpcCByZW9yZGVyaW5nIHRoZW0uXG4gICAgICAgIC8vIFBlcmhhcHMgd2UnbGwgbWFrZSB0aGF0IGNoYW5nZSBpbiB0aGUgZnV0dXJlIGlmIHRoaXMgc2NlbmFyaW8gYmVjb21lcyBtb3JlIGNvbW1vbi5cbiAgICAgICAgY2FsbENhbGxiYWNrKG9wdGlvbnNbJ2JlZm9yZVJlbW92ZSddLCBpdGVtc0ZvckJlZm9yZVJlbW92ZUNhbGxiYWNrcyk7XG5cbiAgICAgICAgLy8gUmVwbGFjZSB0aGUgc3RvcmVkIHZhbHVlcyBvZiBkZWxldGVkIGl0ZW1zIHdpdGggYSBkdW1teSB2YWx1ZS4gVGhpcyBwcm92aWRlcyB0d28gYmVuZWZpdHM6IGl0IG1hcmtzIHRoaXMgaXRlbVxuICAgICAgICAvLyBhcyBhbHJlYWR5IFwicmVtb3ZlZFwiIHNvIHdlIHdvbid0IGNhbGwgYmVmb3JlUmVtb3ZlIGZvciBpdCBhZ2FpbiwgYW5kIGl0IGVuc3VyZXMgdGhhdCB0aGUgaXRlbSB3b24ndCBtYXRjaCB1cFxuICAgICAgICAvLyB3aXRoIGFuIGFjdHVhbCBpdGVtIGluIHRoZSBhcnJheSBhbmQgYXBwZWFyIGFzIFwicmV0YWluZWRcIiBvciBcIm1vdmVkXCIuXG4gICAgICAgIGZvciAoaSA9IDA7IGkgPCBpdGVtc0ZvckJlZm9yZVJlbW92ZUNhbGxiYWNrcy5sZW5ndGg7ICsraSkge1xuICAgICAgICAgICAgaWYgKGl0ZW1zRm9yQmVmb3JlUmVtb3ZlQ2FsbGJhY2tzW2ldKSB7XG4gICAgICAgICAgICAgICAgaXRlbXNGb3JCZWZvcmVSZW1vdmVDYWxsYmFja3NbaV0uYXJyYXlFbnRyeSA9IGRlbGV0ZWRJdGVtRHVtbXlWYWx1ZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIC8vIEZpbmFsbHkgY2FsbCBhZnRlck1vdmUgYW5kIGFmdGVyQWRkIGNhbGxiYWNrc1xuICAgICAgICBjYWxsQ2FsbGJhY2sob3B0aW9uc1snYWZ0ZXJNb3ZlJ10sIGl0ZW1zRm9yTW92ZUNhbGxiYWNrcyk7XG4gICAgICAgIGNhbGxDYWxsYmFjayhvcHRpb25zWydhZnRlckFkZCddLCBpdGVtc0ZvckFmdGVyQWRkQ2FsbGJhY2tzKTtcbiAgICB9XG59KSgpO1xuXG5rby5leHBvcnRTeW1ib2woJ3V0aWxzLnNldERvbU5vZGVDaGlsZHJlbkZyb21BcnJheU1hcHBpbmcnLCBrby51dGlscy5zZXREb21Ob2RlQ2hpbGRyZW5Gcm9tQXJyYXlNYXBwaW5nKTtcbmtvLm5hdGl2ZVRlbXBsYXRlRW5naW5lID0gZnVuY3Rpb24gKCkge1xuICAgIHRoaXNbJ2FsbG93VGVtcGxhdGVSZXdyaXRpbmcnXSA9IGZhbHNlO1xufVxuXG5rby5uYXRpdmVUZW1wbGF0ZUVuZ2luZS5wcm90b3R5cGUgPSBuZXcga28udGVtcGxhdGVFbmdpbmUoKTtcbmtvLm5hdGl2ZVRlbXBsYXRlRW5naW5lLnByb3RvdHlwZS5jb25zdHJ1Y3RvciA9IGtvLm5hdGl2ZVRlbXBsYXRlRW5naW5lO1xua28ubmF0aXZlVGVtcGxhdGVFbmdpbmUucHJvdG90eXBlWydyZW5kZXJUZW1wbGF0ZVNvdXJjZSddID0gZnVuY3Rpb24gKHRlbXBsYXRlU291cmNlLCBiaW5kaW5nQ29udGV4dCwgb3B0aW9ucywgdGVtcGxhdGVEb2N1bWVudCkge1xuICAgIHZhciB1c2VOb2Rlc0lmQXZhaWxhYmxlID0gIShrby51dGlscy5pZVZlcnNpb24gPCA5KSwgLy8gSUU8OSBjbG9uZU5vZGUgZG9lc24ndCB3b3JrIHByb3Blcmx5XG4gICAgICAgIHRlbXBsYXRlTm9kZXNGdW5jID0gdXNlTm9kZXNJZkF2YWlsYWJsZSA/IHRlbXBsYXRlU291cmNlWydub2RlcyddIDogbnVsbCxcbiAgICAgICAgdGVtcGxhdGVOb2RlcyA9IHRlbXBsYXRlTm9kZXNGdW5jID8gdGVtcGxhdGVTb3VyY2VbJ25vZGVzJ10oKSA6IG51bGw7XG5cbiAgICBpZiAodGVtcGxhdGVOb2Rlcykge1xuICAgICAgICByZXR1cm4ga28udXRpbHMubWFrZUFycmF5KHRlbXBsYXRlTm9kZXMuY2xvbmVOb2RlKHRydWUpLmNoaWxkTm9kZXMpO1xuICAgIH0gZWxzZSB7XG4gICAgICAgIHZhciB0ZW1wbGF0ZVRleHQgPSB0ZW1wbGF0ZVNvdXJjZVsndGV4dCddKCk7XG4gICAgICAgIHJldHVybiBrby51dGlscy5wYXJzZUh0bWxGcmFnbWVudCh0ZW1wbGF0ZVRleHQsIHRlbXBsYXRlRG9jdW1lbnQpO1xuICAgIH1cbn07XG5cbmtvLm5hdGl2ZVRlbXBsYXRlRW5naW5lLmluc3RhbmNlID0gbmV3IGtvLm5hdGl2ZVRlbXBsYXRlRW5naW5lKCk7XG5rby5zZXRUZW1wbGF0ZUVuZ2luZShrby5uYXRpdmVUZW1wbGF0ZUVuZ2luZS5pbnN0YW5jZSk7XG5cbmtvLmV4cG9ydFN5bWJvbCgnbmF0aXZlVGVtcGxhdGVFbmdpbmUnLCBrby5uYXRpdmVUZW1wbGF0ZUVuZ2luZSk7XG4oZnVuY3Rpb24oKSB7XG4gICAga28uanF1ZXJ5VG1wbFRlbXBsYXRlRW5naW5lID0gZnVuY3Rpb24gKCkge1xuICAgICAgICAvLyBEZXRlY3Qgd2hpY2ggdmVyc2lvbiBvZiBqcXVlcnktdG1wbCB5b3UncmUgdXNpbmcuIFVuZm9ydHVuYXRlbHkganF1ZXJ5LXRtcGxcbiAgICAgICAgLy8gZG9lc24ndCBleHBvc2UgYSB2ZXJzaW9uIG51bWJlciwgc28gd2UgaGF2ZSB0byBpbmZlciBpdC5cbiAgICAgICAgLy8gTm90ZSB0aGF0IGFzIG9mIEtub2Nrb3V0IDEuMywgd2Ugb25seSBzdXBwb3J0IGpRdWVyeS50bXBsIDEuMC4wcHJlIGFuZCBsYXRlcixcbiAgICAgICAgLy8gd2hpY2ggS08gaW50ZXJuYWxseSByZWZlcnMgdG8gYXMgdmVyc2lvbiBcIjJcIiwgc28gb2xkZXIgdmVyc2lvbnMgYXJlIG5vIGxvbmdlciBkZXRlY3RlZC5cbiAgICAgICAgdmFyIGpRdWVyeVRtcGxWZXJzaW9uID0gdGhpcy5qUXVlcnlUbXBsVmVyc2lvbiA9IChmdW5jdGlvbigpIHtcbiAgICAgICAgICAgIGlmICghalF1ZXJ5SW5zdGFuY2UgfHwgIShqUXVlcnlJbnN0YW5jZVsndG1wbCddKSlcbiAgICAgICAgICAgICAgICByZXR1cm4gMDtcbiAgICAgICAgICAgIC8vIFNpbmNlIGl0IGV4cG9zZXMgbm8gb2ZmaWNpYWwgdmVyc2lvbiBudW1iZXIsIHdlIHVzZSBvdXIgb3duIG51bWJlcmluZyBzeXN0ZW0uIFRvIGJlIHVwZGF0ZWQgYXMganF1ZXJ5LXRtcGwgZXZvbHZlcy5cbiAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgaWYgKGpRdWVyeUluc3RhbmNlWyd0bXBsJ11bJ3RhZyddWyd0bXBsJ11bJ29wZW4nXS50b1N0cmluZygpLmluZGV4T2YoJ19fJykgPj0gMCkge1xuICAgICAgICAgICAgICAgICAgICAvLyBTaW5jZSAxLjAuMHByZSwgY3VzdG9tIHRhZ3Mgc2hvdWxkIGFwcGVuZCBtYXJrdXAgdG8gYW4gYXJyYXkgY2FsbGVkIFwiX19cIlxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gMjsgLy8gRmluYWwgdmVyc2lvbiBvZiBqcXVlcnkudG1wbFxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0gY2F0Y2goZXgpIHsgLyogQXBwYXJlbnRseSBub3QgdGhlIHZlcnNpb24gd2Ugd2VyZSBsb29raW5nIGZvciAqLyB9XG5cbiAgICAgICAgICAgIHJldHVybiAxOyAvLyBBbnkgb2xkZXIgdmVyc2lvbiB0aGF0IHdlIGRvbid0IHN1cHBvcnRcbiAgICAgICAgfSkoKTtcblxuICAgICAgICBmdW5jdGlvbiBlbnN1cmVIYXNSZWZlcmVuY2VkSlF1ZXJ5VGVtcGxhdGVzKCkge1xuICAgICAgICAgICAgaWYgKGpRdWVyeVRtcGxWZXJzaW9uIDwgMilcbiAgICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJZb3VyIHZlcnNpb24gb2YgalF1ZXJ5LnRtcGwgaXMgdG9vIG9sZC4gUGxlYXNlIHVwZ3JhZGUgdG8galF1ZXJ5LnRtcGwgMS4wLjBwcmUgb3IgbGF0ZXIuXCIpO1xuICAgICAgICB9XG5cbiAgICAgICAgZnVuY3Rpb24gZXhlY3V0ZVRlbXBsYXRlKGNvbXBpbGVkVGVtcGxhdGUsIGRhdGEsIGpRdWVyeVRlbXBsYXRlT3B0aW9ucykge1xuICAgICAgICAgICAgcmV0dXJuIGpRdWVyeUluc3RhbmNlWyd0bXBsJ10oY29tcGlsZWRUZW1wbGF0ZSwgZGF0YSwgalF1ZXJ5VGVtcGxhdGVPcHRpb25zKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHRoaXNbJ3JlbmRlclRlbXBsYXRlU291cmNlJ10gPSBmdW5jdGlvbih0ZW1wbGF0ZVNvdXJjZSwgYmluZGluZ0NvbnRleHQsIG9wdGlvbnMsIHRlbXBsYXRlRG9jdW1lbnQpIHtcbiAgICAgICAgICAgIHRlbXBsYXRlRG9jdW1lbnQgPSB0ZW1wbGF0ZURvY3VtZW50IHx8IGRvY3VtZW50O1xuICAgICAgICAgICAgb3B0aW9ucyA9IG9wdGlvbnMgfHwge307XG4gICAgICAgICAgICBlbnN1cmVIYXNSZWZlcmVuY2VkSlF1ZXJ5VGVtcGxhdGVzKCk7XG5cbiAgICAgICAgICAgIC8vIEVuc3VyZSB3ZSBoYXZlIHN0b3JlZCBhIHByZWNvbXBpbGVkIHZlcnNpb24gb2YgdGhpcyB0ZW1wbGF0ZSAoZG9uJ3Qgd2FudCB0byByZXBhcnNlIG9uIGV2ZXJ5IHJlbmRlcilcbiAgICAgICAgICAgIHZhciBwcmVjb21waWxlZCA9IHRlbXBsYXRlU291cmNlWydkYXRhJ10oJ3ByZWNvbXBpbGVkJyk7XG4gICAgICAgICAgICBpZiAoIXByZWNvbXBpbGVkKSB7XG4gICAgICAgICAgICAgICAgdmFyIHRlbXBsYXRlVGV4dCA9IHRlbXBsYXRlU291cmNlWyd0ZXh0J10oKSB8fCBcIlwiO1xuICAgICAgICAgICAgICAgIC8vIFdyYXAgaW4gXCJ3aXRoKCR3aGF0ZXZlci5rb0JpbmRpbmdDb250ZXh0KSB7IC4uLiB9XCJcbiAgICAgICAgICAgICAgICB0ZW1wbGF0ZVRleHQgPSBcInt7a29fd2l0aCAkaXRlbS5rb0JpbmRpbmdDb250ZXh0fX1cIiArIHRlbXBsYXRlVGV4dCArIFwie3sva29fd2l0aH19XCI7XG5cbiAgICAgICAgICAgICAgICBwcmVjb21waWxlZCA9IGpRdWVyeUluc3RhbmNlWyd0ZW1wbGF0ZSddKG51bGwsIHRlbXBsYXRlVGV4dCk7XG4gICAgICAgICAgICAgICAgdGVtcGxhdGVTb3VyY2VbJ2RhdGEnXSgncHJlY29tcGlsZWQnLCBwcmVjb21waWxlZCk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIHZhciBkYXRhID0gW2JpbmRpbmdDb250ZXh0WyckZGF0YSddXTsgLy8gUHJld3JhcCB0aGUgZGF0YSBpbiBhbiBhcnJheSB0byBzdG9wIGpxdWVyeS50bXBsIGZyb20gdHJ5aW5nIHRvIHVud3JhcCBhbnkgYXJyYXlzXG4gICAgICAgICAgICB2YXIgalF1ZXJ5VGVtcGxhdGVPcHRpb25zID0galF1ZXJ5SW5zdGFuY2VbJ2V4dGVuZCddKHsgJ2tvQmluZGluZ0NvbnRleHQnOiBiaW5kaW5nQ29udGV4dCB9LCBvcHRpb25zWyd0ZW1wbGF0ZU9wdGlvbnMnXSk7XG5cbiAgICAgICAgICAgIHZhciByZXN1bHROb2RlcyA9IGV4ZWN1dGVUZW1wbGF0ZShwcmVjb21waWxlZCwgZGF0YSwgalF1ZXJ5VGVtcGxhdGVPcHRpb25zKTtcbiAgICAgICAgICAgIHJlc3VsdE5vZGVzWydhcHBlbmRUbyddKHRlbXBsYXRlRG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImRpdlwiKSk7IC8vIFVzaW5nIFwiYXBwZW5kVG9cIiBmb3JjZXMgalF1ZXJ5L2pRdWVyeS50bXBsIHRvIHBlcmZvcm0gbmVjZXNzYXJ5IGNsZWFudXAgd29ya1xuXG4gICAgICAgICAgICBqUXVlcnlJbnN0YW5jZVsnZnJhZ21lbnRzJ10gPSB7fTsgLy8gQ2xlYXIgalF1ZXJ5J3MgZnJhZ21lbnQgY2FjaGUgdG8gYXZvaWQgYSBtZW1vcnkgbGVhayBhZnRlciBhIGxhcmdlIG51bWJlciBvZiB0ZW1wbGF0ZSByZW5kZXJzXG4gICAgICAgICAgICByZXR1cm4gcmVzdWx0Tm9kZXM7XG4gICAgICAgIH07XG5cbiAgICAgICAgdGhpc1snY3JlYXRlSmF2YVNjcmlwdEV2YWx1YXRvckJsb2NrJ10gPSBmdW5jdGlvbihzY3JpcHQpIHtcbiAgICAgICAgICAgIHJldHVybiBcInt7a29fY29kZSAoKGZ1bmN0aW9uKCkgeyByZXR1cm4gXCIgKyBzY3JpcHQgKyBcIiB9KSgpKSB9fVwiO1xuICAgICAgICB9O1xuXG4gICAgICAgIHRoaXNbJ2FkZFRlbXBsYXRlJ10gPSBmdW5jdGlvbih0ZW1wbGF0ZU5hbWUsIHRlbXBsYXRlTWFya3VwKSB7XG4gICAgICAgICAgICBkb2N1bWVudC53cml0ZShcIjxzY3JpcHQgdHlwZT0ndGV4dC9odG1sJyBpZD0nXCIgKyB0ZW1wbGF0ZU5hbWUgKyBcIic+XCIgKyB0ZW1wbGF0ZU1hcmt1cCArIFwiPFwiICsgXCIvc2NyaXB0PlwiKTtcbiAgICAgICAgfTtcblxuICAgICAgICBpZiAoalF1ZXJ5VG1wbFZlcnNpb24gPiAwKSB7XG4gICAgICAgICAgICBqUXVlcnlJbnN0YW5jZVsndG1wbCddWyd0YWcnXVsna29fY29kZSddID0ge1xuICAgICAgICAgICAgICAgIG9wZW46IFwiX18ucHVzaCgkMSB8fCAnJyk7XCJcbiAgICAgICAgICAgIH07XG4gICAgICAgICAgICBqUXVlcnlJbnN0YW5jZVsndG1wbCddWyd0YWcnXVsna29fd2l0aCddID0ge1xuICAgICAgICAgICAgICAgIG9wZW46IFwid2l0aCgkMSkge1wiLFxuICAgICAgICAgICAgICAgIGNsb3NlOiBcIn0gXCJcbiAgICAgICAgICAgIH07XG4gICAgICAgIH1cbiAgICB9O1xuXG4gICAga28uanF1ZXJ5VG1wbFRlbXBsYXRlRW5naW5lLnByb3RvdHlwZSA9IG5ldyBrby50ZW1wbGF0ZUVuZ2luZSgpO1xuICAgIGtvLmpxdWVyeVRtcGxUZW1wbGF0ZUVuZ2luZS5wcm90b3R5cGUuY29uc3RydWN0b3IgPSBrby5qcXVlcnlUbXBsVGVtcGxhdGVFbmdpbmU7XG5cbiAgICAvLyBVc2UgdGhpcyBvbmUgYnkgZGVmYXVsdCAqb25seSBpZiBqcXVlcnkudG1wbCBpcyByZWZlcmVuY2VkKlxuICAgIHZhciBqcXVlcnlUbXBsVGVtcGxhdGVFbmdpbmVJbnN0YW5jZSA9IG5ldyBrby5qcXVlcnlUbXBsVGVtcGxhdGVFbmdpbmUoKTtcbiAgICBpZiAoanF1ZXJ5VG1wbFRlbXBsYXRlRW5naW5lSW5zdGFuY2UualF1ZXJ5VG1wbFZlcnNpb24gPiAwKVxuICAgICAgICBrby5zZXRUZW1wbGF0ZUVuZ2luZShqcXVlcnlUbXBsVGVtcGxhdGVFbmdpbmVJbnN0YW5jZSk7XG5cbiAgICBrby5leHBvcnRTeW1ib2woJ2pxdWVyeVRtcGxUZW1wbGF0ZUVuZ2luZScsIGtvLmpxdWVyeVRtcGxUZW1wbGF0ZUVuZ2luZSk7XG59KSgpO1xufSkpO1xufSgpKTtcbn0pKCk7XG4iXSwic291cmNlUm9vdCI6Ii9zb3VyY2UvIn0=

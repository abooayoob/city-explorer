"use strict";function _classCallCheck(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function initializeApplication(){var e,t={lat:59.9138688,lng:10.752245399999993},n=new google.maps.InfoWindow,i={venues:"https://api.foursquare.com/v2/venues/",explore:"explore?",search:"search?",credentials:"client_id=Y0DEZ005CDT1Y2FBGGXV4KWYOEPLWAKFXTXC0UXLNAFHTFAY&client_secret=GEA32UVN3CUN0IHNCTSFU1SOABB0WT4HH2U2WYRR3ZLX4JX2",version:"&v=20130815"},r=function(e,t){var n="&ll="+e.lat+","+e.lng,r="&query=Popular with visitors",o=new XMLHttpRequest;o.open("GET",i.venues+i.explore+i.credentials+i.version+n+r,!0),o.onreadystatechange=function(){if(4==o.readyState&&200==o.status){var e=JSON.parse(o.responseText),n=e.response.groups[0].items;t(n)}},o.send("")},o=function(e,t){var n=new XMLHttpRequest;n.open("GET",i.venues+e+"?"+i.credentials+i.version,!0),n.onreadystatechange=function(){if(4==n.readyState&&200==n.status){var e=JSON.parse(n.responseText);t(e)}},n.send("")},s=function(e){e.photoUrls=e.photos.groups[0].items.map(function(e){return e.prefix+"original"+e.suffix})},a=function(t){e=new google.maps.LatLngBounds;var i=0;r(t,function(t){t.forEach(function(t){o(t.venue.id,function(t){var r=t.response.venue,o={lat:r.location.lat,lng:r.location.lng},a=new google.maps.Marker({map:u,title:r.name,position:o});a.addListener("click",function(){l(r,n)}),r.marker=a,r.index=i++,s(r),console.log(r),f.addVenue(r),e.extend(new google.maps.LatLng(o)),u.fitBounds(e)})})})},l=function(e,t){if(t.marker!=e.marker){var n='<div id="content" class="content"><h1 class="content__heading" data-bind="text: venueList()['+e.index+'].name"></h1><div class="image-slider" data-bind="foreach: venueList()['+e.index+'].photoUrls"><div class="image-slider__image-container"><img style="max-width:300px;max-height:200px" class="image-slider__image" data-bind="attr: {src: $data}" alt=""></div></div></div>';t.marker=e.marker,t.setContent(n),t.open(u,e.marker),ko.applyBindings(f,document.getElementById("content"))}},u=new google.maps.Map(document.getElementById("map"),{center:t,zoom:15,fullscreenControl:!0}),d=document.getElementById("pac-input"),c=new google.maps.places.SearchBox(d);u.addListener("bounds_changed",function(){c.setBounds(u.getBounds())}),c.addListener("places_changed",function(){var e=c.getPlaces();if(0!==e.length){var t=google.maps.geometry.spherical.computeDistanceBetween(e[0].geometry.location,u.getCenter()),n=JSON.stringify(e[0].geometry.location),i=JSON.parse(n);return t>6e3?(f.removeAllVenues(),void a(i)):void 0}});var p=function(){this.venueList=ko.observableArray(),this.addVenue=this.addVenue.bind(this),this.removeAllVenues=this.removeAllVenues.bind(this)};p.prototype.addVenue=function(e){this.venueList.push(e)},p.prototype.removeAllVenues=function(){this.venueList().forEach(function(e){e.marker.setMap(null)}),this.venueList.removeAll()};var f=new p;ko.applyBindings(f),a(t)}var _createClass=function(){function e(e,t){for(var n=0;n<t.length;n++){var i=t[n];i.enumerable=i.enumerable||!1,i.configurable=!0,"value"in i&&(i.writable=!0),Object.defineProperty(e,i.key,i)}}return function(t,n,i){return n&&e(t.prototype,n),i&&e(t,i),t}}(),SideNav=function(){function e(){_classCallCheck(this,e),this.showButtonEl=document.querySelector(".js-menu-show"),this.hideButtonEl=document.querySelector(".js-menu-hide"),this.sideNavEl=document.querySelector(".js-side-nav"),this.sideNavContainerEl=document.querySelector(".js-side-nav-container"),this.showSideNav=this.showSideNav.bind(this),this.hideSideNav=this.hideSideNav.bind(this),this.blockClicks=this.blockClicks.bind(this),this.onTouchStart=this.onTouchStart.bind(this),this.onTouchMove=this.onTouchMove.bind(this),this.onTouchEnd=this.onTouchEnd.bind(this),this.onTransitionEnd=this.onTransitionEnd.bind(this),this.update=this.update.bind(this),this.startX=0,this.currentX=0,this.touchingSideNav=!1,this.addEventListeners()}return _createClass(e,[{key:"addEventListeners",value:function(){this.showButtonEl.addEventListener("click",this.showSideNav),this.hideButtonEl.addEventListener("click",this.hideSideNav),this.sideNavEl.addEventListener("click",this.hideSideNav),this.sideNavContainerEl.addEventListener("click",this.blockClicks),this.sideNavEl.addEventListener("touchstart",this.onTouchStart),this.sideNavEl.addEventListener("touchmove",this.onTouchMove),this.sideNavEl.addEventListener("touchend",this.onTouchEnd)}},{key:"onTouchStart",value:function(e){this.sideNavEl.classList.contains("side-nav--visible")&&(this.startX=e.touches[0].pageX,this.currentX=this.startX,this.touchingSideNav=!0,requestAnimationFrame(this.update))}},{key:"onTouchMove",value:function(e){if(this.touchingSideNav){this.currentX=e.touches[0].pageX;var t=Math.min(0,this.currentX-this.startX);t<0&&e.preventDefault()}}},{key:"onTouchEnd",value:function(e){if(this.touchingSideNav){this.touchingSideNav=!1;var t=Math.min(0,this.currentX-this.startX);this.sideNavContainerEl.style.transform="",t<0&&this.hideSideNav()}}},{key:"update",value:function(){if(this.touchingSideNav){var e=Math.min(0,this.currentX-this.startX);this.sideNavContainerEl.style.transform="translateX("+e+"px)",requestAnimationFrame(this.update)}}},{key:"blockClicks",value:function(e){e.stopPropagation()}},{key:"onTransitionEnd",value:function(e){this.sideNavEl.classList.remove("side-nav--animatable"),this.sideNavEl.removeEventListener("transitionend",this.onTransitionEnd)}},{key:"showSideNav",value:function(){this.sideNavEl.classList.add("side-nav--animatable"),this.sideNavEl.classList.add("side-nav--visible"),this.sideNavEl.addEventListener("transitionend",this.onTransitionEnd)}},{key:"hideSideNav",value:function(){this.sideNavEl.classList.add("side-nav--animatable"),this.sideNavEl.classList.remove("side-nav--visible"),this.sideNavEl.addEventListener("transitionend",this.onTransitionEnd)}}]),e}();new SideNav;var _typeof="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e};!function(){var e=!0;!function(t){var n=this||(0,eval)("this"),i=n.document,r=n.navigator,o=n.jQuery,s=n.JSON;!function(e){"function"==typeof define&&define.amd?define(["exports","require"],e):e("object"===("undefined"==typeof exports?"undefined":_typeof(exports))&&"object"===("undefined"==typeof module?"undefined":_typeof(module))?module.exports||exports:n.ko={})}(function(a,l){function u(e,t){var n=null===e||("undefined"==typeof e?"undefined":_typeof(e))in y;return!!n&&e===t}function d(e,n){var i;return function(){i||(i=g.utils.setTimeout(function(){i=t,e()},n))}}function c(e,t){var n;return function(){clearTimeout(n),n=g.utils.setTimeout(e,t)}}function p(e){var t=this;return e&&g.utils.objectForEach(e,function(e,n){var i=g.extenders[e];"function"==typeof i&&(t=i(t,n)||t)}),t}function f(e,t){t&&t!==x?"beforeChange"===t?this._limitBeforeChange(e):this._origNotifySubscribers(e,t):this._limitChange(e)}function m(e,t){null!==t&&t.dispose&&t.dispose()}function v(e,t){var n=this.computedObservable,i=n[C];i.isDisposed||(this.disposalCount&&this.disposalCandidates[t]?(n.addDependencyTracking(t,e,this.disposalCandidates[t]),this.disposalCandidates[t]=null,--this.disposalCount):i.dependencyTracking[t]||n.addDependencyTracking(t,e,i.isSleeping?{_target:e}:n.subscribeToDependency(e)))}function h(e){g.bindingHandlers[e]={init:function(t,n,i,r,o){var s=function(){var t={};return t[e]=n(),t};return g.bindingHandlers.event.init.call(this,t,s,i,r,o)}}}function b(e,t,n,i){g.bindingHandlers[e]={init:function(e,r,o,s,a){var l,u;return g.computed(function(){var o=g.utils.unwrapObservable(r()),s=!n!=!o,d=!u,c=d||t||s!==l;c&&(d&&g.computedContext.getDependenciesCount()&&(u=g.utils.cloneNodes(g.virtualElements.childNodes(e),!0)),s?(d||g.virtualElements.setDomNodeChildren(e,g.utils.cloneNodes(u)),g.applyBindingsToDescendants(i?i(a,o):a,e)):g.virtualElements.emptyNode(e),l=s)},null,{disposeWhenNodeIsRemoved:e}),{controlsDescendantBindings:!0}}},g.expressionRewriting.bindingRewriteValidators[e]=!1,g.virtualElements.allowedBindings[e]=!0}var g="undefined"!=typeof a?a:{};g.exportSymbol=function(e,t){for(var n=e.split("."),i=g,r=0;r<n.length-1;r++)i=i[n[r]];i[n[n.length-1]]=t},g.exportProperty=function(e,t,n){e[t]=n},g.version="3.4.0",g.exportSymbol("version",g.version),g.options={deferUpdates:!1,useOnlyNativeEvents:!1},g.utils=function(){function a(e,t){for(var n in e)e.hasOwnProperty(n)&&t(n,e[n])}function l(e,t){if(t)for(var n in t)t.hasOwnProperty(n)&&(e[n]=t[n]);return e}function u(e,t){return e.__proto__=t,e}function d(e,t){if("input"!==g.utils.tagNameLower(e)||!e.type)return!1;if("click"!=t.toLowerCase())return!1;var n=e.type;return"checkbox"==n||"radio"==n}function c(e,t,n){var i;t&&("object"===_typeof(e.classList)?(i=e.classList[n?"add":"remove"],g.utils.arrayForEach(t.match(S),function(t){i.call(e.classList,t)})):"string"==typeof e.className.baseVal?p(e.className,"baseVal",t,n):p(e,"className",t,n))}function p(e,t,n,i){var r=e[t].match(S)||[];g.utils.arrayForEach(n.match(S),function(e){g.utils.addOrRemoveItem(r,e,i)}),e[t]=r.join(" ")}var f={__proto__:[]}instanceof Array,m=!e&&"function"==typeof Symbol,v={},h={},b=r&&/Firefox\/2/i.test(r.userAgent)?"KeyboardEvent":"UIEvents";v[b]=["keyup","keydown","keypress"],v.MouseEvents=["click","dblclick","mousedown","mouseup","mousemove","mouseover","mouseout","mouseenter","mouseleave"],a(v,function(e,t){if(t.length)for(var n=0,i=t.length;n<i;n++)h[t[n]]=e});var y={propertychange:!0},x=i&&function(){for(var e=3,n=i.createElement("div"),r=n.getElementsByTagName("i");n.innerHTML="<!--[if gt IE "+ ++e+"]><i></i><![endif]-->",r[0];);return e>4?e:t}(),E=6===x,w=7===x,S=/\S+/g;return{fieldsIncludedWithJsonPost:["authenticity_token",/^__RequestVerificationToken(_.*)?$/],arrayForEach:function(e,t){for(var n=0,i=e.length;n<i;n++)t(e[n],n)},arrayIndexOf:function(e,t){if("function"==typeof Array.prototype.indexOf)return Array.prototype.indexOf.call(e,t);for(var n=0,i=e.length;n<i;n++)if(e[n]===t)return n;return-1},arrayFirst:function(e,t,n){for(var i=0,r=e.length;i<r;i++)if(t.call(n,e[i],i))return e[i];return null},arrayRemoveItem:function(e,t){var n=g.utils.arrayIndexOf(e,t);n>0?e.splice(n,1):0===n&&e.shift()},arrayGetDistinctValues:function(e){e=e||[];for(var t=[],n=0,i=e.length;n<i;n++)g.utils.arrayIndexOf(t,e[n])<0&&t.push(e[n]);return t},arrayMap:function(e,t){e=e||[];for(var n=[],i=0,r=e.length;i<r;i++)n.push(t(e[i],i));return n},arrayFilter:function(e,t){e=e||[];for(var n=[],i=0,r=e.length;i<r;i++)t(e[i],i)&&n.push(e[i]);return n},arrayPushAll:function(e,t){if(t instanceof Array)e.push.apply(e,t);else for(var n=0,i=t.length;n<i;n++)e.push(t[n]);return e},addOrRemoveItem:function(e,t,n){var i=g.utils.arrayIndexOf(g.utils.peekObservable(e),t);i<0?n&&e.push(t):n||e.splice(i,1)},canSetPrototype:f,extend:l,setPrototypeOf:u,setPrototypeOfOrExtend:f?u:l,objectForEach:a,objectMap:function(e,t){if(!e)return e;var n={};for(var i in e)e.hasOwnProperty(i)&&(n[i]=t(e[i],i,e));return n},emptyDomNode:function(e){for(;e.firstChild;)g.removeNode(e.firstChild)},moveCleanedNodesToContainerElement:function(e){for(var t=g.utils.makeArray(e),n=t[0]&&t[0].ownerDocument||i,r=n.createElement("div"),o=0,s=t.length;o<s;o++)r.appendChild(g.cleanNode(t[o]));return r},cloneNodes:function(e,t){for(var n=0,i=e.length,r=[];n<i;n++){var o=e[n].cloneNode(!0);r.push(t?g.cleanNode(o):o)}return r},setDomNodeChildren:function(e,t){if(g.utils.emptyDomNode(e),t)for(var n=0,i=t.length;n<i;n++)e.appendChild(t[n])},replaceDomNodes:function(e,t){var n=e.nodeType?[e]:e;if(n.length>0){for(var i=n[0],r=i.parentNode,o=0,s=t.length;o<s;o++)r.insertBefore(t[o],i);for(var o=0,s=n.length;o<s;o++)g.removeNode(n[o])}},fixUpContinuousNodeArray:function(e,t){if(e.length){for(t=8===t.nodeType&&t.parentNode||t;e.length&&e[0].parentNode!==t;)e.splice(0,1);for(;e.length>1&&e[e.length-1].parentNode!==t;)e.length--;if(e.length>1){var n=e[0],i=e[e.length-1];for(e.length=0;n!==i;)e.push(n),n=n.nextSibling;e.push(i)}}return e},setOptionNodeSelectionState:function(e,t){x<7?e.setAttribute("selected",t):e.selected=t},stringTrim:function(e){return null===e||e===t?"":e.trim?e.trim():e.toString().replace(/^[\s\xa0]+|[\s\xa0]+$/g,"")},stringStartsWith:function(e,t){return e=e||"",!(t.length>e.length)&&e.substring(0,t.length)===t},domNodeIsContainedBy:function(e,t){if(e===t)return!0;if(11===e.nodeType)return!1;if(t.contains)return t.contains(3===e.nodeType?e.parentNode:e);if(t.compareDocumentPosition)return 16==(16&t.compareDocumentPosition(e));for(;e&&e!=t;)e=e.parentNode;return!!e},domNodeIsAttachedToDocument:function(e){return g.utils.domNodeIsContainedBy(e,e.ownerDocument.documentElement)},anyDomNodeIsAttachedToDocument:function(e){return!!g.utils.arrayFirst(e,g.utils.domNodeIsAttachedToDocument)},tagNameLower:function(e){return e&&e.tagName&&e.tagName.toLowerCase()},catchFunctionErrors:function(e){return g.onError?function(){try{return e.apply(this,arguments)}catch(e){throw g.onError&&g.onError(e),e}}:e},setTimeout:function(e){function t(t,n){return e.apply(this,arguments)}return t.toString=function(){return e.toString()},t}(function(e,t){return setTimeout(g.utils.catchFunctionErrors(e),t)}),deferError:function(e){setTimeout(function(){throw g.onError&&g.onError(e),e},0)},registerEventHandler:function(e,t,n){var i=g.utils.catchFunctionErrors(n),r=x&&y[t];if(g.options.useOnlyNativeEvents||r||!o)if(r||"function"!=typeof e.addEventListener){if("undefined"==typeof e.attachEvent)throw new Error("Browser doesn't support addEventListener or attachEvent");var s=function(t){i.call(e,t)},a="on"+t;e.attachEvent(a,s),g.utils.domNodeDisposal.addDisposeCallback(e,function(){e.detachEvent(a,s)})}else e.addEventListener(t,i,!1);else o(e).bind(t,i)},triggerEvent:function(e,t){if(!e||!e.nodeType)throw new Error("element must be a DOM node when calling triggerEvent");var r=d(e,t);if(g.options.useOnlyNativeEvents||!o||r)if("function"==typeof i.createEvent){if("function"!=typeof e.dispatchEvent)throw new Error("The supplied element doesn't support dispatchEvent");var s=h[t]||"HTMLEvents",a=i.createEvent(s);a.initEvent(t,!0,!0,n,0,0,0,0,0,!1,!1,!1,!1,0,e),e.dispatchEvent(a)}else if(r&&e.click)e.click();else{if("undefined"==typeof e.fireEvent)throw new Error("Browser doesn't support triggering events");e.fireEvent("on"+t)}else o(e).trigger(t)},unwrapObservable:function(e){return g.isObservable(e)?e():e},peekObservable:function(e){return g.isObservable(e)?e.peek():e},toggleDomNodeCssClass:c,setTextContent:function(e,n){var i=g.utils.unwrapObservable(n);null!==i&&i!==t||(i="");var r=g.virtualElements.firstChild(e);!r||3!=r.nodeType||g.virtualElements.nextSibling(r)?g.virtualElements.setDomNodeChildren(e,[e.ownerDocument.createTextNode(i)]):r.data=i,g.utils.forceRefresh(e)},setElementName:function(e,t){if(e.name=t,x<=7)try{e.mergeAttributes(i.createElement("<input name='"+e.name+"'/>"),!1)}catch(e){}},forceRefresh:function(e){if(x>=9){var t=1==e.nodeType?e:e.parentNode;t.style&&(t.style.zoom=t.style.zoom)}},ensureSelectElementIsRenderedCorrectly:function(e){if(x){var t=e.style.width;e.style.width=0,e.style.width=t}},range:function(e,t){e=g.utils.unwrapObservable(e),t=g.utils.unwrapObservable(t);for(var n=[],i=e;i<=t;i++)n.push(i);return n},makeArray:function(e){for(var t=[],n=0,i=e.length;n<i;n++)t.push(e[n]);return t},createSymbolOrString:function(e){return m?Symbol(e):e},isIe6:E,isIe7:w,ieVersion:x,getFormFields:function(e,t){for(var n=g.utils.makeArray(e.getElementsByTagName("input")).concat(g.utils.makeArray(e.getElementsByTagName("textarea"))),i="string"==typeof t?function(e){return e.name===t}:function(e){return t.test(e.name)},r=[],o=n.length-1;o>=0;o--)i(n[o])&&r.push(n[o]);return r},parseJson:function(e){return"string"==typeof e&&(e=g.utils.stringTrim(e))?s&&s.parse?s.parse(e):new Function("return "+e)():null},stringifyJson:function(e,t,n){if(!s||!s.stringify)throw new Error("Cannot find JSON.stringify(). Some browsers (e.g., IE < 8) don't support it natively, but you can overcome this by adding a script reference to json2.js, downloadable from http://www.json.org/json2.js");return s.stringify(g.utils.unwrapObservable(e),t,n)},postJson:function(e,t,n){n=n||{};var r=n.params||{},o=n.includeFields||this.fieldsIncludedWithJsonPost,s=e;if("object"==("undefined"==typeof e?"undefined":_typeof(e))&&"form"===g.utils.tagNameLower(e)){var l=e;s=l.action;for(var u=o.length-1;u>=0;u--)for(var d=g.utils.getFormFields(l,o[u]),c=d.length-1;c>=0;c--)r[d[c].name]=d[c].value}t=g.utils.unwrapObservable(t);var p=i.createElement("form");p.style.display="none",p.action=s,p.method="post";for(var f in t){var m=i.createElement("input");m.type="hidden",m.name=f,m.value=g.utils.stringifyJson(g.utils.unwrapObservable(t[f])),p.appendChild(m)}a(r,function(e,t){var n=i.createElement("input");n.type="hidden",n.name=e,n.value=t,p.appendChild(n)}),i.body.appendChild(p),n.submitter?n.submitter(p):p.submit(),setTimeout(function(){p.parentNode.removeChild(p)},0)}}}(),g.exportSymbol("utils",g.utils),g.exportSymbol("utils.arrayForEach",g.utils.arrayForEach),g.exportSymbol("utils.arrayFirst",g.utils.arrayFirst),g.exportSymbol("utils.arrayFilter",g.utils.arrayFilter),g.exportSymbol("utils.arrayGetDistinctValues",g.utils.arrayGetDistinctValues),g.exportSymbol("utils.arrayIndexOf",g.utils.arrayIndexOf),g.exportSymbol("utils.arrayMap",g.utils.arrayMap),g.exportSymbol("utils.arrayPushAll",g.utils.arrayPushAll),g.exportSymbol("utils.arrayRemoveItem",g.utils.arrayRemoveItem),g.exportSymbol("utils.extend",g.utils.extend),g.exportSymbol("utils.fieldsIncludedWithJsonPost",g.utils.fieldsIncludedWithJsonPost),g.exportSymbol("utils.getFormFields",g.utils.getFormFields),g.exportSymbol("utils.peekObservable",g.utils.peekObservable),g.exportSymbol("utils.postJson",g.utils.postJson),g.exportSymbol("utils.parseJson",g.utils.parseJson),g.exportSymbol("utils.registerEventHandler",g.utils.registerEventHandler),g.exportSymbol("utils.stringifyJson",g.utils.stringifyJson),g.exportSymbol("utils.range",g.utils.range),g.exportSymbol("utils.toggleDomNodeCssClass",g.utils.toggleDomNodeCssClass),g.exportSymbol("utils.triggerEvent",g.utils.triggerEvent),g.exportSymbol("utils.unwrapObservable",g.utils.unwrapObservable),g.exportSymbol("utils.objectForEach",g.utils.objectForEach),g.exportSymbol("utils.addOrRemoveItem",g.utils.addOrRemoveItem),g.exportSymbol("utils.setTextContent",g.utils.setTextContent),g.exportSymbol("unwrap",g.utils.unwrapObservable),Function.prototype.bind||(Function.prototype.bind=function(e){var t=this;if(1===arguments.length)return function(){return t.apply(e,arguments)};var n=Array.prototype.slice.call(arguments,1);return function(){var i=n.slice(0);return i.push.apply(i,arguments),t.apply(e,i)}}),g.utils.domData=new function(){function e(e,o){var s=e[i],a=s&&"null"!==s&&r[s];if(!a){if(!o)return t;s=e[i]="ko"+n++,r[s]={}}return r[s]}var n=0,i="__ko__"+(new Date).getTime(),r={};return{get:function(n,i){var r=e(n,!1);return r===t?t:r[i]},set:function(n,i,r){if(r!==t||e(n,!1)!==t){var o=e(n,!0);o[i]=r}},clear:function(e){var t=e[i];return!!t&&(delete r[t],e[i]=null,!0)},nextKey:function(){return n++ +i}}},g.exportSymbol("utils.domData",g.utils.domData),g.exportSymbol("utils.domData.clear",g.utils.domData.clear),g.utils.domNodeDisposal=new function(){function e(e,n){var i=g.utils.domData.get(e,s);return i===t&&n&&(i=[],g.utils.domData.set(e,s,i)),i}function n(e){g.utils.domData.set(e,s,t)}function i(t){var n=e(t,!1);if(n){n=n.slice(0);for(var i=0;i<n.length;i++)n[i](t)}g.utils.domData.clear(t),g.utils.domNodeDisposal.cleanExternalData(t),l[t.nodeType]&&r(t)}function r(e){for(var t,n=e.firstChild;t=n;)n=t.nextSibling,8===t.nodeType&&i(t)}var s=g.utils.domData.nextKey(),a={1:!0,8:!0,9:!0},l={1:!0,9:!0};return{addDisposeCallback:function(t,n){if("function"!=typeof n)throw new Error("Callback must be a function");e(t,!0).push(n)},removeDisposeCallback:function(t,i){var r=e(t,!1);r&&(g.utils.arrayRemoveItem(r,i),0==r.length&&n(t))},cleanNode:function(e){if(a[e.nodeType]&&(i(e),l[e.nodeType])){var t=[];g.utils.arrayPushAll(t,e.getElementsByTagName("*"));for(var n=0,r=t.length;n<r;n++)i(t[n])}return e},removeNode:function(e){g.cleanNode(e),e.parentNode&&e.parentNode.removeChild(e)},cleanExternalData:function(e){o&&"function"==typeof o.cleanData&&o.cleanData([e])}}},g.cleanNode=g.utils.domNodeDisposal.cleanNode,g.removeNode=g.utils.domNodeDisposal.removeNode,g.exportSymbol("cleanNode",g.cleanNode),g.exportSymbol("removeNode",g.removeNode),g.exportSymbol("utils.domNodeDisposal",g.utils.domNodeDisposal),g.exportSymbol("utils.domNodeDisposal.addDisposeCallback",g.utils.domNodeDisposal.addDisposeCallback),g.exportSymbol("utils.domNodeDisposal.removeDisposeCallback",g.utils.domNodeDisposal.removeDisposeCallback),function(){function e(e){var t=e.match(/^<([a-z]+)[ >]/);return t&&p[t[1]]||a}function r(t,r){r||(r=i);var o=r.parentWindow||r.defaultView||n,s=g.utils.stringTrim(t).toLowerCase(),a=r.createElement("div"),l=e(s),u=l[0],d="ignored<div>"+l[1]+t+l[2]+"</div>";for("function"==typeof o.innerShiv?a.appendChild(o.innerShiv(d)):(f&&r.appendChild(a),a.innerHTML=d,f&&a.parentNode.removeChild(a));u--;)a=a.lastChild;return g.utils.makeArray(a.lastChild.childNodes)}function s(e,t){if(o.parseHTML)return o.parseHTML(e,t)||[];var n=o.clean([e],t);if(n&&n[0]){for(var i=n[0];i.parentNode&&11!==i.parentNode.nodeType;)i=i.parentNode;i.parentNode&&i.parentNode.removeChild(i)}return n}var a=[0,"",""],l=[1,"<table>","</table>"],u=[2,"<table><tbody>","</tbody></table>"],d=[3,"<table><tbody><tr>","</tr></tbody></table>"],c=[1,"<select multiple='multiple'>","</select>"],p={thead:l,tbody:l,tfoot:l,tr:u,td:d,th:d,option:c,optgroup:c},f=g.utils.ieVersion<=8;g.utils.parseHtmlFragment=function(e,t){return o?s(e,t):r(e,t)},g.utils.setHtml=function(e,n){if(g.utils.emptyDomNode(e),n=g.utils.unwrapObservable(n),null!==n&&n!==t)if("string"!=typeof n&&(n=n.toString()),o)o(e).html(n);else for(var i=g.utils.parseHtmlFragment(n,e.ownerDocument),r=0;r<i.length;r++)e.appendChild(i[r])}}(),g.exportSymbol("utils.parseHtmlFragment",g.utils.parseHtmlFragment),g.exportSymbol("utils.setHtml",g.utils.setHtml),g.memoization=function(){function e(){return(4294967296*(1+Math.random())|0).toString(16).substring(1)}function n(){return e()+e()}function i(e,t){if(e)if(8==e.nodeType){var n=g.memoization.parseMemoText(e.nodeValue);null!=n&&t.push({domNode:e,memoId:n})}else if(1==e.nodeType)for(var r=0,o=e.childNodes,s=o.length;r<s;r++)i(o[r],t)}var r={};return{memoize:function(e){if("function"!=typeof e)throw new Error("You can only pass a function to ko.memoization.memoize()");var t=n();return r[t]=e,"<!--[ko_memo:"+t+"]-->"},unmemoize:function(e,n){var i=r[e];if(i===t)throw new Error("Couldn't find any memo with ID "+e+". Perhaps it's already been unmemoized.");try{return i.apply(null,n||[]),!0}finally{delete r[e]}},unmemoizeDomNodeAndDescendants:function(e,t){var n=[];i(e,n);for(var r=0,o=n.length;r<o;r++){var s=n[r].domNode,a=[s];t&&g.utils.arrayPushAll(a,t),g.memoization.unmemoize(n[r].memoId,a),s.nodeValue="",s.parentNode&&s.parentNode.removeChild(s)}},parseMemoText:function(e){var t=e.match(/^\[ko_memo\:(.*?)\]$/);return t?t[1]:null}}}(),g.exportSymbol("memoization",g.memoization),g.exportSymbol("memoization.memoize",g.memoization.memoize),g.exportSymbol("memoization.unmemoize",g.memoization.unmemoize),g.exportSymbol("memoization.parseMemoText",g.memoization.parseMemoText),g.exportSymbol("memoization.unmemoizeDomNodeAndDescendants",g.memoization.unmemoizeDomNodeAndDescendants),g.tasks=function(){function e(){if(a)for(var e,t=a,n=0;u<a;)if(e=s[u++]){if(u>t){if(++n>=5e3){u=a,g.utils.deferError(Error("'Too much recursion' after processing "+n+" task groups."));break}t=a}try{e()}catch(e){g.utils.deferError(e)}}}function t(){e(),u=a=s.length=0}function r(){g.tasks.scheduler(t)}var o,s=[],a=0,l=1,u=0;o=n.MutationObserver?function(e){var t=i.createElement("div");return new MutationObserver(e).observe(t,{attributes:!0}),function(){t.classList.toggle("foo")}}(t):i&&"onreadystatechange"in i.createElement("script")?function(e){var t=i.createElement("script");t.onreadystatechange=function(){t.onreadystatechange=null,i.documentElement.removeChild(t),t=null,e()},i.documentElement.appendChild(t)}:function(e){setTimeout(e,0)};var d={scheduler:o,schedule:function(e){return a||r(),s[a++]=e,l++},cancel:function(e){var t=e-(l-a);t>=u&&t<a&&(s[t]=null)},resetForTesting:function(){var e=a-u;return u=a=s.length=0,e},runEarly:e};return d}(),g.exportSymbol("tasks",g.tasks),g.exportSymbol("tasks.schedule",g.tasks.schedule),g.exportSymbol("tasks.runEarly",g.tasks.runEarly),g.extenders={throttle:function(e,t){e.throttleEvaluation=t;var n=null;return g.dependentObservable({read:e,write:function(i){clearTimeout(n),n=g.utils.setTimeout(function(){e(i)},t)}})},rateLimit:function(e,t){var n,i,r;"number"==typeof t?n=t:(n=t.timeout,i=t.method),e._deferUpdates=!1,r="notifyWhenChangesStop"==i?c:d,e.limit(function(e){return r(e,n)})},deferred:function(e,n){if(n!==!0)throw new Error("The 'deferred' extender only accepts the value 'true', because it is not supported to turn deferral off once enabled.");e._deferUpdates||(e._deferUpdates=!0,e.limit(function(n){var i;return function(){g.tasks.cancel(i),i=g.tasks.schedule(n),e.notifySubscribers(t,"dirty")}}))},notify:function(e,t){e.equalityComparer="always"==t?null:u}};var y={undefined:1,boolean:1,number:1,string:1};g.exportSymbol("extenders",g.extenders),g.subscription=function(e,t,n){this._target=e,this.callback=t,this.disposeCallback=n,this.isDisposed=!1,g.exportProperty(this,"dispose",this.dispose)},g.subscription.prototype.dispose=function(){this.isDisposed=!0,this.disposeCallback()},g.subscribable=function(){g.utils.setPrototypeOfOrExtend(this,E),E.init(this)};var x="change",E={init:function(e){e._subscriptions={},e._versionNumber=1},subscribe:function(e,t,n){var i=this;n=n||x;var r=t?e.bind(t):e,o=new g.subscription(i,r,function(){g.utils.arrayRemoveItem(i._subscriptions[n],o),i.afterSubscriptionRemove&&i.afterSubscriptionRemove(n)});return i.beforeSubscriptionAdd&&i.beforeSubscriptionAdd(n),i._subscriptions[n]||(i._subscriptions[n]=[]),i._subscriptions[n].push(o),o},notifySubscribers:function(e,t){if(t=t||x,t===x&&this.updateVersion(),this.hasSubscriptionsForEvent(t))try{g.dependencyDetection.begin();for(var n,i=this._subscriptions[t].slice(0),r=0;n=i[r];++r)n.isDisposed||n.callback(e)}finally{g.dependencyDetection.end()}},getVersion:function(){return this._versionNumber},hasChanged:function(e){return this.getVersion()!==e},updateVersion:function(){++this._versionNumber},limit:function(e){var t,n,i,r=this,o=g.isObservable(r),s="beforeChange";r._origNotifySubscribers||(r._origNotifySubscribers=r.notifySubscribers,r.notifySubscribers=f);var a=e(function(){r._notificationIsPending=!1,o&&i===r&&(i=r()),t=!1,r.isDifferent(n,i)&&r._origNotifySubscribers(n=i)});r._limitChange=function(e){r._notificationIsPending=t=!0,i=e,a()},r._limitBeforeChange=function(e){t||(n=e,r._origNotifySubscribers(e,s))}},hasSubscriptionsForEvent:function(e){return this._subscriptions[e]&&this._subscriptions[e].length},getSubscriptionsCount:function(e){if(e)return this._subscriptions[e]&&this._subscriptions[e].length||0;var t=0;return g.utils.objectForEach(this._subscriptions,function(e,n){"dirty"!==e&&(t+=n.length)}),t},isDifferent:function(e,t){return!this.equalityComparer||!this.equalityComparer(e,t)},extend:p};g.exportProperty(E,"subscribe",E.subscribe),g.exportProperty(E,"extend",E.extend),g.exportProperty(E,"getSubscriptionsCount",E.getSubscriptionsCount),g.utils.canSetPrototype&&g.utils.setPrototypeOf(E,Function.prototype),g.subscribable.fn=E,g.isSubscribable=function(e){return null!=e&&"function"==typeof e.subscribe&&"function"==typeof e.notifySubscribers},g.exportSymbol("subscribable",g.subscribable),g.exportSymbol("isSubscribable",g.isSubscribable),g.computedContext=g.dependencyDetection=function(){function e(){return++o}function t(e){r.push(i),i=e}function n(){i=r.pop()}var i,r=[],o=0;return{begin:t,end:n,registerDependency:function(t){if(i){if(!g.isSubscribable(t))throw new Error("Only subscribable things can act as dependencies");i.callback.call(i.callbackTarget,t,t._id||(t._id=e()))}},ignore:function(e,i,r){try{return t(),e.apply(i,r||[])}finally{n()}},getDependenciesCount:function(){if(i)return i.computed.getDependenciesCount()},isInitial:function(){if(i)return i.isInitial}}}(),g.exportSymbol("computedContext",g.computedContext),g.exportSymbol("computedContext.getDependenciesCount",g.computedContext.getDependenciesCount),g.exportSymbol("computedContext.isInitial",g.computedContext.isInitial),g.exportSymbol("ignoreDependencies",g.ignoreDependencies=g.dependencyDetection.ignore);var w=g.utils.createSymbolOrString("_latestValue");g.observable=function(e){function t(){return arguments.length>0?(t.isDifferent(t[w],arguments[0])&&(t.valueWillMutate(),t[w]=arguments[0],t.valueHasMutated()),this):(g.dependencyDetection.registerDependency(t),t[w])}return t[w]=e,g.utils.canSetPrototype||g.utils.extend(t,g.subscribable.fn),g.subscribable.fn.init(t),g.utils.setPrototypeOfOrExtend(t,S),g.options.deferUpdates&&g.extenders.deferred(t,!0),t};var S={equalityComparer:u,peek:function(){return this[w]},valueHasMutated:function(){this.notifySubscribers(this[w])},valueWillMutate:function(){this.notifySubscribers(this[w],"beforeChange")}};g.utils.canSetPrototype&&g.utils.setPrototypeOf(S,g.subscribable.fn);var N=g.observable.protoProperty="__ko_proto__";S[N]=g.observable,g.hasPrototype=function(e,n){return null!==e&&e!==t&&e[N]!==t&&(e[N]===n||g.hasPrototype(e[N],n))},g.isObservable=function(e){return g.hasPrototype(e,g.observable)},g.isWriteableObservable=function(e){return"function"==typeof e&&e[N]===g.observable||!("function"!=typeof e||e[N]!==g.dependentObservable||!e.hasWriteFunction)},g.exportSymbol("observable",g.observable),g.exportSymbol("isObservable",g.isObservable),g.exportSymbol("isWriteableObservable",g.isWriteableObservable),g.exportSymbol("isWritableObservable",g.isWriteableObservable),g.exportSymbol("observable.fn",S),g.exportProperty(S,"peek",S.peek),g.exportProperty(S,"valueHasMutated",S.valueHasMutated),g.exportProperty(S,"valueWillMutate",S.valueWillMutate),g.observableArray=function(e){if(e=e||[],"object"!=("undefined"==typeof e?"undefined":_typeof(e))||!("length"in e))throw new Error("The argument passed when initializing an observable array must be an array, or null, or undefined.");var t=g.observable(e);return g.utils.setPrototypeOfOrExtend(t,g.observableArray.fn),t.extend({trackArrayChanges:!0})},g.observableArray.fn={remove:function(e){for(var t=this.peek(),n=[],i="function"!=typeof e||g.isObservable(e)?function(t){return t===e}:e,r=0;r<t.length;r++){var o=t[r];i(o)&&(0===n.length&&this.valueWillMutate(),n.push(o),t.splice(r,1),r--)}return n.length&&this.valueHasMutated(),n},removeAll:function(e){if(e===t){var n=this.peek(),i=n.slice(0);return this.valueWillMutate(),n.splice(0,n.length),this.valueHasMutated(),i}return e?this.remove(function(t){return g.utils.arrayIndexOf(e,t)>=0}):[]},destroy:function(e){var t=this.peek(),n="function"!=typeof e||g.isObservable(e)?function(t){return t===e}:e;this.valueWillMutate();for(var i=t.length-1;i>=0;i--){var r=t[i];n(r)&&(t[i]._destroy=!0)}this.valueHasMutated()},destroyAll:function(e){return e===t?this.destroy(function(){return!0}):e?this.destroy(function(t){return g.utils.arrayIndexOf(e,t)>=0}):[]},indexOf:function(e){var t=this();return g.utils.arrayIndexOf(t,e)},replace:function(e,t){var n=this.indexOf(e);n>=0&&(this.valueWillMutate(),this.peek()[n]=t,this.valueHasMutated())}},g.utils.canSetPrototype&&g.utils.setPrototypeOf(g.observableArray.fn,g.observable.fn),g.utils.arrayForEach(["pop","push","reverse","shift","sort","splice","unshift"],function(e){g.observableArray.fn[e]=function(){var t=this.peek();this.valueWillMutate(),this.cacheDiffForKnownOperation(t,e,arguments);
var n=t[e].apply(t,arguments);return this.valueHasMutated(),n===t?this:n}}),g.utils.arrayForEach(["slice"],function(e){g.observableArray.fn[e]=function(){var t=this();return t[e].apply(t,arguments)}}),g.exportSymbol("observableArray",g.observableArray);var T="arrayChange";g.extenders.trackArrayChanges=function(e,t){function n(){if(!o){o=!0;var t=e.notifySubscribers;e.notifySubscribers=function(e,n){return n&&n!==x||++a,t.apply(this,arguments)};var n=[].concat(e.peek()||[]);s=null,r=e.subscribe(function(t){if(t=[].concat(t||[]),e.hasSubscriptionsForEvent(T))var r=i(n,t);n=t,s=null,a=0,r&&r.length&&e.notifySubscribers(r,T)})}}function i(t,n){return(!s||a>1)&&(s=g.utils.compareArrays(t,n,e.compareArrayOptions)),s}if(e.compareArrayOptions={},t&&"object"==("undefined"==typeof t?"undefined":_typeof(t))&&g.utils.extend(e.compareArrayOptions,t),e.compareArrayOptions.sparse=!0,!e.cacheDiffForKnownOperation){var r,o=!1,s=null,a=0,l=e.beforeSubscriptionAdd,u=e.afterSubscriptionRemove;e.beforeSubscriptionAdd=function(t){l&&l.call(e,t),t===T&&n()},e.afterSubscriptionRemove=function(t){u&&u.call(e,t),t!==T||e.hasSubscriptionsForEvent(T)||(r.dispose(),o=!1)},e.cacheDiffForKnownOperation=function(e,t,n){function i(e,t,n){return r[r.length]={status:e,value:t,index:n}}if(o&&!a){var r=[],l=e.length,u=n.length,d=0;switch(t){case"push":d=l;case"unshift":for(var c=0;c<u;c++)i("added",n[c],d+c);break;case"pop":d=l-1;case"shift":l&&i("deleted",e[d],d);break;case"splice":for(var p=Math.min(Math.max(0,n[0]<0?l+n[0]:n[0]),l),f=1===u?l:Math.min(p+(n[1]||0),l),m=p+u-2,v=Math.max(f,m),h=[],b=[],c=p,y=2;c<v;++c,++y)c<f&&b.push(i("deleted",e[c],c)),c<m&&h.push(i("added",n[y],c));g.utils.findMovesInArrayComparison(b,h);break;default:return}s=r}}}};var C=g.utils.createSymbolOrString("_state");g.computed=g.dependentObservable=function(n,i,r){function o(){if(arguments.length>0){if("function"!=typeof s)throw new Error("Cannot write a value to a ko.computed unless you specify a 'write' option. If you wish to read the current value, don't pass any parameters.");return s.apply(a.evaluatorFunctionTarget,arguments),this}return g.dependencyDetection.registerDependency(o),(a.isStale||a.isSleeping&&o.haveDependenciesChanged())&&o.evaluateImmediate(),a.latestValue}if("object"===("undefined"==typeof n?"undefined":_typeof(n))?r=n:(r=r||{},n&&(r.read=n)),"function"!=typeof r.read)throw Error("Pass a function that returns the value of the ko.computed");var s=r.write,a={latestValue:t,isStale:!0,isBeingEvaluated:!1,suppressDisposalUntilDisposeWhenReturnsFalse:!1,isDisposed:!1,pure:!1,isSleeping:!1,readFunction:r.read,evaluatorFunctionTarget:i||r.owner,disposeWhenNodeIsRemoved:r.disposeWhenNodeIsRemoved||r.disposeWhenNodeIsRemoved||null,disposeWhen:r.disposeWhen||r.disposeWhen,domNodeDisposalCallback:null,dependencyTracking:{},dependenciesCount:0,evaluationTimeoutInstance:null};return o[C]=a,o.hasWriteFunction="function"==typeof s,g.utils.canSetPrototype||g.utils.extend(o,g.subscribable.fn),g.subscribable.fn.init(o),g.utils.setPrototypeOfOrExtend(o,D),r.pure?(a.pure=!0,a.isSleeping=!0,g.utils.extend(o,k)):r.deferEvaluation&&g.utils.extend(o,O),g.options.deferUpdates&&g.extenders.deferred(o,!0),e&&(o._options=r),a.disposeWhenNodeIsRemoved&&(a.suppressDisposalUntilDisposeWhenReturnsFalse=!0,a.disposeWhenNodeIsRemoved.nodeType||(a.disposeWhenNodeIsRemoved=null)),a.isSleeping||r.deferEvaluation||o.evaluateImmediate(),a.disposeWhenNodeIsRemoved&&o.isActive()&&g.utils.domNodeDisposal.addDisposeCallback(a.disposeWhenNodeIsRemoved,a.domNodeDisposalCallback=function(){o.dispose()}),o};var D={equalityComparer:u,getDependenciesCount:function(){return this[C].dependenciesCount},addDependencyTracking:function(e,t,n){if(this[C].pure&&t===this)throw Error("A 'pure' computed must not be called recursively");this[C].dependencyTracking[e]=n,n._order=this[C].dependenciesCount++,n._version=t.getVersion()},haveDependenciesChanged:function(){var e,t,n=this[C].dependencyTracking;for(e in n)if(n.hasOwnProperty(e)&&(t=n[e],t._target.hasChanged(t._version)))return!0},markDirty:function(){this._evalDelayed&&!this[C].isBeingEvaluated&&this._evalDelayed()},isActive:function(){return this[C].isStale||this[C].dependenciesCount>0},respondToChange:function(){this._notificationIsPending||this.evaluatePossiblyAsync()},subscribeToDependency:function(e){if(e._deferUpdates&&!this[C].disposeWhenNodeIsRemoved){var t=e.subscribe(this.markDirty,this,"dirty"),n=e.subscribe(this.respondToChange,this);return{_target:e,dispose:function(){t.dispose(),n.dispose()}}}return e.subscribe(this.evaluatePossiblyAsync,this)},evaluatePossiblyAsync:function(){var e=this,t=e.throttleEvaluation;t&&t>=0?(clearTimeout(this[C].evaluationTimeoutInstance),this[C].evaluationTimeoutInstance=g.utils.setTimeout(function(){e.evaluateImmediate(!0)},t)):e._evalDelayed?e._evalDelayed():e.evaluateImmediate(!0)},evaluateImmediate:function(e){var t=this,n=t[C],i=n.disposeWhen;if(!n.isBeingEvaluated&&!n.isDisposed){if(n.disposeWhenNodeIsRemoved&&!g.utils.domNodeIsAttachedToDocument(n.disposeWhenNodeIsRemoved)||i&&i()){if(!n.suppressDisposalUntilDisposeWhenReturnsFalse)return void t.dispose()}else n.suppressDisposalUntilDisposeWhenReturnsFalse=!1;n.isBeingEvaluated=!0;try{this.evaluateImmediate_CallReadWithDependencyDetection(e)}finally{n.isBeingEvaluated=!1}n.dependenciesCount||t.dispose()}},evaluateImmediate_CallReadWithDependencyDetection:function(e){var n=this,i=n[C],r=i.pure?t:!i.dependenciesCount,o={computedObservable:n,disposalCandidates:i.dependencyTracking,disposalCount:i.dependenciesCount};g.dependencyDetection.begin({callbackTarget:o,callback:v,computed:n,isInitial:r}),i.dependencyTracking={},i.dependenciesCount=0;var s=this.evaluateImmediate_CallReadThenEndDependencyDetection(i,o);n.isDifferent(i.latestValue,s)&&(i.isSleeping||n.notifySubscribers(i.latestValue,"beforeChange"),i.latestValue=s,i.isSleeping?n.updateVersion():e&&n.notifySubscribers(i.latestValue)),r&&n.notifySubscribers(i.latestValue,"awake")},evaluateImmediate_CallReadThenEndDependencyDetection:function(e,t){try{var n=e.readFunction;return e.evaluatorFunctionTarget?n.call(e.evaluatorFunctionTarget):n()}finally{g.dependencyDetection.end(),t.disposalCount&&!e.isSleeping&&g.utils.objectForEach(t.disposalCandidates,m),e.isStale=!1}},peek:function(){var e=this[C];return(e.isStale&&!e.dependenciesCount||e.isSleeping&&this.haveDependenciesChanged())&&this.evaluateImmediate(),e.latestValue},limit:function(e){g.subscribable.fn.limit.call(this,e),this._evalDelayed=function(){this._limitBeforeChange(this[C].latestValue),this[C].isStale=!0,this._limitChange(this)}},dispose:function(){var e=this[C];!e.isSleeping&&e.dependencyTracking&&g.utils.objectForEach(e.dependencyTracking,function(e,t){t.dispose&&t.dispose()}),e.disposeWhenNodeIsRemoved&&e.domNodeDisposalCallback&&g.utils.domNodeDisposal.removeDisposeCallback(e.disposeWhenNodeIsRemoved,e.domNodeDisposalCallback),e.dependencyTracking=null,e.dependenciesCount=0,e.isDisposed=!0,e.isStale=!1,e.isSleeping=!1,e.disposeWhenNodeIsRemoved=null}},k={beforeSubscriptionAdd:function(e){var t=this,n=t[C];if(!n.isDisposed&&n.isSleeping&&"change"==e){if(n.isSleeping=!1,n.isStale||t.haveDependenciesChanged())n.dependencyTracking=null,n.dependenciesCount=0,n.isStale=!0,t.evaluateImmediate();else{var i=[];g.utils.objectForEach(n.dependencyTracking,function(e,t){i[t._order]=e}),g.utils.arrayForEach(i,function(e,i){var r=n.dependencyTracking[e],o=t.subscribeToDependency(r._target);o._order=i,o._version=r._version,n.dependencyTracking[e]=o})}n.isDisposed||t.notifySubscribers(n.latestValue,"awake")}},afterSubscriptionRemove:function(e){var n=this[C];n.isDisposed||"change"!=e||this.hasSubscriptionsForEvent("change")||(g.utils.objectForEach(n.dependencyTracking,function(e,t){t.dispose&&(n.dependencyTracking[e]={_target:t._target,_order:t._order,_version:t._version},t.dispose())}),n.isSleeping=!0,this.notifySubscribers(t,"asleep"))},getVersion:function(){var e=this[C];return e.isSleeping&&(e.isStale||this.haveDependenciesChanged())&&this.evaluateImmediate(),g.subscribable.fn.getVersion.call(this)}},O={beforeSubscriptionAdd:function(e){"change"!=e&&"beforeChange"!=e||this.peek()}};g.utils.canSetPrototype&&g.utils.setPrototypeOf(D,g.subscribable.fn);var _=g.observable.protoProperty;g.computed[_]=g.observable,D[_]=g.computed,g.isComputed=function(e){return g.hasPrototype(e,g.computed)},g.isPureComputed=function(e){return g.hasPrototype(e,g.computed)&&e[C]&&e[C].pure},g.exportSymbol("computed",g.computed),g.exportSymbol("dependentObservable",g.computed),g.exportSymbol("isComputed",g.isComputed),g.exportSymbol("isPureComputed",g.isPureComputed),g.exportSymbol("computed.fn",D),g.exportProperty(D,"peek",D.peek),g.exportProperty(D,"dispose",D.dispose),g.exportProperty(D,"isActive",D.isActive),g.exportProperty(D,"getDependenciesCount",D.getDependenciesCount),g.pureComputed=function(e,t){return"function"==typeof e?g.computed(e,t,{pure:!0}):(e=g.utils.extend({},e),e.pure=!0,g.computed(e,t))},g.exportSymbol("pureComputed",g.pureComputed),function(){function e(r,o,s){s=s||new i,r=o(r);var a=!("object"!=("undefined"==typeof r?"undefined":_typeof(r))||null===r||r===t||r instanceof RegExp||r instanceof Date||r instanceof String||r instanceof Number||r instanceof Boolean);if(!a)return r;var l=r instanceof Array?[]:{};return s.save(r,l),n(r,function(n){var i=o(r[n]);switch("undefined"==typeof i?"undefined":_typeof(i)){case"boolean":case"number":case"string":case"function":l[n]=i;break;case"object":case"undefined":var a=s.get(i);l[n]=a!==t?a:e(i,o,s)}}),l}function n(e,t){if(e instanceof Array){for(var n=0;n<e.length;n++)t(n);"function"==typeof e.toJSON&&t("toJSON")}else for(var i in e)t(i)}function i(){this.keys=[],this.values=[]}var r=10;g.toJS=function(t){if(0==arguments.length)throw new Error("When calling ko.toJS, pass the object you want to convert.");return e(t,function(e){for(var t=0;g.isObservable(e)&&t<r;t++)e=e();return e})},g.toJSON=function(e,t,n){var i=g.toJS(e);return g.utils.stringifyJson(i,t,n)},i.prototype={constructor:i,save:function(e,t){var n=g.utils.arrayIndexOf(this.keys,e);n>=0?this.values[n]=t:(this.keys.push(e),this.values.push(t))},get:function(e){var n=g.utils.arrayIndexOf(this.keys,e);return n>=0?this.values[n]:t}}}(),g.exportSymbol("toJS",g.toJS),g.exportSymbol("toJSON",g.toJSON),function(){var e="__ko__hasDomDataOptionValue__";g.selectExtensions={readValue:function(n){switch(g.utils.tagNameLower(n)){case"option":return n[e]===!0?g.utils.domData.get(n,g.bindingHandlers.options.optionValueDomDataKey):g.utils.ieVersion<=7?n.getAttributeNode("value")&&n.getAttributeNode("value").specified?n.value:n.text:n.value;case"select":return n.selectedIndex>=0?g.selectExtensions.readValue(n.options[n.selectedIndex]):t;default:return n.value}},writeValue:function(n,i,r){switch(g.utils.tagNameLower(n)){case"option":switch("undefined"==typeof i?"undefined":_typeof(i)){case"string":g.utils.domData.set(n,g.bindingHandlers.options.optionValueDomDataKey,t),e in n&&delete n[e],n.value=i;break;default:g.utils.domData.set(n,g.bindingHandlers.options.optionValueDomDataKey,i),n[e]=!0,n.value="number"==typeof i?i:""}break;case"select":""!==i&&null!==i||(i=t);for(var o,s=-1,a=0,l=n.options.length;a<l;++a)if(o=g.selectExtensions.readValue(n.options[a]),o==i||""==o&&i===t){s=a;break}(r||s>=0||i===t&&n.size>1)&&(n.selectedIndex=s);break;default:null!==i&&i!==t||(i=""),n.value=i}}}}(),g.exportSymbol("selectExtensions",g.selectExtensions),g.exportSymbol("selectExtensions.readValue",g.selectExtensions.readValue),g.exportSymbol("selectExtensions.writeValue",g.selectExtensions.writeValue),g.expressionRewriting=function(){function e(e){if(g.utils.arrayIndexOf(i,e)>=0)return!1;var t=e.match(r);return null!==t&&(t[1]?"Object("+t[1]+")"+t[2]:e)}function t(e){var t=g.utils.stringTrim(e);123===t.charCodeAt(0)&&(t=t.slice(1,-1));var n,i=[],r=t.match(c),o=[],s=0;if(r){r.push(",");for(var a,l=0;a=r[l];++l){var u=a.charCodeAt(0);if(44===u){if(s<=0){i.push(n&&o.length?{key:n,value:o.join("")}:{unknown:n||o.join("")}),n=s=0,o=[];continue}}else if(58===u){if(!s&&!n&&1===o.length){n=o.pop();continue}}else if(47===u&&l&&a.length>1){var d=r[l-1].match(p);d&&!f[d[0]]&&(t=t.substr(t.indexOf(a)+1),r=t.match(c),r.push(","),l=-1,a="/")}else 40===u||123===u||91===u?++s:41===u||125===u||93===u?--s:n||o.length||34!==u&&39!==u||(a=a.slice(1,-1));o.push(a)}}return i}function n(n,i){function r(t,n){function i(e){return!e||!e.preprocess||(n=e.preprocess(n,t,r))}var u;if(!l){if(!i(g.getBindingHandler(t)))return;m[t]&&(u=e(n))&&s.push("'"+t+"':function(_z){"+u+"=_z}")}a&&(n="function(){return "+n+" }"),o.push("'"+t+"':"+n)}i=i||{};var o=[],s=[],a=i.valueAccessors,l=i.bindingParams,u="string"==typeof n?t(n):n;return g.utils.arrayForEach(u,function(e){r(e.key||e.unknown,e.value)}),s.length&&r("_ko_property_writers","{"+s.join(",")+" }"),o.join(",")}var i=["true","false","null","undefined"],r=/^(?:[$_a-z][$\w]*|(.+)(\.\s*[$_a-z][$\w]*|\[.+\]))$/i,o='"(?:[^"\\\\]|\\\\.)*"',s="'(?:[^'\\\\]|\\\\.)*'",a="/(?:[^/\\\\]|\\\\.)*/w*",l=",\"'{}()/:[\\]",u="[^\\s:,/][^"+l+"]*[^\\s"+l+"]",d="[^\\s]",c=RegExp(o+"|"+s+"|"+a+"|"+u+"|"+d,"g"),p=/[\])"'A-Za-z0-9_$]+$/,f={in:1,return:1,typeof:1},m={};return{bindingRewriteValidators:[],twoWayBindings:m,parseObjectLiteral:t,preProcessBindings:n,keyValueArrayContainsKey:function(e,t){for(var n=0;n<e.length;n++)if(e[n].key==t)return!0;return!1},writeValueToProperty:function(e,t,n,i,r){if(e&&g.isObservable(e))!g.isWriteableObservable(e)||r&&e.peek()===i||e(i);else{var o=t.get("_ko_property_writers");o&&o[n]&&o[n](i)}}}}(),g.exportSymbol("expressionRewriting",g.expressionRewriting),g.exportSymbol("expressionRewriting.bindingRewriteValidators",g.expressionRewriting.bindingRewriteValidators),g.exportSymbol("expressionRewriting.parseObjectLiteral",g.expressionRewriting.parseObjectLiteral),g.exportSymbol("expressionRewriting.preProcessBindings",g.expressionRewriting.preProcessBindings),g.exportSymbol("expressionRewriting._twoWayBindings",g.expressionRewriting.twoWayBindings),g.exportSymbol("jsonExpressionRewriting",g.expressionRewriting),g.exportSymbol("jsonExpressionRewriting.insertPropertyAccessorsIntoJson",g.expressionRewriting.preProcessBindings),function(){function e(e){return 8==e.nodeType&&a.test(s?e.text:e.nodeValue)}function t(e){return 8==e.nodeType&&l.test(s?e.text:e.nodeValue)}function n(n,i){for(var r=n,o=1,s=[];r=r.nextSibling;){if(t(r)&&(o--,0===o))return s;s.push(r),e(r)&&o++}if(!i)throw new Error("Cannot find closing comment tag to match: "+n.nodeValue);return null}function r(e,t){var i=n(e,t);return i?i.length>0?i[i.length-1].nextSibling:e.nextSibling:null}function o(n){var i=n.firstChild,o=null;if(i)do if(o)o.push(i);else if(e(i)){var s=r(i,!0);s?i=s:o=[i]}else t(i)&&(o=[i]);while(i=i.nextSibling);return o}var s=i&&"<!--test-->"===i.createComment("test").text,a=s?/^<!--\s*ko(?:\s+([\s\S]+))?\s*-->$/:/^\s*ko(?:\s+([\s\S]+))?\s*$/,l=s?/^<!--\s*\/ko\s*-->$/:/^\s*\/ko\s*$/,u={ul:!0,ol:!0};g.virtualElements={allowedBindings:{},childNodes:function(t){return e(t)?n(t):t.childNodes},emptyNode:function(t){if(e(t))for(var n=g.virtualElements.childNodes(t),i=0,r=n.length;i<r;i++)g.removeNode(n[i]);else g.utils.emptyDomNode(t)},setDomNodeChildren:function(t,n){if(e(t)){g.virtualElements.emptyNode(t);for(var i=t.nextSibling,r=0,o=n.length;r<o;r++)i.parentNode.insertBefore(n[r],i)}else g.utils.setDomNodeChildren(t,n)},prepend:function(t,n){e(t)?t.parentNode.insertBefore(n,t.nextSibling):t.firstChild?t.insertBefore(n,t.firstChild):t.appendChild(n)},insertAfter:function(t,n,i){i?e(t)?t.parentNode.insertBefore(n,i.nextSibling):i.nextSibling?t.insertBefore(n,i.nextSibling):t.appendChild(n):g.virtualElements.prepend(t,n)},firstChild:function(n){return e(n)?!n.nextSibling||t(n.nextSibling)?null:n.nextSibling:n.firstChild},nextSibling:function(n){return e(n)&&(n=r(n)),n.nextSibling&&t(n.nextSibling)?null:n.nextSibling},hasBindingValue:e,virtualNodeBindingValue:function(e){var t=(s?e.text:e.nodeValue).match(a);return t?t[1]:null},normaliseVirtualElementDomStructure:function(e){if(u[g.utils.tagNameLower(e)]){var t=e.firstChild;if(t)do if(1===t.nodeType){var n=o(t);if(n)for(var i=t.nextSibling,r=0;r<n.length;r++)i?e.insertBefore(n[r],i):e.appendChild(n[r])}while(t=t.nextSibling)}}}}(),g.exportSymbol("virtualElements",g.virtualElements),g.exportSymbol("virtualElements.allowedBindings",g.virtualElements.allowedBindings),g.exportSymbol("virtualElements.emptyNode",g.virtualElements.emptyNode),g.exportSymbol("virtualElements.insertAfter",g.virtualElements.insertAfter),g.exportSymbol("virtualElements.prepend",g.virtualElements.prepend),g.exportSymbol("virtualElements.setDomNodeChildren",g.virtualElements.setDomNodeChildren),function(){function e(e,n,i){var r=e+(i&&i.valueAccessors||"");return n[r]||(n[r]=t(e,i))}function t(e,t){var n=g.expressionRewriting.preProcessBindings(e,t),i="with($context){with($data||{}){return{"+n+"}}}";return new Function("$context","$element",i)}var n="data-bind";g.bindingProvider=function(){this.bindingCache={}},g.utils.extend(g.bindingProvider.prototype,{nodeHasBindings:function(e){switch(e.nodeType){case 1:return null!=e.getAttribute(n)||g.components.getComponentNameForNode(e);case 8:return g.virtualElements.hasBindingValue(e);default:return!1}},getBindings:function(e,t){var n=this.getBindingsString(e,t),i=n?this.parseBindingsString(n,t,e):null;return g.components.addBindingsForCustomElement(i,e,t,!1)},getBindingAccessors:function(e,t){var n=this.getBindingsString(e,t),i=n?this.parseBindingsString(n,t,e,{valueAccessors:!0}):null;return g.components.addBindingsForCustomElement(i,e,t,!0)},getBindingsString:function(e,t){switch(e.nodeType){case 1:return e.getAttribute(n);case 8:return g.virtualElements.virtualNodeBindingValue(e);default:return null}},parseBindingsString:function(t,n,i,r){try{var o=e(t,this.bindingCache,r);return o(n,i)}catch(e){throw e.message="Unable to parse bindings.\nBindings value: "+t+"\nMessage: "+e.message,e}}}),g.bindingProvider.instance=new g.bindingProvider}(),g.exportSymbol("bindingProvider",g.bindingProvider),function(){function e(e){return function(){return e}}function i(e){return e()}function r(e){return g.utils.objectMap(g.dependencyDetection.ignore(e),function(t,n){return function(){return e()[n]}})}function s(t,n,i){return"function"==typeof t?r(t.bind(null,n,i)):g.utils.objectMap(t,e)}function a(e,t){return r(this.getBindings.bind(this,e,t))}function l(e){var t=g.virtualElements.allowedBindings[e];if(!t)throw new Error("The binding '"+e+"' cannot be used with virtual elements")}function u(e,t,n){var i,r=g.virtualElements.firstChild(t),o=g.bindingProvider.instance,s=o.preprocessNode;if(s){for(;i=r;)r=g.virtualElements.nextSibling(i),s.call(o,i);r=g.virtualElements.firstChild(t)}for(;i=r;)r=g.virtualElements.nextSibling(i),d(e,i,n)}function d(e,t,n){var i=!0,r=1===t.nodeType;r&&g.virtualElements.normaliseVirtualElementDomStructure(t);var o=r&&n||g.bindingProvider.instance.nodeHasBindings(t);o&&(i=p(t,null,e,n).shouldBindDescendants),i&&!m[g.utils.tagNameLower(t)]&&u(e,t,!r)}function c(e){var t=[],n={},i=[];return g.utils.objectForEach(e,function r(o){if(!n[o]){var s=g.getBindingHandler(o);s&&(s.after&&(i.push(o),g.utils.arrayForEach(s.after,function(t){if(e[t]){if(g.utils.arrayIndexOf(i,t)!==-1)throw Error("Cannot combine the following bindings, because they have a cyclic dependency: "+i.join(", "));r(t)}}),i.length--),t.push({key:o,handler:s})),n[o]=!0}}),t}function p(e,n,r,o){var s=g.utils.domData.get(e,v);if(!n){if(s)throw Error("You cannot apply bindings multiple times to the same element.");g.utils.domData.set(e,v,!0)}!s&&o&&g.storedBindingContextForNode(e,r);var u;if(n&&"function"!=typeof n)u=n;else{var d=g.bindingProvider.instance,p=d.getBindingAccessors||a,f=g.dependentObservable(function(){return u=n?n(r,e):p.call(d,e,r),u&&r._subscribable&&r._subscribable(),u},null,{disposeWhenNodeIsRemoved:e});u&&f.isActive()||(f=null)}var m;if(u){var h,b;!function(){var n=function(){return g.utils.objectMap(f?f():u,i)};h=f?function(e){return function(){return i(f()[e])}}:function(e){return u[e]},n.get=function(e){return u[e]&&i(h(e))},n.has=function(e){return e in u},b=c(u),g.utils.arrayForEach(b,function(i){var o=i.handler.init,s=i.handler.update,a=i.key;8===e.nodeType&&l(a);try{"function"==typeof o&&g.dependencyDetection.ignore(function(){var i=o(e,h(a),n,r.$data,r);if(i&&i.controlsDescendantBindings){if(m!==t)throw new Error("Multiple bindings ("+m+" and "+a+") are trying to control descendant bindings of the same element. You cannot use these bindings together on the same element.");m=a}}),"function"==typeof s&&g.dependentObservable(function(){s(e,h(a),n,r.$data,r)},null,{disposeWhenNodeIsRemoved:e})}catch(e){throw e.message='Unable to process binding "'+a+": "+u[a]+'"\nMessage: '+e.message,e}})}()}return{shouldBindDescendants:m===t}}function f(e){return e&&e instanceof g.bindingContext?e:new g.bindingContext(e)}g.bindingHandlers={};var m={script:!0,textarea:!0,template:!0};g.getBindingHandler=function(e){return g.bindingHandlers[e]},g.bindingContext=function(e,n,i,r){function o(){var t=u?e():e,o=g.utils.unwrapObservable(t);return n?(n._subscribable&&n._subscribable(),g.utils.extend(l,n),d&&(l._subscribable=d)):(l.$parents=[],l.$root=o,l.ko=g),l.$rawData=t,l.$data=o,i&&(l[i]=o),r&&r(l,n,o),l.$data}function s(){return a&&!g.utils.anyDomNodeIsAttachedToDocument(a)}var a,l=this,u="function"==typeof e&&!g.isObservable(e),d=g.dependentObservable(o,null,{disposeWhen:s,disposeWhenNodeIsRemoved:!0});d.isActive()&&(l._subscribable=d,d.equalityComparer=null,a=[],d._addNode=function(e){a.push(e),g.utils.domNodeDisposal.addDisposeCallback(e,function(e){g.utils.arrayRemoveItem(a,e),a.length||(d.dispose(),l._subscribable=d=t)})})},g.bindingContext.prototype.createChildContext=function(e,t,n){return new g.bindingContext(e,this,t,function(e,t){e.$parentContext=t,e.$parent=t.$data,e.$parents=(t.$parents||[]).slice(0),e.$parents.unshift(e.$parent),n&&n(e)})},g.bindingContext.prototype.extend=function(e){return new g.bindingContext(this._subscribable||this.$data,this,null,function(t,n){t.$rawData=n.$rawData,g.utils.extend(t,"function"==typeof e?e():e)})};var v=g.utils.domData.nextKey(),h=g.utils.domData.nextKey();g.storedBindingContextForNode=function(e,t){return 2!=arguments.length?g.utils.domData.get(e,h):(g.utils.domData.set(e,h,t),void(t._subscribable&&t._subscribable._addNode(e)))},g.applyBindingAccessorsToNode=function(e,t,n){return 1===e.nodeType&&g.virtualElements.normaliseVirtualElementDomStructure(e),p(e,t,f(n),!0)},g.applyBindingsToNode=function(e,t,n){var i=f(n);return g.applyBindingAccessorsToNode(e,s(t,i,e),i)},g.applyBindingsToDescendants=function(e,t){1!==t.nodeType&&8!==t.nodeType||u(f(e),t,!0)},g.applyBindings=function(e,t){if(!o&&n.jQuery&&(o=n.jQuery),t&&1!==t.nodeType&&8!==t.nodeType)throw new Error("ko.applyBindings: first parameter should be your view model; second parameter should be a DOM node");t=t||n.document.body,d(f(e),t,!0)},g.contextFor=function(e){switch(e.nodeType){case 1:case 8:var n=g.storedBindingContextForNode(e);if(n)return n;if(e.parentNode)return g.contextFor(e.parentNode)}return t},g.dataFor=function(e){var n=g.contextFor(e);return n?n.$data:t},g.exportSymbol("bindingHandlers",g.bindingHandlers),g.exportSymbol("applyBindings",g.applyBindings),g.exportSymbol("applyBindingsToDescendants",g.applyBindingsToDescendants),g.exportSymbol("applyBindingAccessorsToNode",g.applyBindingAccessorsToNode),g.exportSymbol("applyBindingsToNode",g.applyBindingsToNode),g.exportSymbol("contextFor",g.contextFor),g.exportSymbol("dataFor",g.dataFor)}(),function(e){function t(t,n){return t.hasOwnProperty(n)?t[n]:e}function n(e,n){var r,a=t(o,e);a?a.subscribe(n):(a=o[e]=new g.subscribable,a.subscribe(n),i(e,function(t,n){var i=!(!n||!n.synchronous);s[e]={definition:t,isSynchronousComponent:i},delete o[e],r||i?a.notifySubscribers(t):g.tasks.schedule(function(){a.notifySubscribers(t)})}),r=!0)}function i(e,t){r("getConfig",[e],function(n){n?r("loadComponent",[e,n],function(e){t(e,n)}):t(null,null)})}function r(t,n,i,o){o||(o=g.components.loaders.slice(0));var s=o.shift();if(s){var a=s[t];if(a){var l=!1,u=a.apply(s,n.concat(function(e){l?i(null):null!==e?i(e):r(t,n,i,o)}));if(u!==e&&(l=!0,!s.suppressLoaderExceptions))throw new Error("Component loaders must supply values by invoking the callback, not by returning values synchronously.")}else r(t,n,i,o)}else i(null)}var o={},s={};g.components={get:function(e,i){var r=t(s,e);r?r.isSynchronousComponent?g.dependencyDetection.ignore(function(){i(r.definition)}):g.tasks.schedule(function(){i(r.definition)}):n(e,i)},clearCachedDefinition:function(e){delete s[e]},_getFirstResultFromLoaders:r},g.components.loaders=[],g.exportSymbol("components",g.components),g.exportSymbol("components.get",g.components.get),g.exportSymbol("components.clearCachedDefinition",g.components.clearCachedDefinition)}(),function(e){function t(e,t,n,i){var r={},o=2,s=function(){0===--o&&i(r)},a=n.template,l=n.viewModel;a?d(t,a,function(t){g.components._getFirstResultFromLoaders("loadTemplate",[e,t],function(e){r.template=e,s()})}):s(),l?d(t,l,function(t){g.components._getFirstResultFromLoaders("loadViewModel",[e,t],function(e){r[f]=e,s()})}):s()}function r(e,t,n){if("string"==typeof t)n(g.utils.parseHtmlFragment(t));else if(t instanceof Array)n(t);else if(u(t))n(g.utils.makeArray(t.childNodes));else if(t.element){var r=t.element;if(a(r))n(s(r));else if("string"==typeof r){var o=i.getElementById(r);o?n(s(o)):e("Cannot find element with ID "+r)}else e("Unknown element type: "+r)}else e("Unknown template value: "+t)}function o(e,t,n){if("function"==typeof t)n(function(e){return new t(e)});else if("function"==typeof t[f])n(t[f]);else if("instance"in t){var i=t.instance;n(function(e,t){return i})}else"viewModel"in t?o(e,t.viewModel,n):e("Unknown viewModel value: "+t)}function s(e){switch(g.utils.tagNameLower(e)){case"script":return g.utils.parseHtmlFragment(e.text);case"textarea":return g.utils.parseHtmlFragment(e.value);case"template":if(u(e.content))return g.utils.cloneNodes(e.content.childNodes)}return g.utils.cloneNodes(e.childNodes)}function a(e){return n.HTMLElement?e instanceof HTMLElement:e&&e.tagName&&1===e.nodeType}function u(e){return n.DocumentFragment?e instanceof DocumentFragment:e&&11===e.nodeType}function d(e,t,i){"string"==typeof t.require?l||n.require?(l||n.require)([t.require],i):e("Uses require, but no AMD loader is present"):i(t)}function c(e){return function(t){throw new Error("Component '"+e+"': "+t)}}var p={};g.components.register=function(e,t){if(!t)throw new Error("Invalid configuration for "+e);if(g.components.isRegistered(e))throw new Error("Component "+e+" is already registered");p[e]=t},g.components.isRegistered=function(e){return p.hasOwnProperty(e)},g.components.unregister=function(e){delete p[e],g.components.clearCachedDefinition(e)},g.components.defaultLoader={getConfig:function(e,t){var n=p.hasOwnProperty(e)?p[e]:null;t(n)},loadComponent:function(e,n,i){var r=c(e);d(r,n,function(n){t(e,r,n,i)})},loadTemplate:function(e,t,n){r(c(e),t,n)},loadViewModel:function(e,t,n){o(c(e),t,n)}};var f="createViewModel";g.exportSymbol("components.register",g.components.register),g.exportSymbol("components.isRegistered",g.components.isRegistered),g.exportSymbol("components.unregister",g.components.unregister),g.exportSymbol("components.defaultLoader",g.components.defaultLoader),g.components.loaders.push(g.components.defaultLoader),g.components._allRegisteredComponents=p}(),function(e){function t(e,t){var i=e.getAttribute("params");if(i){var r=n.parseBindingsString(i,t,e,{valueAccessors:!0,bindingParams:!0}),o=g.utils.objectMap(r,function(t,n){return g.computed(t,null,{disposeWhenNodeIsRemoved:e})}),s=g.utils.objectMap(o,function(t,n){var i=t.peek();return t.isActive()?g.computed({read:function(){return g.utils.unwrapObservable(t())},write:g.isWriteableObservable(i)&&function(e){t()(e)},disposeWhenNodeIsRemoved:e}):i});return s.hasOwnProperty("$raw")||(s.$raw=o),s}return{$raw:{}}}g.components.getComponentNameForNode=function(e){var t=g.utils.tagNameLower(e);if(g.components.isRegistered(t)&&(t.indexOf("-")!=-1||""+e=="[object HTMLUnknownElement]"||g.utils.ieVersion<=8&&e.tagName===t))return t},g.components.addBindingsForCustomElement=function(e,n,i,r){if(1===n.nodeType){var o=g.components.getComponentNameForNode(n);if(o){if(e=e||{},e.component)throw new Error('Cannot use the "component" binding on a custom element matching a component');var s={name:o,params:t(n,i)};e.component=r?function(){return s}:s}}return e};var n=new g.bindingProvider;g.utils.ieVersion<9&&(g.components.register=function(e){return function(t){return i.createElement(t),e.apply(this,arguments)}}(g.components.register),i.createDocumentFragment=function(e){return function(){var t=e(),n=g.components._allRegisteredComponents;for(var i in n)n.hasOwnProperty(i)&&t.createElement(i);return t}}(i.createDocumentFragment))}(),function(e){function t(e,t,n){var i=t.template;if(!i)throw new Error("Component '"+e+"' has no template");var r=g.utils.cloneNodes(i);g.virtualElements.setDomNodeChildren(n,r)}function n(e,t,n,i){var r=e.createViewModel;return r?r.call(e,i,{element:t,templateNodes:n}):i}var i=0;g.bindingHandlers.component={init:function(r,o,s,a,l){var u,d,c=function(){var e=u&&u.dispose;"function"==typeof e&&e.call(u),u=null,d=null},p=g.utils.makeArray(g.virtualElements.childNodes(r));return g.utils.domNodeDisposal.addDisposeCallback(r,c),g.computed(function(){var s,a,f=g.utils.unwrapObservable(o());if("string"==typeof f?s=f:(s=g.utils.unwrapObservable(f.name),a=g.utils.unwrapObservable(f.params)),!s)throw new Error("No component name specified");var m=d=++i;g.components.get(s,function(i){if(d===m){if(c(),!i)throw new Error("Unknown component '"+s+"'");t(s,i,r);var o=n(i,r,p,a),f=l.createChildContext(o,e,function(e){e.$component=o,e.$componentTemplateNodes=p});u=o,g.applyBindingsToDescendants(f,r)}})},null,{disposeWhenNodeIsRemoved:r}),{controlsDescendantBindings:!0}}},g.virtualElements.allowedBindings.component=!0}();var A={class:"className",for:"htmlFor"};g.bindingHandlers.attr={update:function(e,n,i){var r=g.utils.unwrapObservable(n())||{};g.utils.objectForEach(r,function(n,i){i=g.utils.unwrapObservable(i);var r=i===!1||null===i||i===t;r&&e.removeAttribute(n),g.utils.ieVersion<=8&&n in A?(n=A[n],r?e.removeAttribute(n):e[n]=i):r||e.setAttribute(n,i.toString()),"name"===n&&g.utils.setElementName(e,r?"":i.toString())})}},function(){g.bindingHandlers.checked={after:["value","attr"],init:function(e,n,i){function r(){var t=e.checked,r=f?s():t;if(!g.computedContext.isInitial()&&(!l||t)){var o=g.dependencyDetection.ignore(n);if(d){var a=c?o.peek():o;p!==r?(t&&(g.utils.addOrRemoveItem(a,r,!0),g.utils.addOrRemoveItem(a,p,!1)),p=r):g.utils.addOrRemoveItem(a,r,t),c&&g.isWriteableObservable(o)&&o(a)}else g.expressionRewriting.writeValueToProperty(o,i,"checked",r,!0)}}function o(){var t=g.utils.unwrapObservable(n());d?e.checked=g.utils.arrayIndexOf(t,s())>=0:a?e.checked=t:e.checked=s()===t}var s=g.pureComputed(function(){return i.has("checkedValue")?g.utils.unwrapObservable(i.get("checkedValue")):i.has("value")?g.utils.unwrapObservable(i.get("value")):e.value}),a="checkbox"==e.type,l="radio"==e.type;if(a||l){var u=n(),d=a&&g.utils.unwrapObservable(u)instanceof Array,c=!(d&&u.push&&u.splice),p=d?s():t,f=l||d;l&&!e.name&&g.bindingHandlers.uniqueName.init(e,function(){return!0}),g.computed(r,null,{disposeWhenNodeIsRemoved:e}),g.utils.registerEventHandler(e,"click",r),g.computed(o,null,{disposeWhenNodeIsRemoved:e}),u=t}}},g.expressionRewriting.twoWayBindings.checked=!0,g.bindingHandlers.checkedValue={update:function(e,t){e.value=g.utils.unwrapObservable(t())}}}();var R="__ko__cssValue";g.bindingHandlers.css={update:function(e,t){var n=g.utils.unwrapObservable(t());null!==n&&"object"==("undefined"==typeof n?"undefined":_typeof(n))?g.utils.objectForEach(n,function(t,n){
n=g.utils.unwrapObservable(n),g.utils.toggleDomNodeCssClass(e,t,n)}):(n=g.utils.stringTrim(String(n||"")),g.utils.toggleDomNodeCssClass(e,e[R],!1),e[R]=n,g.utils.toggleDomNodeCssClass(e,n,!0))}},g.bindingHandlers.enable={update:function(e,t){var n=g.utils.unwrapObservable(t());n&&e.disabled?e.removeAttribute("disabled"):n||e.disabled||(e.disabled=!0)}},g.bindingHandlers.disable={update:function(e,t){g.bindingHandlers.enable.update(e,function(){return!g.utils.unwrapObservable(t())})}},g.bindingHandlers.event={init:function(e,t,n,i,r){var o=t()||{};g.utils.objectForEach(o,function(o){"string"==typeof o&&g.utils.registerEventHandler(e,o,function(e){var s,a=t()[o];if(a){try{var l=g.utils.makeArray(arguments);i=r.$data,l.unshift(i),s=a.apply(i,l)}finally{s!==!0&&(e.preventDefault?e.preventDefault():e.returnValue=!1)}var u=n.get(o+"Bubble")!==!1;u||(e.cancelBubble=!0,e.stopPropagation&&e.stopPropagation())}})})}},g.bindingHandlers.foreach={makeTemplateValueAccessor:function(e){return function(){var t=e(),n=g.utils.peekObservable(t);return n&&"number"!=typeof n.length?(g.utils.unwrapObservable(t),{foreach:n.data,as:n.as,includeDestroyed:n.includeDestroyed,afterAdd:n.afterAdd,beforeRemove:n.beforeRemove,afterRender:n.afterRender,beforeMove:n.beforeMove,afterMove:n.afterMove,templateEngine:g.nativeTemplateEngine.instance}):{foreach:t,templateEngine:g.nativeTemplateEngine.instance}}},init:function(e,t,n,i,r){return g.bindingHandlers.template.init(e,g.bindingHandlers.foreach.makeTemplateValueAccessor(t))},update:function(e,t,n,i,r){return g.bindingHandlers.template.update(e,g.bindingHandlers.foreach.makeTemplateValueAccessor(t),n,i,r)}},g.expressionRewriting.bindingRewriteValidators.foreach=!1,g.virtualElements.allowedBindings.foreach=!0;var I="__ko_hasfocusUpdating",B="__ko_hasfocusLastValue";g.bindingHandlers.hasfocus={init:function(e,t,n){var i=function(i){e[I]=!0;var r=e.ownerDocument;if("activeElement"in r){var o;try{o=r.activeElement}catch(e){o=r.body}i=o===e}var s=t();g.expressionRewriting.writeValueToProperty(s,n,"hasfocus",i,!0),e[B]=i,e[I]=!1},r=i.bind(null,!0),o=i.bind(null,!1);g.utils.registerEventHandler(e,"focus",r),g.utils.registerEventHandler(e,"focusin",r),g.utils.registerEventHandler(e,"blur",o),g.utils.registerEventHandler(e,"focusout",o)},update:function(e,t){var n=!!g.utils.unwrapObservable(t());e[I]||e[B]===n||(n?e.focus():e.blur(),!n&&e[B]&&e.ownerDocument.body.focus(),g.dependencyDetection.ignore(g.utils.triggerEvent,null,[e,n?"focusin":"focusout"]))}},g.expressionRewriting.twoWayBindings.hasfocus=!0,g.bindingHandlers.hasFocus=g.bindingHandlers.hasfocus,g.expressionRewriting.twoWayBindings.hasFocus=!0,g.bindingHandlers.html={init:function(){return{controlsDescendantBindings:!0}},update:function(e,t){g.utils.setHtml(e,t())}},b("if"),b("ifnot",!1,!0),b("with",!0,!1,function(e,t){return e.createChildContext(t)});var F={};g.bindingHandlers.options={init:function(e){if("select"!==g.utils.tagNameLower(e))throw new Error("options binding applies only to SELECT elements");for(;e.length>0;)e.remove(0);return{controlsDescendantBindings:!0}},update:function(e,n,i){function r(){return g.utils.arrayFilter(e.options,function(e){return e.selected})}function o(e,t,n){var i="undefined"==typeof t?"undefined":_typeof(t);return"function"==i?t(e):"string"==i?e[t]:n}function s(n,r,s){s.length&&(b=!m&&s[0].selected?[g.selectExtensions.readValue(s[0])]:[],y=!0);var a=e.ownerDocument.createElement("option");if(n===F)g.utils.setTextContent(a,i.get("optionsCaption")),g.selectExtensions.writeValue(a,t);else{var l=o(n,i.get("optionsValue"),n);g.selectExtensions.writeValue(a,g.utils.unwrapObservable(l));var u=o(n,i.get("optionsText"),l);g.utils.setTextContent(a,u)}return[a]}function a(t,n){if(y&&m)g.selectExtensions.writeValue(e,g.utils.unwrapObservable(i.get("value")),!0);else if(b.length){var r=g.utils.arrayIndexOf(b,g.selectExtensions.readValue(n[0]))>=0;g.utils.setOptionNodeSelectionState(n[0],r),y&&!r&&g.dependencyDetection.ignore(g.utils.triggerEvent,null,[e,"change"])}}var l,u,d=0==e.length,c=e.multiple,p=!d&&c?e.scrollTop:null,f=g.utils.unwrapObservable(n()),m=i.get("valueAllowUnset")&&i.has("value"),v=i.get("optionsIncludeDestroyed"),h={},b=[];m||(c?b=g.utils.arrayMap(r(),g.selectExtensions.readValue):e.selectedIndex>=0&&b.push(g.selectExtensions.readValue(e.options[e.selectedIndex]))),f&&("undefined"==typeof f.length&&(f=[f]),u=g.utils.arrayFilter(f,function(e){return v||e===t||null===e||!g.utils.unwrapObservable(e._destroy)}),i.has("optionsCaption")&&(l=g.utils.unwrapObservable(i.get("optionsCaption")),null!==l&&l!==t&&u.unshift(F)));var y=!1;h.beforeRemove=function(t){e.removeChild(t)};var x=a;i.has("optionsAfterRender")&&"function"==typeof i.get("optionsAfterRender")&&(x=function(e,n){a(e,n),g.dependencyDetection.ignore(i.get("optionsAfterRender"),null,[n[0],e!==F?e:t])}),g.utils.setDomNodeChildrenFromArrayMapping(e,u,s,h,x),g.dependencyDetection.ignore(function(){if(m)g.selectExtensions.writeValue(e,g.utils.unwrapObservable(i.get("value")),!0);else{var t;t=c?b.length&&r().length<b.length:b.length&&e.selectedIndex>=0?g.selectExtensions.readValue(e.options[e.selectedIndex])!==b[0]:b.length||e.selectedIndex>=0,t&&g.utils.triggerEvent(e,"change")}}),g.utils.ensureSelectElementIsRenderedCorrectly(e),p&&Math.abs(p-e.scrollTop)>20&&(e.scrollTop=p)}},g.bindingHandlers.options.optionValueDomDataKey=g.utils.domData.nextKey(),g.bindingHandlers.selectedOptions={after:["options","foreach"],init:function(e,t,n){g.utils.registerEventHandler(e,"change",function(){var i=t(),r=[];g.utils.arrayForEach(e.getElementsByTagName("option"),function(e){e.selected&&r.push(g.selectExtensions.readValue(e))}),g.expressionRewriting.writeValueToProperty(i,n,"selectedOptions",r)})},update:function(e,t){if("select"!=g.utils.tagNameLower(e))throw new Error("values binding applies only to SELECT elements");var n=g.utils.unwrapObservable(t()),i=e.scrollTop;n&&"number"==typeof n.length&&g.utils.arrayForEach(e.getElementsByTagName("option"),function(e){var t=g.utils.arrayIndexOf(n,g.selectExtensions.readValue(e))>=0;e.selected!=t&&g.utils.setOptionNodeSelectionState(e,t)}),e.scrollTop=i}},g.expressionRewriting.twoWayBindings.selectedOptions=!0,g.bindingHandlers.style={update:function(e,n){var i=g.utils.unwrapObservable(n()||{});g.utils.objectForEach(i,function(n,i){i=g.utils.unwrapObservable(i),null!==i&&i!==t&&i!==!1||(i=""),e.style[n]=i})}},g.bindingHandlers.submit={init:function(e,t,n,i,r){if("function"!=typeof t())throw new Error("The value for a submit binding must be a function");g.utils.registerEventHandler(e,"submit",function(n){var i,o=t();try{i=o.call(r.$data,e)}finally{i!==!0&&(n.preventDefault?n.preventDefault():n.returnValue=!1)}})}},g.bindingHandlers.text={init:function(){return{controlsDescendantBindings:!0}},update:function(e,t){g.utils.setTextContent(e,t())}},g.virtualElements.allowedBindings.text=!0,function(){if(n&&n.navigator)var i=function(e){if(e)return parseFloat(e[1])},r=n.opera&&n.opera.version&&parseInt(n.opera.version()),o=n.navigator.userAgent,s=i(o.match(/^(?:(?!chrome).)*version\/([^ ]*) safari/i)),a=i(o.match(/Firefox\/([^ ]*)/));if(g.utils.ieVersion<10)var l=g.utils.domData.nextKey(),u=g.utils.domData.nextKey(),d=function(e){var t=this.activeElement,n=t&&g.utils.domData.get(t,u);n&&n(e)},c=function(e,t){var n=e.ownerDocument;g.utils.domData.get(n,l)||(g.utils.domData.set(n,l,!0),g.utils.registerEventHandler(n,"selectionchange",d)),g.utils.domData.set(e,u,t)};g.bindingHandlers.textInput={init:function(n,i,o){var l,u,d=n.value,p=function(r){clearTimeout(l),u=l=t;var s=n.value;d!==s&&(e&&r&&(n._ko_textInputProcessedEvent=r.type),d=s,g.expressionRewriting.writeValueToProperty(i(),o,"textInput",s))},f=function(t){if(!l){u=n.value;var i=e?p.bind(n,{type:t.type}):p;l=g.utils.setTimeout(i,4)}},m=9==g.utils.ieVersion?f:p,v=function e(){var r=g.utils.unwrapObservable(i());return null!==r&&r!==t||(r=""),u!==t&&r===u?void g.utils.setTimeout(e,4):void(n.value!==r&&(d=r,n.value=r))},h=function(e,t){g.utils.registerEventHandler(n,e,t)};e&&g.bindingHandlers.textInput._forceUpdateOn?g.utils.arrayForEach(g.bindingHandlers.textInput._forceUpdateOn,function(e){"after"==e.slice(0,5)?h(e.slice(5),f):h(e,p)}):g.utils.ieVersion<10?(h("propertychange",function(e){"value"===e.propertyName&&m(e)}),8==g.utils.ieVersion&&(h("keyup",p),h("keydown",p)),g.utils.ieVersion>=8&&(c(n,m),h("dragend",f))):(h("input",p),s<5&&"textarea"===g.utils.tagNameLower(n)?(h("keydown",f),h("paste",f),h("cut",f)):r<11?h("keydown",f):a<4&&(h("DOMAutoComplete",p),h("dragdrop",p),h("drop",p))),h("change",p),g.computed(v,null,{disposeWhenNodeIsRemoved:n})}},g.expressionRewriting.twoWayBindings.textInput=!0,g.bindingHandlers.textinput={preprocess:function(e,t,n){n("textInput",e)}}}(),g.bindingHandlers.uniqueName={init:function(e,t){if(t()){var n="ko_unique_"+ ++g.bindingHandlers.uniqueName.currentIndex;g.utils.setElementName(e,n)}}},g.bindingHandlers.uniqueName.currentIndex=0,g.bindingHandlers.value={after:["options","foreach"],init:function(e,t,n){if("input"==e.tagName.toLowerCase()&&("checkbox"==e.type||"radio"==e.type))return void g.applyBindingAccessorsToNode(e,{checkedValue:t});var i=["change"],r=n.get("valueUpdate"),o=!1,s=null;r&&("string"==typeof r&&(r=[r]),g.utils.arrayPushAll(i,r),i=g.utils.arrayGetDistinctValues(i));var a=function(){s=null,o=!1;var i=t(),r=g.selectExtensions.readValue(e);g.expressionRewriting.writeValueToProperty(i,n,"value",r)},l=g.utils.ieVersion&&"input"==e.tagName.toLowerCase()&&"text"==e.type&&"off"!=e.autocomplete&&(!e.form||"off"!=e.form.autocomplete);l&&g.utils.arrayIndexOf(i,"propertychange")==-1&&(g.utils.registerEventHandler(e,"propertychange",function(){o=!0}),g.utils.registerEventHandler(e,"focus",function(){o=!1}),g.utils.registerEventHandler(e,"blur",function(){o&&a()})),g.utils.arrayForEach(i,function(t){var n=a;g.utils.stringStartsWith(t,"after")&&(n=function(){s=g.selectExtensions.readValue(e),g.utils.setTimeout(a,0)},t=t.substring("after".length)),g.utils.registerEventHandler(e,t,n)});var u=function i(){var r=g.utils.unwrapObservable(t()),o=g.selectExtensions.readValue(e);if(null!==s&&r===s)return void g.utils.setTimeout(i,0);var a=r!==o;if(a)if("select"===g.utils.tagNameLower(e)){var l=n.get("valueAllowUnset"),u=function(){g.selectExtensions.writeValue(e,r,l)};u(),l||r===g.selectExtensions.readValue(e)?g.utils.setTimeout(u,0):g.dependencyDetection.ignore(g.utils.triggerEvent,null,[e,"change"])}else g.selectExtensions.writeValue(e,r)};g.computed(u,null,{disposeWhenNodeIsRemoved:e})},update:function(){}},g.expressionRewriting.twoWayBindings.value=!0,g.bindingHandlers.visible={update:function(e,t){var n=g.utils.unwrapObservable(t()),i=!("none"==e.style.display);n&&!i?e.style.display="":!n&&i&&(e.style.display="none")}},h("click"),g.templateEngine=function(){},g.templateEngine.prototype.renderTemplateSource=function(e,t,n,i){throw new Error("Override renderTemplateSource")},g.templateEngine.prototype.createJavaScriptEvaluatorBlock=function(e){throw new Error("Override createJavaScriptEvaluatorBlock")},g.templateEngine.prototype.makeTemplateSource=function(e,t){if("string"==typeof e){t=t||i;var n=t.getElementById(e);if(!n)throw new Error("Cannot find template with ID "+e);return new g.templateSources.domElement(n)}if(1==e.nodeType||8==e.nodeType)return new g.templateSources.anonymousTemplate(e);throw new Error("Unknown template type: "+e)},g.templateEngine.prototype.renderTemplate=function(e,t,n,i){var r=this.makeTemplateSource(e,i);return this.renderTemplateSource(r,t,n,i)},g.templateEngine.prototype.isTemplateRewritten=function(e,t){return this.allowTemplateRewriting===!1||this.makeTemplateSource(e,t).data("isRewritten")},g.templateEngine.prototype.rewriteTemplate=function(e,t,n){var i=this.makeTemplateSource(e,n),r=t(i.text());i.text(r),i.data("isRewritten",!0)},g.exportSymbol("templateEngine",g.templateEngine),g.templateRewriting=function(){function e(e){for(var t=g.expressionRewriting.bindingRewriteValidators,n=0;n<e.length;n++){var i=e[n].key;if(t.hasOwnProperty(i)){var r=t[i];if("function"==typeof r){var o=r(e[n].value);if(o)throw new Error(o)}else if(!r)throw new Error("This template engine does not support the '"+i+"' binding within its templates")}}}function t(t,n,i,r){var o=g.expressionRewriting.parseObjectLiteral(t);e(o);var s=g.expressionRewriting.preProcessBindings(o,{valueAccessors:!0}),a="ko.__tr_ambtns(function($context,$element){return(function(){return{ "+s+" } })()},'"+i.toLowerCase()+"')";return r.createJavaScriptEvaluatorBlock(a)+n}var n=/(<([a-z]+\d*)(?:\s+(?!data-bind\s*=\s*)[a-z0-9\-]+(?:=(?:\"[^\"]*\"|\'[^\']*\'|[^>]*))?)*\s+)data-bind\s*=\s*(["'])([\s\S]*?)\3/gi,i=/<!--\s*ko\b\s*([\s\S]*?)\s*-->/g;return{ensureTemplateIsRewritten:function(e,t,n){t.isTemplateRewritten(e,n)||t.rewriteTemplate(e,function(e){return g.templateRewriting.memoizeBindingAttributeSyntax(e,t)},n)},memoizeBindingAttributeSyntax:function(e,r){return e.replace(n,function(){return t(arguments[4],arguments[1],arguments[2],r)}).replace(i,function(){return t(arguments[1],"<!-- ko -->","#comment",r)})},applyMemoizedBindingsToNextSibling:function(e,t){return g.memoization.memoize(function(n,i){var r=n.nextSibling;r&&r.nodeName.toLowerCase()===t&&g.applyBindingAccessorsToNode(r,e,i)})}}}(),g.exportSymbol("__tr_ambtns",g.templateRewriting.applyMemoizedBindingsToNextSibling),function(){function e(e){return g.utils.domData.get(e,l)||{}}function n(e,t){g.utils.domData.set(e,l,t)}g.templateSources={};var i=1,r=2,o=3,s=4;g.templateSources.domElement=function(e){if(this.domElement=e,e){var t=g.utils.tagNameLower(e);this.templateType="script"===t?i:"textarea"===t?r:"template"==t&&e.content&&11===e.content.nodeType?o:s}},g.templateSources.domElement.prototype.text=function(){var e=this.templateType===i?"text":this.templateType===r?"value":"innerHTML";if(0==arguments.length)return this.domElement[e];var t=arguments[0];"innerHTML"===e?g.utils.setHtml(this.domElement,t):this.domElement[e]=t};var a=g.utils.domData.nextKey()+"_";g.templateSources.domElement.prototype.data=function(e){return 1===arguments.length?g.utils.domData.get(this.domElement,a+e):void g.utils.domData.set(this.domElement,a+e,arguments[1])};var l=g.utils.domData.nextKey();g.templateSources.domElement.prototype.nodes=function(){var i=this.domElement;if(0==arguments.length){var r=e(i),a=r.containerData;return a||(this.templateType===o?i.content:this.templateType===s?i:t)}var l=arguments[0];n(i,{containerData:l})},g.templateSources.anonymousTemplate=function(e){this.domElement=e},g.templateSources.anonymousTemplate.prototype=new g.templateSources.domElement,g.templateSources.anonymousTemplate.prototype.constructor=g.templateSources.anonymousTemplate,g.templateSources.anonymousTemplate.prototype.text=function(){if(0==arguments.length){var i=e(this.domElement);return i.textData===t&&i.containerData&&(i.textData=i.containerData.innerHTML),i.textData}var r=arguments[0];n(this.domElement,{textData:r})},g.exportSymbol("templateSources",g.templateSources),g.exportSymbol("templateSources.domElement",g.templateSources.domElement),g.exportSymbol("templateSources.anonymousTemplate",g.templateSources.anonymousTemplate)}(),function(){function e(e,t,n){for(var i,r=e,o=g.virtualElements.nextSibling(t);r&&(i=r)!==o;)r=g.virtualElements.nextSibling(i),n(i,r)}function n(t,n){if(t.length){var i=t[0],r=t[t.length-1],o=i.parentNode,s=g.bindingProvider.instance,a=s.preprocessNode;if(a){if(e(i,r,function(e,t){var n=e.previousSibling,o=a.call(s,e);o&&(e===i&&(i=o[0]||t),e===r&&(r=o[o.length-1]||n))}),t.length=0,!i)return;i===r?t.push(i):(t.push(i,r),g.utils.fixUpContinuousNodeArray(t,o))}e(i,r,function(e){1!==e.nodeType&&8!==e.nodeType||g.applyBindings(n,e)}),e(i,r,function(e){1!==e.nodeType&&8!==e.nodeType||g.memoization.unmemoizeDomNodeAndDescendants(e,[n])}),g.utils.fixUpContinuousNodeArray(t,o)}}function i(e){return e.nodeType?e:e.length>0?e[0]:null}function r(e,t,r,o,s){s=s||{};var l=e&&i(e),u=(l||r||{}).ownerDocument,d=s.templateEngine||a;g.templateRewriting.ensureTemplateIsRewritten(r,d,u);var c=d.renderTemplate(r,o,s,u);if("number"!=typeof c.length||c.length>0&&"number"!=typeof c[0].nodeType)throw new Error("Template engine must return an array of DOM nodes");var p=!1;switch(t){case"replaceChildren":g.virtualElements.setDomNodeChildren(e,c),p=!0;break;case"replaceNode":g.utils.replaceDomNodes(e,c),p=!0;break;case"ignoreTargetNode":break;default:throw new Error("Unknown renderMode: "+t)}return p&&(n(c,o),s.afterRender&&g.dependencyDetection.ignore(s.afterRender,null,[c,o.$data])),c}function o(e,t,n){return g.isObservable(e)?e():"function"==typeof e?e(t,n):e}function s(e,n){var i=g.utils.domData.get(e,l);i&&"function"==typeof i.dispose&&i.dispose(),g.utils.domData.set(e,l,n&&n.isActive()?n:t)}var a;g.setTemplateEngine=function(e){if(e!=t&&!(e instanceof g.templateEngine))throw new Error("templateEngine must inherit from ko.templateEngine");a=e},g.renderTemplate=function(e,n,s,l,u){if(s=s||{},(s.templateEngine||a)==t)throw new Error("Set a template engine before calling renderTemplate");if(u=u||"replaceChildren",l){var d=i(l),c=function(){return!d||!g.utils.domNodeIsAttachedToDocument(d)},p=d&&"replaceNode"==u?d.parentNode:d;return g.dependentObservable(function(){var t=n&&n instanceof g.bindingContext?n:new g.bindingContext(g.utils.unwrapObservable(n)),a=o(e,t.$data,t),c=r(l,u,a,t,s);"replaceNode"==u&&(l=c,d=i(l))},null,{disposeWhen:c,disposeWhenNodeIsRemoved:p})}return g.memoization.memoize(function(t){g.renderTemplate(e,n,s,t,"replaceNode")})},g.renderTemplateForEach=function(e,i,s,a,l){var u,d=function(t,n){u=l.createChildContext(t,s.as,function(e){e.$index=n});var i=o(e,t,u);return r(null,"ignoreTargetNode",i,u,s)},c=function(e,t,i){n(t,u),s.afterRender&&s.afterRender(t,e),u=null};return g.dependentObservable(function(){var e=g.utils.unwrapObservable(i)||[];"undefined"==typeof e.length&&(e=[e]);var n=g.utils.arrayFilter(e,function(e){return s.includeDestroyed||e===t||null===e||!g.utils.unwrapObservable(e._destroy)});g.dependencyDetection.ignore(g.utils.setDomNodeChildrenFromArrayMapping,null,[a,n,d,s,c])},null,{disposeWhenNodeIsRemoved:a})};var l=g.utils.domData.nextKey();g.bindingHandlers.template={init:function(e,t){var n=g.utils.unwrapObservable(t());if("string"==typeof n||n.name)g.virtualElements.emptyNode(e);else if("nodes"in n){var i=n.nodes||[];if(g.isObservable(i))throw new Error('The "nodes" option must be a plain, non-observable array.');var r=g.utils.moveCleanedNodesToContainerElement(i);new g.templateSources.anonymousTemplate(e).nodes(r)}else{var o=g.virtualElements.childNodes(e),r=g.utils.moveCleanedNodesToContainerElement(o);new g.templateSources.anonymousTemplate(e).nodes(r)}return{controlsDescendantBindings:!0}},update:function(e,t,n,i,r){var o,a,l=t(),u=g.utils.unwrapObservable(l),d=!0,c=null;if("string"==typeof u?(a=l,u={}):(a=u.name,"if"in u&&(d=g.utils.unwrapObservable(u.if)),d&&"ifnot"in u&&(d=!g.utils.unwrapObservable(u.ifnot)),o=g.utils.unwrapObservable(u.data)),"foreach"in u){var p=d&&u.foreach||[];c=g.renderTemplateForEach(a||e,p,u,e,r)}else if(d){var f="data"in u?r.createChildContext(o,u.as):r;c=g.renderTemplate(a||e,f,u,e)}else g.virtualElements.emptyNode(e);s(e,c)}},g.expressionRewriting.bindingRewriteValidators.template=function(e){var t=g.expressionRewriting.parseObjectLiteral(e);return 1==t.length&&t[0].unknown?null:g.expressionRewriting.keyValueArrayContainsKey(t,"name")?null:"This template engine does not support anonymous templates nested within its templates"},g.virtualElements.allowedBindings.template=!0}(),g.exportSymbol("setTemplateEngine",g.setTemplateEngine),g.exportSymbol("renderTemplate",g.renderTemplate),g.utils.findMovesInArrayComparison=function(e,t,n){if(e.length&&t.length){var i,r,o,s,a;for(i=r=0;(!n||i<n)&&(s=e[r]);++r){for(o=0;a=t[o];++o)if(s.value===a.value){s.moved=a.index,a.moved=s.index,t.splice(o,1),i=o=0;break}i+=o}}},g.utils.compareArrays=function(){function e(e,r,o){return o="boolean"==typeof o?{dontLimitMoves:o}:o||{},e=e||[],r=r||[],e.length<r.length?t(e,r,n,i,o):t(r,e,i,n,o)}function t(e,t,n,i,r){var o,s,a,l,u,d,c=Math.min,p=Math.max,f=[],m=e.length,v=t.length,h=v-m||1,b=m+v+1;for(o=0;o<=m;o++)for(l=a,f.push(a=[]),u=c(v,o+h),d=p(0,o-1),s=d;s<=u;s++)if(s)if(o)if(e[o-1]===t[s-1])a[s]=l[s-1];else{var y=l[s]||b,x=a[s-1]||b;a[s]=c(y,x)+1}else a[s]=s+1;else a[s]=o+1;var E,w=[],S=[],N=[];for(o=m,s=v;o||s;)E=f[o][s]-1,s&&E===f[o][s-1]?S.push(w[w.length]={status:n,value:t[--s],index:s}):o&&E===f[o-1][s]?N.push(w[w.length]={status:i,value:e[--o],index:o}):(--s,--o,r.sparse||w.push({status:"retained",value:t[s]}));return g.utils.findMovesInArrayComparison(N,S,!r.dontLimitMoves&&10*m),w.reverse()}var n="added",i="deleted";return e}(),g.exportSymbol("utils.compareArrays",g.utils.compareArrays),function(){function e(e,n,i,r,o){var s=[],a=g.dependentObservable(function(){var t=n(i,o,g.utils.fixUpContinuousNodeArray(s,e))||[];s.length>0&&(g.utils.replaceDomNodes(s,t),r&&g.dependencyDetection.ignore(r,null,[i,t,o])),s.length=0,g.utils.arrayPushAll(s,t)},null,{disposeWhenNodeIsRemoved:e,disposeWhen:function(){return!g.utils.anyDomNodeIsAttachedToDocument(s)}});return{mappedNodes:s,dependentObservable:a.isActive()?a:t}}var n=g.utils.domData.nextKey(),i=g.utils.domData.nextKey();g.utils.setDomNodeChildrenFromArrayMapping=function(r,o,s,a,l){function u(e,t){c=v[t],E!==t&&(T[e]=c),c.indexObservable(E++),g.utils.fixUpContinuousNodeArray(c.mappedNodes,r),y.push(c),S.push(c)}function d(e,t){if(e)for(var n=0,i=t.length;n<i;n++)t[n]&&g.utils.arrayForEach(t[n].mappedNodes,function(i){e(i,n,t[n].arrayEntry)})}o=o||[],a=a||{};for(var c,p,f,m=g.utils.domData.get(r,n)===t,v=g.utils.domData.get(r,n)||[],h=g.utils.arrayMap(v,function(e){return e.arrayEntry}),b=g.utils.compareArrays(h,o,a.dontLimitMoves),y=[],x=0,E=0,w=[],S=[],N=[],T=[],C=[],D=0;p=b[D];D++)switch(f=p.moved,p.status){case"deleted":f===t&&(c=v[x],c.dependentObservable&&(c.dependentObservable.dispose(),c.dependentObservable=t),g.utils.fixUpContinuousNodeArray(c.mappedNodes,r).length&&(a.beforeRemove&&(y.push(c),S.push(c),c.arrayEntry===i?c=null:N[D]=c),c&&w.push.apply(w,c.mappedNodes))),x++;break;case"retained":u(D,x++);break;case"added":f!==t?u(D,f):(c={arrayEntry:p.value,indexObservable:g.observable(E++)},y.push(c),S.push(c),m||(C[D]=c))}g.utils.domData.set(r,n,y),d(a.beforeMove,T),g.utils.arrayForEach(w,a.beforeRemove?g.cleanNode:g.removeNode);for(var k,O,D=0,_=g.virtualElements.firstChild(r);c=S[D];D++){c.mappedNodes||g.utils.extend(c,e(r,s,c.arrayEntry,l,c.indexObservable));for(var A=0;O=c.mappedNodes[A];_=O.nextSibling,k=O,A++)O!==_&&g.virtualElements.insertAfter(r,O,k);!c.initialized&&l&&(l(c.arrayEntry,c.mappedNodes,c.indexObservable),c.initialized=!0)}for(d(a.beforeRemove,N),D=0;D<N.length;++D)N[D]&&(N[D].arrayEntry=i);d(a.afterMove,T),d(a.afterAdd,C)}}(),g.exportSymbol("utils.setDomNodeChildrenFromArrayMapping",g.utils.setDomNodeChildrenFromArrayMapping),g.nativeTemplateEngine=function(){this.allowTemplateRewriting=!1},g.nativeTemplateEngine.prototype=new g.templateEngine,g.nativeTemplateEngine.prototype.constructor=g.nativeTemplateEngine,g.nativeTemplateEngine.prototype.renderTemplateSource=function(e,t,n,i){var r=!(g.utils.ieVersion<9),o=r?e.nodes:null,s=o?e.nodes():null;if(s)return g.utils.makeArray(s.cloneNode(!0).childNodes);var a=e.text();return g.utils.parseHtmlFragment(a,i)},g.nativeTemplateEngine.instance=new g.nativeTemplateEngine,g.setTemplateEngine(g.nativeTemplateEngine.instance),g.exportSymbol("nativeTemplateEngine",g.nativeTemplateEngine),function(){g.jqueryTmplTemplateEngine=function(){function e(){if(n<2)throw new Error("Your version of jQuery.tmpl is too old. Please upgrade to jQuery.tmpl 1.0.0pre or later.")}function t(e,t,n){return o.tmpl(e,t,n)}var n=this.jQueryTmplVersion=function(){if(!o||!o.tmpl)return 0;try{if(o.tmpl.tag.tmpl.open.toString().indexOf("__")>=0)return 2}catch(e){}return 1}();this.renderTemplateSource=function(n,r,s,a){a=a||i,s=s||{},e();var l=n.data("precompiled");if(!l){var u=n.text()||"";u="{{ko_with $item.koBindingContext}}"+u+"{{/ko_with}}",l=o.template(null,u),n.data("precompiled",l)}var d=[r.$data],c=o.extend({koBindingContext:r},s.templateOptions),p=t(l,d,c);return p.appendTo(a.createElement("div")),o.fragments={},p},this.createJavaScriptEvaluatorBlock=function(e){return"{{ko_code ((function() { return "+e+" })()) }}"},this.addTemplate=function(e,t){i.write("<script type='text/html' id='"+e+"'>"+t+"</script>")},n>0&&(o.tmpl.tag.ko_code={open:"__.push($1 || '');"},o.tmpl.tag.ko_with={open:"with($1) {",close:"} "})},g.jqueryTmplTemplateEngine.prototype=new g.templateEngine,g.jqueryTmplTemplateEngine.prototype.constructor=g.jqueryTmplTemplateEngine;var e=new g.jqueryTmplTemplateEngine;e.jQueryTmplVersion>0&&g.setTemplateEngine(e),g.exportSymbol("jqueryTmplTemplateEngine",g.jqueryTmplTemplateEngine)}()})}()}();
//# sourceMappingURL=data:application/json;base64,
